{"file_contents":{"AWS_DEPLOYMENT.md":{"content":"# 🚀 AWS Free Tier Deployment Guide - FlowHub Command Center\n\nComplete guide to deploy FlowHub on AWS Free Tier with **EC2 + RDS PostgreSQL**.\n\n## 📋 AWS Free Tier Resources\n\n### What You Get (12 months free for new accounts):\n- **EC2**: 750 hours/month of t2.micro/t3.micro instances\n- **RDS PostgreSQL**: 750 hours/month of db.t3.micro + 20GB storage\n- **Data Transfer**: 15GB outbound per month\n- **Elastic Load Balancer**: 750 hours/month (optional)\n\n## 🏗️ Architecture Overview\n\n```\nInternet → EC2 t2.micro → RDS PostgreSQL db.t3.micro\n         (Node.js + PM2)    (20GB GP2 Storage)\n```\n\n## 📦 Prerequisites\n\n1. **AWS Account** (with Free Tier eligibility)\n2. **Domain** (optional - you can use EC2 public IP)\n3. **API Keys**: Google Gemini, Gmail OAuth credentials\n\n## 🚀 Step-by-Step Deployment\n\n### Step 1: Set Up RDS PostgreSQL Database\n\n1. **Go to RDS Console** → Create database\n2. **Engine**: PostgreSQL (latest version)\n3. **Template**: Free Tier\n4. **Instance Class**: db.t3.micro\n5. **Storage**: 20 GB GP2 (DO NOT enable autoscaling)\n6. **Settings**:\n   ```\n   DB Instance ID: flowhub-db\n   Master username: postgres\n   Master password: [secure-password]\n   ```\n7. **Connectivity**:\n   - Public access: Yes\n   - VPC security group: Create new\n   - Port: 5432\n8. **Create Database** (takes ~10 minutes)\n\n### Step 2: Configure Database Security Group\n\n1. **Go to EC2 Console** → Security Groups\n2. **Find RDS security group** (rds-launch-wizard-X)\n3. **Edit Inbound Rules**:\n   ```\n   Type: PostgreSQL\n   Port: 5432\n   Source: My IP (your current IP)\n   Description: Allow PostgreSQL access\n   ```\n4. **Save Rules**\n\n### Step 3: Launch EC2 Instance\n\n1. **Go to EC2 Console** → Launch Instance\n2. **Name**: `flowhub-server`\n3. **AMI**: Ubuntu Server 22.04 LTS (Free Tier eligible)\n4. **Instance Type**: t2.micro (Free Tier eligible)\n5. **Key Pair**: Create new or use existing\n6. **Security Group**: Create new with rules:\n   ```\n   SSH (22): Your IP\n   HTTP (80): 0.0.0.0/0\n   HTTPS (443): 0.0.0.0/0\n   Custom (5000): 0.0.0.0/0 [for testing]\n   ```\n7. **Storage**: 8 GB GP3 (Free Tier: up to 30GB)\n8. **Launch Instance**\n\n### Step 4: Connect to EC2 and Install Dependencies\n\n```bash\n# Connect to your EC2 instance\nssh -i \"your-key.pem\" ubuntu@your-ec2-ip\n\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install Node.js 20\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt-get install -y nodejs\n\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Install Git\nsudo apt install git -y\n\n# Install Nginx (optional - for reverse proxy)\nsudo apt install nginx -y\n\n# Verify installations\nnode --version  # Should show v20.x\nnpm --version   # Should show npm version\npm2 --version   # Should show PM2 version\n```\n\n### Step 5: Deploy FlowHub Application\n\n```bash\n# Clone your repository (replace with your repo URL)\ngit clone https://github.com/yourusername/flowhub.git\ncd flowhub\n\n# Install dependencies\nnpm ci\n\n# Create environment file\ncp .env.example .env\nnano .env\n```\n\n**Configure `.env` file**:\n```env\n# Update these values\nGEMINI_API_KEY=your_gemini_api_key\nGOOGLE_CLIENT_ID=your_google_client_id  \nGOOGLE_CLIENT_SECRET=your_google_client_secret\nGMAIL_APP_PASSWORD=your_gmail_app_password\nSMTP_USER=your_gmail@gmail.com\n\n# RDS Database URL (replace with your RDS endpoint)\nDATABASE_URL=postgresql://postgres:your-password@your-rds-endpoint.region.rds.amazonaws.com:5432/postgres\n\n# Security\nSESSION_SECRET=your_secure_random_32_character_string\nJWT_SECRET=your_jwt_secret_32_character_string\n\n# Production settings\nNODE_ENV=production\nPORT=5000\n\n# OAuth redirect (replace with your domain or EC2 IP)\nGOOGLE_REDIRECT_URI=http://your-ec2-ip:5000/auth/gmail/callback\n```\n\n```bash\n# Set up database schema\nnpm run db:push\n\n# Build the application\nnpm run build\n\n# Test the application locally\nnpm start\n# Should see: \"serving on port 5000\"\n# Press Ctrl+C to stop\n```\n\n### Step 6: Configure PM2 for Production\n\n```bash\n# Create PM2 ecosystem file\ncat > ecosystem.config.js << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'flowhub',\n    script: 'dist/server/index.js',\n    instances: 1,\n    exec_mode: 'cluster',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: '/var/log/pm2/flowhub-error.log',\n    out_file: '/var/log/pm2/flowhub-out.log',\n    log_file: '/var/log/pm2/flowhub.log',\n    time: true,\n    autorestart: true,\n    max_restarts: 10,\n    restart_delay: 1000\n  }]\n}\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/pm2\nsudo chown ubuntu:ubuntu /var/log/pm2\n\n# Start application with PM2\npm2 start ecosystem.config.js\npm2 save\npm2 startup\n\n# Follow the instructions from pm2 startup command\n```\n\n### Step 7: Configure Nginx (Optional but Recommended)\n\n```bash\n# Create Nginx configuration\nsudo nano /etc/nginx/sites-available/flowhub\n\n# Add this configuration:\nserver {\n    listen 80;\n    server_name your-domain.com www.your-domain.com;  # or your-ec2-ip\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/flowhub /etc/nginx/sites-enabled/\nsudo rm /etc/nginx/sites-enabled/default\nsudo nginx -t\nsudo systemctl reload nginx\nsudo systemctl enable nginx\n```\n\n### Step 8: Configure Google OAuth\n\n1. **Go to Google Cloud Console** → APIs & Services → Credentials\n2. **Edit your OAuth 2.0 Client**\n3. **Add Authorized Redirect URIs**:\n   ```\n   http://your-ec2-ip:5000/auth/gmail/callback\n   http://your-domain.com/auth/gmail/callback  (if using domain)\n   https://your-domain.com/auth/gmail/callback (if using SSL)\n   ```\n4. **Save Changes**\n\n### Step 9: Test Your Deployment\n\n```bash\n# Check PM2 status\npm2 status\n\n# View logs\npm2 logs flowhub\n\n# Check application health\ncurl http://localhost:5000/api/auth/me\n\n# Access your application\n# Visit: http://your-ec2-ip or http://your-domain.com\n```\n\n## 🔒 Security Hardening\n\n### SSL Certificate (Free with Let's Encrypt)\n\n```bash\n# Install Certbot\nsudo apt install certbot python3-certbot-nginx -y\n\n# Get SSL certificate\nsudo certbot --nginx -d your-domain.com -d www.your-domain.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n### Database Security\n\n```bash\n# Update RDS security group to only allow EC2 access\n# Go to EC2 → Security Groups → RDS Security Group\n# Edit Inbound Rules:\n# Type: PostgreSQL, Port: 5432, Source: [EC2-Security-Group-ID]\n```\n\n## 📊 Monitoring & Maintenance\n\n### PM2 Monitoring\n\n```bash\n# Monitor processes\npm2 monit\n\n# Restart application\npm2 restart flowhub\n\n# View detailed logs\npm2 logs flowhub --lines 100\n\n# Update application\ngit pull origin main\nnpm ci\nnpm run build\npm2 restart flowhub\n```\n\n### AWS CloudWatch (Optional)\n\n1. **Enable detailed monitoring** in EC2 console\n2. **Create CloudWatch alarms** for:\n   - CPU utilization > 80%\n   - Memory usage > 90%\n   - Disk space > 85%\n\n## 💰 Cost Management\n\n### Stay Within Free Tier:\n\n- **Monitor usage** in AWS Billing Console\n- **Set up billing alerts** at $5, $10, $15\n- **Check Free Tier usage** regularly\n- **RDS**: Use exactly 20GB storage, no autoscaling\n- **EC2**: 750 hours = 31 days continuous running\n\n### Expected Monthly Costs After Free Tier:\n- **EC2 t2.micro**: ~$8.50/month\n- **RDS db.t3.micro**: ~$12.60/month  \n- **20GB GP2 Storage**: ~$2.30/month\n- **Data Transfer**: $0.09/GB after 15GB\n- **Total**: ~$25-30/month\n\n## 🚨 Troubleshooting\n\n### Common Issues:\n\n1. **Database Connection Failed**\n   ```bash\n   # Check security group allows port 5432\n   # Verify DATABASE_URL format\n   # Test connection: psql \"DATABASE_URL\"\n   ```\n\n2. **Application Won't Start**\n   ```bash\n   pm2 logs flowhub\n   # Check environment variables\n   # Verify build completed successfully\n   ```\n\n3. **Gmail OAuth Error**\n   ```bash\n   # Verify redirect URI in Google Console\n   # Check GOOGLE_CLIENT_ID/SECRET\n   # Ensure OAuth consent screen configured\n   ```\n\n4. **High Memory Usage**\n   ```bash\n   # Monitor: pm2 monit\n   # Add swap file if needed:\n   sudo fallocate -l 1G /swapfile\n   sudo chmod 600 /swapfile\n   sudo mkswap /swapfile\n   sudo swapon /swapfile\n   ```\n\n## ✅ Production Checklist\n\n- [ ] RDS database created (db.t3.micro, 20GB GP2)\n- [ ] EC2 instance running (t2.micro)\n- [ ] Security groups configured correctly\n- [ ] Environment variables set\n- [ ] Database schema deployed (`npm run db:push`)\n- [ ] Application built (`npm run build`)\n- [ ] PM2 running application\n- [ ] Nginx configured (optional)\n- [ ] SSL certificate installed (optional)\n- [ ] Google OAuth redirect URIs updated\n- [ ] Monitoring and alerts set up\n- [ ] Backup strategy in place\n\n## 🎯 Performance Tips\n\n- **Enable RDS monitoring** for query optimization\n- **Use PM2 cluster mode** for better performance\n- **Configure Nginx caching** for static assets\n- **Monitor AWS CloudWatch metrics**\n- **Optimize database queries** with indexes\n\nYour FlowHub Command Center is now ready for production on AWS Free Tier! 🎉","size_bytes":9385},"README.md":{"content":"# 🌟 FlowHub Command Center\n\nA comprehensive executive dashboard designed to streamline workplace productivity through intelligent notification management, task workflow optimization, and real-time performance monitoring.\n\n## ✨ Production Features\n\n- 🤖 **AI-Powered Task Management**: Smart prioritization with Gemini 2.5 Pro\n- 📧 **Gmail Integration**: Real-time OAuth notifications with popup display\n- ⚡ **Usage Limits**: 50 AI task conversions/month (Free plan) with progress tracking\n- 🔐 **Persistent Authentication**: 7-day JWT sessions with auto-refresh\n- 🎨 **Dark Theme Ready**: Fully responsive with dark/light theme support\n- 📊 **Usage Analytics**: Track converted emails, time saved, task completion\n- 🔒 **Security First**: HTTP-only cookies, rate limiting, input validation\n\n## 🚀 Quick Start\n\n### Prerequisites\n- **Node.js >= 20.0.0**\n- **PostgreSQL Database** (local, Neon, or AWS RDS)\n- **Google API Keys**: Gemini AI + Gmail OAuth credentials\n\n### Local Development (5 minutes)\n```bash\n# 1. Clone and install\ngit clone <your-repo>\ncd flowhub\nnpm ci\n\n# 2. Configure environment\ncp .env.example .env\n# Edit .env with your API keys\n\n# 3. Setup database\nnpm run db:push\n\n# 4. Start development\nnpm run dev\n# Visit: http://localhost:5000\n```\n\n### Production Deployment\n```bash\n# Build and start\nnpm run build\nnpm start\n\n# Or one-command production setup\nnpm run install:prod\n```\n\n## ☁️ AWS Free Tier Deployment\n\nDeploy on AWS with **EC2 + RDS PostgreSQL** for FREE:\n\n- **EC2**: t2.micro (750 hours/month)\n- **RDS**: db.t3.micro PostgreSQL (750 hours/month + 20GB)\n- **Cost**: $0 for 12 months, ~$25/month after\n\n📖 **Complete Guide**: See [AWS_DEPLOYMENT.md](./AWS_DEPLOYMENT.md)\n\n## 🏗️ Architecture\n\n### Tech Stack\n- **Frontend**: React 18, TypeScript, Tailwind CSS, Radix UI\n- **Backend**: Express.js, TypeScript, Drizzle ORM\n- **Database**: PostgreSQL with full CRUD + usage tracking\n- **AI**: Google Gemini 2.5 Pro for task analysis\n- **Auth**: OAuth 2.0 + JWT with secure session management\n\n### Database Schema\n```sql\n✅ users (profiles, authentication)\n✅ tasks (AI-enhanced with priorities) \n✅ userUsage (monthly AI limit tracking)\n✅ notifications (cross-platform feed)\n✅ encryptedGmailTokens (secure OAuth storage)\n✅ priorityEmails (user preferences)\n```\n\n## 📁 Clean Project Structure\n\n```\nflowhub/\n├── client/src/           # React TypeScript frontend\n│   ├── components/       # Reusable UI components\n│   ├── pages/           # Route components\n│   └── hooks/           # Custom React hooks\n├── server/              # Express TypeScript backend\n│   ├── auth.ts          # JWT + OAuth authentication\n│   ├── routes.ts        # API endpoints + AI integration\n│   └── storage.ts       # Database operations + limits\n├── shared/schema.ts     # Drizzle database schema\n├── .env.example         # Complete environment template\n├── AWS_DEPLOYMENT.md    # Production deployment guide\n└── package.json         # Scripts + dependencies\n```\n\n## 🔧 Environment Configuration\n\nAll API keys managed securely via `.env`:\n\n```env\n# AI & Authentication\nGEMINI_API_KEY=          # Google AI Studio\nGOOGLE_CLIENT_ID=        # Google Cloud Console  \nGOOGLE_CLIENT_SECRET=    # Google Cloud Console\nGMAIL_APP_PASSWORD=      # Gmail 2FA app password\nSMTP_USER=              # Your Gmail address\n\n# Database & Security\nDATABASE_URL=           # PostgreSQL connection\nSESSION_SECRET=         # Random 32+ chars\nJWT_SECRET=            # Production JWT secret\n\n# Deployment\nNODE_ENV=production\nPORT=5000\nGOOGLE_REDIRECT_URI=   # OAuth callback URL\n```\n\n## 🎯 User Features\n\n### For End Users:\n- ✅ **Persistent Login**: Stay logged in across browser sessions\n- ✅ **AI Task Creation**: Natural language → smart tasks (50/month free)\n- ✅ **Gmail Notifications**: Real-time email alerts with OAuth\n- ✅ **Usage Tracking**: Monitor AI conversions + limits\n- ✅ **Dark Theme**: Beautiful UI that adapts to preferences\n- ✅ **Data Persistence**: All tasks, emails, and settings saved\n\n### For Developers:\n- ✅ **AWS Ready**: Complete Free Tier deployment guide\n- ✅ **Type Safe**: Full TypeScript implementation  \n- ✅ **Database Agnostic**: Works with any PostgreSQL host\n- ✅ **Scalable**: Usage limits, rate limiting, proper indexes\n- ✅ **Security**: JWT tokens, encrypted OAuth, input validation\n\n## 🚀 Deployment Options\n\n| Option | Cost | Setup Time | Best For |\n|--------|------|------------|----------|\n| **AWS Free Tier** | $0/year | 30 min | Production ready |\n| **Local Development** | Free | 5 min | Testing |\n| **Neon + Vercel** | ~$5/month | 15 min | Serverless |\n| **Railway** | ~$10/month | 10 min | Simple deployment |\n\n## 📊 Production Ready\n\n- ✅ **Error Handling**: Graceful failures with user feedback\n- ✅ **Rate Limiting**: AI usage controls per user/month\n- ✅ **Security**: JWT cookies, HTTPS ready, input sanitization\n- ✅ **Monitoring**: PM2 ready with log rotation\n- ✅ **Performance**: Build optimizations, asset caching\n- ✅ **Documentation**: Complete setup guides included\n\n## 📈 Scaling Features\n\n- **Usage Limits**: Free (50), Basic (100), Premium (500) AI tasks/month\n- **Plan Management**: Built-in subscription handling (Razorpay ready)\n- **Multi-tenant**: User isolation and data privacy\n- **API Ready**: RESTful endpoints for integrations\n- **Analytics**: Track user engagement and feature usage\n\n## 📄 License\n\nMIT License - Production ready for commercial use\n\n---\n\n**Ready to deploy?** Start with [AWS_DEPLOYMENT.md](./AWS_DEPLOYMENT.md) for a complete production setup guide! 🎉","size_bytes":5681},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL environment variable must be set\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});","size_bytes":321},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nFlowHub Command Center is a comprehensive executive dashboard designed to streamline workplace productivity through intelligent notification management, task workflow optimization, and real-time performance monitoring. The application serves as a centralized hub for managing multiple workplace applications, AI-powered task prioritization, and wellness tracking to optimize executive decision-making and workflow efficiency.\n\n## ✅ PRODUCTION READY STATUS\n- ✅ **Smart Workflow Optimization**: AI-powered task prioritization with time parsing\n- ✅ **Gmail Integration**: Full OAuth integration with email notifications  \n- ✅ **Database Schema**: Stable and production-ready with full data persistence\n- ✅ **Time Intelligence**: Enhanced parsing of relative time patterns including \"tomorrow\", \"in 1 hour\", \"in 30 minutes\", etc.\n- ✅ **Priority Sections**: Visual organization with urgent/important/normal categorization\n- ✅ **Manual Task Creation**: Calendar/time picker for precise scheduling with automatic priority assignment\n- ✅ **Data Persistence**: All tasks, notifications, and settings permanently stored in PostgreSQL\n- ✅ **Overdue Display**: Improved handling for old dates and relative time mentions\n- ✅ **Production Build**: Clean builds with no errors or debugging code\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built with **React 18** using **Vite** as the build tool and development server. The application follows a component-based architecture with:\n\n- **Routing**: Uses Wouter for lightweight client-side routing with pages for intro, app-links, landing, and dashboard\n- **State Management**: TanStack React Query for server state management, caching, and real-time data synchronization\n- **UI Framework**: Shadcn/UI components built on Radix UI primitives with Tailwind CSS for styling using a dark theme with custom color variables\n- **TypeScript**: Full TypeScript implementation for type safety across the entire frontend\n\nThe frontend structure follows a modular design with dashboard components organized by feature:\n- Dashboard layout with responsive 12-column grid system\n- Real-time metrics visualization with animated progress bars\n- Notification feed with AI analysis and source app integration\n- Task workflow management system (\"WorkflowRiver\") with priority-based organization\n- Connected app launcher for quick access to workplace tools\n- Wellness and performance monitoring panels with focus scoring\n\n## Backend Architecture\n\nThe backend is an **Express.js** server with TypeScript, structured around:\n\n- **RESTful API**: Express routes for CRUD operations on users, tasks, notifications, connected apps, user metrics, and AI insights\n- **Database Layer**: Drizzle ORM with PostgreSQL for data persistence using Neon serverless database\n- **AI Integration**: Google Gemini AI integration for notification analysis, workflow optimization, and wellness insights\n- **Session Management**: Connect-pg-simple for PostgreSQL-based session storage\n- **Development Setup**: Vite integration for hot module replacement in development with custom logging middleware\n\nKey backend features include:\n- OAuth integration for Gmail and other workplace applications\n- Real-time notification processing and AI analysis\n- Task workflow optimization algorithms\n- Performance metrics calculation and wellness insights generation\n\n## Database Schema\n\nThe PostgreSQL database uses Drizzle ORM with the following key entities:\n\n- **Users**: Core user profiles with authentication data, roles, and profile information\n- **Tasks**: Workflow tasks with priority levels (urgent/important/normal), status tracking (pending/in_progress/completed/paused), time estimates, and due dates\n- **Notifications**: Cross-platform notifications with AI analysis metadata, priority classification, and source app integration\n- **Connected Apps**: Integration status for external workplace applications (Gmail, Slack, Notion, Trello, Zoom, Calendar)\n- **User Metrics**: Performance analytics including focus scores, workload capacity, stress levels, and wellness tracking data\n- **AI Insights**: Machine learning-generated recommendations for workflow optimization, deadline alerts, and wellness suggestions\n- **User App Links**: Custom app links and integrations for personalized workspace access\n\nSchema includes proper foreign key relationships, PostgreSQL enums for standardized values (including 'manual' for user-created tasks), automatic timestamp tracking, and UUID primary keys for scalability.\n\n## Portability Features\n\n✅ **Database Independence**: Uses Drizzle ORM for database-agnostic operations\n✅ **Environment Configuration**: All API keys and secrets managed through environment variables\n✅ **Modular Architecture**: Clean separation between frontend, backend, and database layers\n✅ **Docker Ready**: Project structure supports containerization for deployment\n✅ **Migration Support**: Database schema changes handled through Drizzle migrations\n✅ **Complete Documentation**: Full setup and deployment instructions included\n\n# Setup Instructions for Any Device\n\n## Prerequisites\n- **Node.js 20+** (Download from nodejs.org)\n- **PostgreSQL database** (Local installation or cloud service like Neon)\n- **Google Cloud Project** with Gmail API enabled\n- **Google Gemini API key**\n\n## Quick Start (5 minutes)\n1. **Extract zip file** and navigate to project directory\n2. **Install dependencies**: `npm install`\n3. **Copy environment file**: `cp .env.example .env`\n4. **Configure environment variables** in `.env` file:\n   ```\n   GEMINI_API_KEY=your_gemini_api_key_here\n   GOOGLE_CLIENT_ID=your_google_client_id_here  \n   GOOGLE_CLIENT_SECRET=your_google_client_secret_here\n   DATABASE_URL=postgresql://username:password@localhost:5432/flowhub\n   SESSION_SECRET=your_random_session_secret_here\n   ```\n5. **Setup database**: `npm run db:push`\n6. **Start development**: `npm run dev`\n7. **Visit**: http://localhost:5000\n\n## Production Deployment\n- **Build**: `npm run build`\n- **Start**: `npm start`\n- **Deploy**: Ready for any hosting platform (Vercel, Railway, Render, etc.)\n\n## External Dependencies\n\n## AI Services\n- **Google Gemini AI** (via @google/genai): Powers notification analysis, workflow optimization, and wellness insights generation using the latest Gemini 2.5 models\n\n## Database & Infrastructure\n- **Neon PostgreSQL**: Serverless PostgreSQL database for scalable data storage\n- **Drizzle ORM**: Type-safe database operations with PostgreSQL dialect\n\n## Authentication & Integration\n- **Google OAuth**: **FULLY IMPLEMENTED** Gmail integration for real-time email notifications with popup display functionality - OAuth flow, token management, email fetching, and UI integration all working perfectly\n- **Slack Web API**: Slack notifications and team communication integration\n\n## Smart Workflow Optimization Features\n✅ **AI-Powered Task Analysis**: Uses Gemini 2.5 Pro to intelligently categorize tasks\n✅ **Enhanced Time Pattern Recognition**: Automatically parses \"in 5 min\", \"in 1 hour\", \"tomorrow\", \"in 30 minutes\", etc.\n✅ **Priority Categorization**: \n  - 🚨 **Urgent**: Critical deadlines within 3 hours\n  - ⚡ **Important**: Significant impact, deadlines within 24 hours  \n  - 📋 **Normal**: Standard work items, longer timeframes\n✅ **Visual Organization**: Color-coded sections with task counts and time displays\n✅ **Real-time Sorting**: Tasks automatically ordered by time urgency within each priority\n✅ **Manual Task Creation**: Calendar/time picker interface with automatic priority assignment\n✅ **Improved Overdue Handling**: Better display for old dates and relative time mentions\n✅ **Full Data Persistence**: All tasks permanently stored in PostgreSQL database\n\n## Production Status - FULLY READY\n✅ **Gmail Integration**: Complete OAuth + notification display with dark theme support\n✅ **AI Task Limits**: 50 tasks/month enforced with progress tracking and proper blocking  \n✅ **Persistent Auth**: JWT cookies with 7-day sessions + 30-day refresh tokens\n✅ **AWS Deployment**: Complete Free Tier guide with EC2 + RDS PostgreSQL\n✅ **User Data Persistence**: All emails, profiles, usage tracking stored permanently\n✅ **Clean Project**: Unnecessary files removed, production configuration ready\n✅ **Usage Analytics**: Track conversions, time saved, plan usage with proper UI indicators\n\n## Frontend Libraries\n- **Radix UI**: Accessible component primitives for consistent UI interactions\n- **TanStack React Query**: Server state management with automatic caching and background updates\n- **Wouter**: Lightweight client-side routing\n- **Tailwind CSS**: Utility-first CSS framework with custom dark theme implementation\n- **Lucide React**: Icon library for consistent visual elements\n\n## Development Tools\n- **Vite**: Fast build tool and development server with HMR support\n- **TypeScript**: Static typing for improved developer experience and code reliability\n- **ESBuild**: Fast JavaScript bundler for production builds","size_bytes":9121},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n        heading: [\"var(--font-heading)\"],\n      },\n      fontWeight: {\n        \"450\": \"450\",\n        \"550\": \"550\",\n        \"650\": \"650\",\n        \"750\": \"750\",\n        \"850\": \"850\",\n        \"950\": \"950\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        flow: {\n          \"0%\": { left: \"-100%\" },\n          \"100%\": { left: \"100%\" },\n        },\n        pulseUrgent: {\n          \"0%, 100%\": {\n            opacity: \"1\",\n            boxShadow: \"0 0 10px rgba(245, 158, 11, 0.5)\",\n          },\n          \"50%\": {\n            opacity: \"0.8\",\n            boxShadow: \"0 0 20px rgba(245, 158, 11, 0.8)\",\n          },\n        },\n        holographicShimmer: {\n          \"0%\": {\n            backgroundPosition: \"-200% center\",\n          },\n          \"100%\": {\n            backgroundPosition: \"200% center\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        flow: \"flow 3s infinite\",\n        \"pulse-urgent\": \"pulseUrgent 2s infinite\",\n        \"holographic-shimmer\": \"holographicShimmer 3s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3741},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath, URL } from 'url';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/client\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    strictPort: false,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n      allow: [\"..\"]\n    },\n    allowedHosts: true,\n    hmr: {\n      overlay: false\n    },\n  },\n});\n","size_bytes":1053},"server/auth.ts":{"content":"\nimport jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport { Request, Response, NextFunction } from 'express';\nimport { storage } from './storage';\n\nexport interface AuthenticatedRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    name: string;\n  };\n}\n\n// Environment validation for production\nfunction validateEnvironment() {\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  if (isProduction && !process.env.JWT_SECRET) {\n    throw new Error('SECURITY ERROR: JWT_SECRET environment variable is required in production');\n  }\n  \n  if (isProduction && !process.env.DATABASE_URL) {\n    throw new Error('SECURITY ERROR: DATABASE_URL environment variable is required in production');\n  }\n  \n  // Validate JWT_SECRET strength in production\n  if (isProduction && process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {\n    throw new Error('SECURITY ERROR: JWT_SECRET must be at least 32 characters long in production');\n  }\n}\n\n// Run validation immediately\nvalidateEnvironment();\n\n// JWT Secret with proper fallback for development only\nconst JWT_SECRET = process.env.JWT_SECRET || \n  (process.env.NODE_ENV === 'production' \n    ? (() => { throw new Error('JWT_SECRET is required in production'); })() \n    : 'dev-jwt-secret-32-chars-minimum-length!');\nconst JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';\nconst REFRESH_TOKEN_EXPIRES_IN = process.env.REFRESH_TOKEN_EXPIRES_IN || '30d';\n\n// Generate JWT tokens\nexport function generateTokens(user: { id: string; email: string; name: string }) {\n  const accessToken = jwt.sign(\n    { \n      id: user.id, \n      email: user.email, \n      name: user.name \n    },\n    JWT_SECRET,\n    { \n      expiresIn: JWT_EXPIRES_IN,\n      issuer: 'flowhub-app',\n      audience: 'flowhub-users'\n    }\n  );\n\n  const refreshToken = jwt.sign(\n    { \n      id: user.id, \n      type: 'refresh' \n    },\n    JWT_SECRET,\n    { \n      expiresIn: REFRESH_TOKEN_EXPIRES_IN,\n      issuer: 'flowhub-app',\n      audience: 'flowhub-users'\n    }\n  );\n\n  return { accessToken, refreshToken };\n}\n\n// Verify JWT token\nexport function verifyToken(token: string): any {\n  try {\n    return jwt.verify(token, JWT_SECRET, {\n      issuer: 'flowhub-app',\n      audience: 'flowhub-users'\n    });\n  } catch (error) {\n    return null;\n  }\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 12;\n  return bcrypt.hash(password, saltRounds);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Authentication middleware\nexport function authenticateToken(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  // Try to get token from Authorization header first\n  const authHeader = req.headers['authorization'];\n  let token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  // If no header token, try to get from HTTP-only cookie\n  if (!token) {\n    token = req.cookies?.accessToken;\n  }\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  const decoded = verifyToken(token);\n  if (!decoded) {\n    return res.status(403).json({ message: 'Invalid or expired token' });\n  }\n\n  // Check if it's a refresh token (should not be used for API access)\n  if (decoded.type === 'refresh') {\n    return res.status(403).json({ message: 'Invalid token type' });\n  }\n\n  req.user = {\n    id: decoded.id,\n    email: decoded.email,\n    name: decoded.name\n  };\n\n  next();\n}\n\n// Optional authentication middleware (doesn't fail if no token)\nexport function optionalAuth(req: AuthenticatedRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  let token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    token = req.cookies?.accessToken;\n  }\n\n  if (token) {\n    const decoded = verifyToken(token);\n    if (decoded && decoded.type !== 'refresh') {\n      req.user = {\n        id: decoded.id,\n        email: decoded.email,\n        name: decoded.name\n      };\n    }\n  }\n\n  next();\n}\n\n// Set secure HTTP-only cookies\nexport function setAuthCookies(res: Response, accessToken: string, refreshToken: string) {\n  const isProduction = process.env.NODE_ENV === 'production';\n  \n  // Access token cookie (shorter expiry)\n  res.cookie('accessToken', accessToken, {\n    httpOnly: true,\n    secure: isProduction, // Only send over HTTPS in production\n    sameSite: isProduction ? 'strict' : 'lax', // More flexible in dev\n    maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days in milliseconds\n    path: '/'\n  });\n\n  // Refresh token cookie (longer expiry)\n  res.cookie('refreshToken', refreshToken, {\n    httpOnly: true,\n    secure: isProduction,\n    sameSite: isProduction ? 'strict' : 'lax',\n    maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days in milliseconds\n    path: '/auth' // Only send to auth endpoints\n  });\n}\n\n// Clear auth cookies\nexport function clearAuthCookies(res: Response) {\n  res.clearCookie('accessToken', {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    path: '/'\n  });\n  \n  res.clearCookie('refreshToken', {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    sameSite: 'strict',\n    path: '/auth'\n  });\n}\n\n// Rate limiting for auth endpoints\nconst authAttempts = new Map<string, { count: number; lastAttempt: number }>();\n\nexport function rateLimitAuth(maxAttempts: number = 5, windowMs: number = 15 * 60 * 1000) {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const ip = req.ip || req.connection.remoteAddress || 'unknown';\n    const now = Date.now();\n    \n    const attempts = authAttempts.get(ip);\n    \n    if (attempts) {\n      // Reset if window has passed\n      if (now - attempts.lastAttempt > windowMs) {\n        authAttempts.delete(ip);\n      } else if (attempts.count >= maxAttempts) {\n        return res.status(429).json({ \n          message: 'Too many authentication attempts. Please try again later.',\n          retryAfter: Math.ceil((windowMs - (now - attempts.lastAttempt)) / 1000)\n        });\n      }\n    }\n    \n    next();\n  };\n}\n\n// Track failed auth attempts\nexport function trackFailedAuth(ip: string) {\n  const now = Date.now();\n  const attempts = authAttempts.get(ip);\n  \n  if (attempts) {\n    attempts.count++;\n    attempts.lastAttempt = now;\n  } else {\n    authAttempts.set(ip, { count: 1, lastAttempt: now });\n  }\n}\n\n// Session cleanup for expired tokens\nexport function cleanupExpiredSessions() {\n  // This would typically clean up a session store\n  // For JWT tokens, they're stateless and expire automatically\n  console.log('[Auth] Cleaned up expired sessions');\n}\n\n// Start periodic cleanup\nsetInterval(cleanupExpiredSessions, 60 * 60 * 1000); // Every hour\n","size_bytes":6809},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"../shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\nneonConfig.pipelineConnect = false;\n\nexport function createDatabase() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error(\n      \"DATABASE_URL must be set. Did you forget to provision a database?\",\n    );\n  }\n  \n  const pool = new Pool({ \n    connectionString: process.env.DATABASE_URL,\n    ssl: process.env.NODE_ENV === 'development' ? { rejectUnauthorized: false } : true\n  });\n  return drizzle({ client: pool, schema });\n}\n\n// Only create database connection if DATABASE_URL is available\nlet db: ReturnType<typeof createDatabase> | null = null;\n\nexport function getDb() {\n  if (!db && process.env.DATABASE_URL) {\n    db = createDatabase();\n  }\n  return db;\n}","size_bytes":886},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { taskNotificationScheduler } from \"./notificationScheduler\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Environment validation and startup logging\n  log(\"Starting FlowHub Command Center...\");\n  log(`Database: ${process.env.DATABASE_URL ? 'PostgreSQL' : 'Memory (development mode)'}`);\n  log(`Gemini API: ${process.env.GEMINI_API_KEY ? 'configured' : 'not configured'}`);\n  log(`Google OAuth: ${process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET ? 'configured' : 'not configured'}`);\n\n  const server = await registerRoutes(app);\n\n  // Start the task notification scheduler\n  taskNotificationScheduler.start();\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    log(`Task notification scheduler started`);\n  });\n})();","size_bytes":2404},"server/notificationScheduler.ts":{"content":"\nimport { storage } from \"./storage\";\nimport type { Task } from \"../shared/schema\";\n\ninterface TaskReminder {\n  taskId: string;\n  reminderTime: Date;\n  reminderType: string;\n  sent: boolean;\n}\n\nclass TaskNotificationScheduler {\n  private reminders: Map<string, TaskReminder[]> = new Map();\n  private interval: NodeJS.Timeout | null = null;\n\n  start() {\n    // Check for reminders every minute\n    this.interval = setInterval(() => {\n      this.checkAndSendReminders();\n    }, 60000);\n    \n    // Backfill reminders for existing tasks on startup\n    this.backfillExistingTaskReminders();\n  }\n\n  stop() {\n    if (this.interval) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  async scheduleTaskReminders(task: Task) {\n    if (!task.dueAt || task.status === 'completed') return;\n\n    const dueDate = new Date(task.dueAt);\n    const now = new Date();\n    const reminders: TaskReminder[] = [];\n\n    // Schedule reminders: 1 hour, 30 min, 15 min, 10 min, 5 min before due\n    const reminderTimes = [\n      { minutes: 60, label: \"1 hour\" },\n      { minutes: 30, label: \"30 minutes\" },\n      { minutes: 15, label: \"15 minutes\" },\n      { minutes: 10, label: \"10 minutes\" },\n      { minutes: 5, label: \"5 minutes\" }\n    ];\n\n    for (const reminder of reminderTimes) {\n      const reminderTime = new Date(dueDate.getTime() - reminder.minutes * 60 * 1000);\n      \n      // Only schedule if reminder time is in the future\n      if (reminderTime > now) {\n        reminders.push({\n          taskId: task.id,\n          reminderTime,\n          reminderType: reminder.label,\n          sent: false\n        });\n      }\n    }\n\n    if (reminders.length > 0) {\n      this.reminders.set(task.id, reminders);\n    }\n  }\n\n  private async checkAndSendReminders() {\n    const now = new Date();\n\n    // Check for priority promotions (Important -> Urgent when < 2 hours)\n    await this.checkTaskPriorityPromotions();\n\n    for (const [taskId, taskReminders] of this.reminders.entries()) {\n      for (const reminder of taskReminders) {\n        if (!reminder.sent && reminder.reminderTime <= now) {\n          await this.sendTaskReminder(taskId, reminder.reminderType);\n          reminder.sent = true;\n        }\n      }\n\n      // Clean up sent reminders\n      const activeReminders = taskReminders.filter(r => !r.sent);\n      if (activeReminders.length === 0) {\n        this.reminders.delete(taskId);\n      } else {\n        this.reminders.set(taskId, activeReminders);\n      }\n    }\n  }\n\n  private async checkTaskPriorityPromotions() {\n    try {\n      console.log('[TaskScheduler] Checking for priority promotions...');\n      \n      // Get all important tasks across all users that are not completed\n      const importantTasks = await storage.getTasksByPriority(\"important\");\n      console.log(`[TaskScheduler] Found ${importantTasks.length} important tasks`);\n      \n      const activeTasks = importantTasks.filter(task => \n        task.status !== \"completed\" && \n        task.dueAt\n      );\n      console.log(`[TaskScheduler] Found ${activeTasks.length} active tasks with due dates`);\n\n      const now = new Date();\n      for (const task of activeTasks) {\n        const dueDate = new Date(task.dueAt!);\n        const timeRemaining = dueDate.getTime() - now.getTime();\n        const hoursRemaining = timeRemaining / (1000 * 60 * 60);\n\n        // Promote to urgent if less than 2 hours remaining\n        if (hoursRemaining < 2 && hoursRemaining > 0) {\n          await storage.updateTask(task.id, { priority: \"urgent\" });\n          console.log(`[TaskScheduler] Promoted task \"${task.title}\" from Important to Urgent (${Math.round(hoursRemaining * 60)} minutes remaining)`);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error checking task priority promotions:\", error);\n    }\n  }\n\n  private async sendTaskReminder(taskId: string, reminderType: string) {\n    try {\n      const task = await storage.getTaskById(taskId);\n      if (!task || task.status === 'completed') return;\n\n      let sourceType = \"Manual\";\n      if (task.metadata?.aiGenerated) {\n        sourceType = \"AI Converted\";\n      } else if (task.sourceApp === \"gmail\") {\n        sourceType = \"Mail Converted\";\n      }\n\n      // Store notification data for browser notification API\n      await storage.createNotification({\n        userId: task.userId,\n        title: `Task Due in ${reminderType}`,\n        description: `${sourceType} task \"${task.title}\" is due in ${reminderType}. ${task.description || ''}`,\n        type: \"browser_notification\",\n        sourceApp: \"system\",\n        aiSummary: `Reminder for ${sourceType.toLowerCase()} task due in ${reminderType}`,\n        actionableInsights: [\"Complete task\", \"Reschedule task\", \"Mark as done\"],\n        metadata: {\n          taskId: task.id,\n          reminderType,\n          sourceType,\n          browserNotification: true\n        }\n      });\n\n      console.log(`[TaskScheduler] Created browser notification for task \"${task.title}\" due in ${reminderType}`);\n\n    } catch (error) {\n      console.error(`Failed to send reminder for task ${taskId}:`, error);\n    }\n  }\n\n  removeTaskReminders(taskId: string) {\n    this.reminders.delete(taskId);\n  }\n\n  private async backfillExistingTaskReminders() {\n    try {\n      console.log('[TaskScheduler] Backfilling reminders for existing tasks...');\n      \n      // Get all tasks with future due dates\n      const allTasks = await storage.getTasksByPriority(\"urgent\");\n      const importantTasks = await storage.getTasksByPriority(\"important\");\n      const normalTasks = await storage.getTasksByPriority(\"normal\");\n      \n      const tasksWithDueDates = [...allTasks, ...importantTasks, ...normalTasks]\n        .filter(task => task.dueAt && task.status !== 'completed' && new Date(task.dueAt) > new Date());\n      \n      for (const task of tasksWithDueDates) {\n        await this.scheduleTaskReminders(task);\n      }\n      \n      console.log(`[TaskScheduler] Backfilled reminders for ${tasksWithDueDates.length} tasks`);\n    } catch (error) {\n      console.error('Error backfilling task reminders:', error);\n    }\n  }\n}\n\nexport const taskNotificationScheduler = new TaskNotificationScheduler();\n","size_bytes":6163},"server/openai.ts":{"content":"// Remove unused fs import\nimport { GoogleGenAI, Modality } from \"@google/genai\";\n\n// This API key is from Gemini Developer API Key, not vertex AI API Key\nlet ai: GoogleGenAI | null = null;\n\nif (process.env.GEMINI_API_KEY) {\n  ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n}\n\nexport interface NotificationAnalysis {\n  priority: \"urgent\" | \"important\" | \"informational\";\n  summary: string;\n  actionableInsights: string[];\n  estimatedTimeToHandle: number;\n  suggestedActions: string[];\n}\n\nexport interface WorkflowOptimization {\n  suggestions: {\n    type: \"reorder\" | \"batch\" | \"delegate\" | \"postpone\";\n    description: string;\n    estimatedTimeSaving: number;\n    confidence: number;\n  }[];\n  optimizedSchedule: {\n    taskId: string;\n    suggestedStartTime: string;\n    reason: string;\n  }[];\n}\n\n// Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\nexport async function analyzeNotification(\n  title: string,\n  content: string,\n  sourceApp: string\n): Promise<NotificationAnalysis> {\n  // If AI is not available, return basic analysis\n  if (!ai) {\n    const priority = content.toLowerCase().includes(\"urgent\") || title.toLowerCase().includes(\"urgent\") \n      ? \"urgent\" : \"important\";\n    return {\n      priority: priority as any,\n      summary: `${sourceApp}: ${title}`,\n      actionableInsights: [\"Review notification\", \"Take appropriate action\"],\n      estimatedTimeToHandle: 10,\n      suggestedActions: [\"Read content\", \"Respond if needed\"]\n    };\n  }\n  \n  try {\n    const systemPrompt = `You are an executive assistant AI analyzing workplace notifications for a corporate command center. \n    Analyze the notification and provide priority classification, summary, and actionable insights.\n    Consider business context, urgency indicators, and deadline implications.\n    Respond with JSON in this exact format: {\n      \"priority\": \"urgent|important|informational\",\n      \"summary\": \"concise summary in 1-2 sentences\",\n      \"actionableInsights\": [\"insight1\", \"insight2\"],\n      \"estimatedTimeToHandle\": number_in_minutes,\n      \"suggestedActions\": [\"action1\", \"action2\"]\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            priority: { type: \"string\" },\n            summary: { type: \"string\" },\n            actionableInsights: { type: \"array\", items: { type: \"string\" } },\n            estimatedTimeToHandle: { type: \"number\" },\n            suggestedActions: { type: \"array\", items: { type: \"string\" } },\n          },\n          required: [\"priority\", \"summary\", \"actionableInsights\", \"estimatedTimeToHandle\", \"suggestedActions\"],\n        },\n      },\n      contents: `Source App: ${sourceApp}\\nTitle: ${title}\\nContent: ${content}`,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return {\n        priority: result.priority || \"informational\",\n        summary: result.summary || \"No summary available\",\n        actionableInsights: result.actionableInsights || [],\n        estimatedTimeToHandle: result.estimatedTimeToHandle || 5,\n        suggestedActions: result.suggestedActions || [],\n      };\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    throw new Error(\"Failed to analyze notification: \" + (error as Error).message);\n  }\n}\n\n// Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\nexport interface TaskOptimizationResult {\n  taskId: string;\n  newPriority: \"urgent\" | \"important\" | \"normal\";\n  reason: string;\n  suggestedOrder: number;\n}\n\nexport interface WorkflowOptimizationResult {\n  optimizedTasks: TaskOptimizationResult[];\n  insights: string[];\n  estimatedTimeSaving: number;\n}\n\nexport async function optimizeWorkflow(\n  tasks: Array<{\n    id: string;\n    title: string;\n    description: string;\n    priority: string;\n    estimatedMinutes: number;\n    dueAt?: string;\n  }>,\n  currentTime: Date\n): Promise<WorkflowOptimizationResult> {\n  // If AI is not available, return basic optimization\n  if (!ai) {\n    const urgentTasks = tasks.filter(t => t.priority === 'urgent');\n    const importantTasks = tasks.filter(t => t.priority === 'important');\n    \n    return {\n      optimizedTasks: [...urgentTasks, ...importantTasks].slice(0, 5).map((task, index) => ({\n        taskId: task.id,\n        newPriority: task.priority as any,\n        reason: `Scheduled based on ${task.priority} priority`,\n        suggestedOrder: index + 1\n      })),\n      insights: [\"Tasks ordered by priority: urgent first, then important\"],\n      estimatedTimeSaving: 10\n    };\n  }\n  \n  try {\n    const systemPrompt = `You are an AI workflow optimization system for executive productivity.\n    Analyze the given tasks and intelligently categorize them into 3 priority levels:\n\n    PRIORITY LEVELS:\n    - \"urgent\": Critical deadlines within 1 hour only, emergency situations, time mentions like \"in 5 min\", \"in 10 min\", \"in 30 min\", \"asap\", \"urgent\", \"right now\", \"immediately\"\n    - \"important\": ALL work-related tasks and professional communications including meetings, deadlines, reviews, submissions, reports, business emails. This includes ANY time mentions for work tasks like \"in 1 hour\", \"in 2 hours\", \"in 3 hours\", \"in 6 hours\", \"today\", \"tomorrow\", \"this week\", \"next week\", OR tasks without deadlines that are work-related\n    - \"normal\": Only casual/informal conversations, social chatter, entertainment, personal messages like \"hi\", \"hello\", \"wassup\", \"let's play game\", \"how are you\", social media notifications, non-work related content\n\n    CRITICAL RULE: If a message mentions meetings, work tasks, deadlines, or any professional context, it should be \"important\" regardless of timing (unless within 1 hour = urgent).\n\n    Consider:\n    - Current time vs due dates and relative time mentions\n    - Business impact and urgency indicators from language used\n    - Task dependencies and context\n    - Email urgency patterns and time-sensitive language\n    - Optimal cognitive load distribution\n\n    Order tasks within each priority by time urgency (most time-sensitive first).\n\n    Respond with JSON in this exact format: {\n      \"optimizedTasks\": [\n        {\n          \"taskId\": \"task_id\",\n          \"newPriority\": \"urgent|important|normal\",\n          \"reason\": \"explanation for priority assignment including any time mentions found\",\n          \"suggestedOrder\": number_1_to_N\n        }\n      ],\n      \"insights\": [\"insight1\", \"insight2\"],\n      \"estimatedTimeSaving\": number_in_minutes\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            optimizedTasks: {\n              type: \"array\",\n              items: {\n                type: \"object\",\n                properties: {\n                  taskId: { type: \"string\" },\n                  newPriority: { type: \"string\" },\n                  reason: { type: \"string\" },\n                  suggestedOrder: { type: \"number\" },\n                },\n                required: [\"taskId\", \"newPriority\", \"reason\", \"suggestedOrder\"],\n              },\n            },\n            insights: {\n              type: \"array\",\n              items: { type: \"string\" },\n            },\n            estimatedTimeSaving: { type: \"number\" },\n          },\n          required: [\"optimizedTasks\", \"insights\", \"estimatedTimeSaving\"],\n        },\n      },\n      contents: `Current time: ${currentTime.toISOString()}\\nTasks to optimize: ${JSON.stringify(tasks, null, 2)}`,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return {\n        optimizedTasks: result.optimizedTasks || [],\n        insights: result.insights || [],\n        estimatedTimeSaving: result.estimatedTimeSaving || 0,\n      };\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    throw new Error(\"Failed to optimize workflow: \" + (error as Error).message);\n  }\n}\n\n// Note that the newest Gemini model series is \"gemini-2.5-flash\" or gemini-2.5-pro\"\nexport async function generateWellnessInsights(\n  userMetrics: {\n    focusScore: number;\n    workloadCapacity: number;\n    stressLevel: string;\n    activeHours: number;\n    tasksCompleted: number;\n  }\n): Promise<{\n  insights: string[];\n  suggestions: string[];\n  nextBreakRecommendation: number;\n}> {\n  // If AI is not available, return basic wellness insights\n  if (!ai) {\n    const stressAdvice = userMetrics.stressLevel === 'high' ? \n      \"Take a 15-minute break to improve focus\" : \n      \"Maintain current productivity rhythm\";\n      \n    return {\n      insights: [\n        `Focus score: ${userMetrics.focusScore}% - ${userMetrics.focusScore > 70 ? 'performing well' : 'room for improvement'}`,\n        `Workload: ${userMetrics.workloadCapacity}% capacity utilized`\n      ],\n      suggestions: [\n        stressAdvice,\n        \"Track task completion patterns for optimization\"\n      ],\n      nextBreakRecommendation: userMetrics.activeHours > 4 ? 15 : 30\n    };\n  }\n  \n  try {\n    const systemPrompt = `You are a corporate wellness AI advisor focused on executive performance optimization.\n    Analyze user metrics and provide professional wellness insights disguised as performance optimization.\n    Use corporate language and focus on productivity benefits.\n\n    Respond with JSON in this exact format: {\n      \"insights\": [\"insight1\", \"insight2\"],\n      \"suggestions\": [\"suggestion1\", \"suggestion2\"],\n      \"nextBreakRecommendation\": number_minutes_until_next_break\n    }`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            insights: { type: \"array\", items: { type: \"string\" } },\n            suggestions: { type: \"array\", items: { type: \"string\" } },\n            nextBreakRecommendation: { type: \"number\" },\n          },\n          required: [\"insights\", \"suggestions\", \"nextBreakRecommendation\"],\n        },\n      },\n      contents: `User Performance Metrics:\n      Focus Score: ${userMetrics.focusScore}%\n      Workload Capacity: ${userMetrics.workloadCapacity}%\n      Stress Level: ${userMetrics.stressLevel}\n      Active Hours: ${userMetrics.activeHours}\n      Tasks Completed: ${userMetrics.tasksCompleted}`,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      const result = JSON.parse(rawJson);\n      return {\n        insights: result.insights || [],\n        suggestions: result.suggestions || [],\n        nextBreakRecommendation: result.nextBreakRecommendation || 25,\n      };\n    } else {\n      throw new Error(\"Empty response from model\");\n    }\n  } catch (error) {\n    throw new Error(\"Failed to generate wellness insights: \" + (error as Error).message);\n  }\n}\n\nexport interface TaskAnalysis {\n  title: string;\n  description: string;\n  priority: \"urgent\" | \"important\" | \"normal\";\n  estimatedMinutes: number;\n  dueAt?: Date;\n}\n\n// Convert notification content to structured task using Gemini AI with retry logic\nexport async function analyzeNotificationForTask(\n  notification: {\n    title: string;\n    description?: string;\n    sourceApp?: string;\n  }\n): Promise<TaskAnalysis> {\n  // If AI is not available, use fallback immediately\n  if (!ai) {\n    const fallback = getFallbackTaskFromNotification(notification);\n    return fallback;\n  }\n\n  const maxRetries = 3;\n  const baseDelay = 2000; // 2 seconds\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      const systemPrompt = `You are an executive assistant AI that converts email notifications into very short, actionable tasks.\n      Analyze the complete email content and create a VERY SHORT task title (2-3 words maximum).\n      Focus on the main action required from the email.\n\n      TITLE REQUIREMENTS:\n      - Maximum 2-3 words only\n      - Action-oriented (e.g., \"Reply John\", \"Review docs\", \"Schedule meeting\")\n      - No articles (a, an, the)\n      - No punctuation\n\n      PRIORITY RULES (VERY IMPORTANT - Follow these exactly):\n      - urgent: ONLY for deadlines within 1 hour, emergency situations, words like \"asap\", \"urgent\", \"right now\", \"immediately\", \"in 5 min\", \"in 10 min\", \"in 30 min\"\n      - important: ALL work-related tasks including meetings, deadlines within days/hours, reviews, submissions, reports, business emails, professional communications. ANY work task with time mentions like \"in 1 hour\", \"in 2 hours\", \"in 3 hours\", \"today\", \"tomorrow\", \"this week\". Also tasks without deadlines that are work-related should be important.\n      - normal: ONLY for casual/social conversations, entertainment, personal messages like \"hi\", \"hello\", \"wassup\", \"let's play game\", non-work content\n\n      CRITICAL: If the email mentions work, business, meetings, deadlines, or professional context, it should be \"important\" unless it's within 1 hour (then \"urgent\").\n\n      TIME PARSING INSTRUCTIONS:\n      Current time: ${new Date().toISOString()} (Server timezone: Indian Standard Time - UTC+5:30)\n      When you find time references in the content, convert them to ISO timestamps in IST:\n      - \"in X minutes\" → add X minutes to current time\n      - \"in X hours\" → add X hours to current time  \n      - \"today\" with specific time (e.g., \"9 pm today\", \"2:30 pm today\") → use that exact time today in IST\n      - \"today\" without specific time → set to 5 PM today in IST\n      - \"tomorrow\" → set to 9 AM tomorrow in IST\n      - \"monday\", \"tuesday\", etc. → set to 9 AM on that day this week (or next week if it's past that day)\n      - \"this week\" → set to 5 PM this Friday\n      - \"next week\" → set to 9 AM next Monday\n      - If no time reference found, set dueAt to null\n\n      Respond with JSON in this exact format: {\n        \"title\": \"Very short 2-3 word task title\",\n        \"description\": \"Detailed task description with the complete email content and action steps\",\n        \"priority\": \"urgent|important|normal\",\n        \"estimatedMinutes\": number_between_5_and_480,\n        \"dueAt\": \"ISO_timestamp_or_null\"\n      }`;\n\n      const content = `Email Title: ${notification.title}\nComplete Email Content: ${notification.description || 'No content'}\nSource: ${notification.sourceApp || 'Unknown'}\n\nAnalyze the complete email text above and create a very short 2-3 word task title that captures the main action needed.`;\n\n      const response = await ai.models.generateContent({\n        model: \"gemini-2.5-flash\",\n        config: {\n          systemInstruction: systemPrompt,\n          responseMimeType: \"application/json\",\n          responseSchema: {\n            type: \"object\",\n            properties: {\n              title: { type: \"string\" },\n              description: { type: \"string\" },\n              priority: { type: \"string\" },\n              estimatedMinutes: { type: \"number\" },\n              dueAt: { type: [\"string\", \"null\"] }\n            },\n            required: [\"title\", \"description\", \"priority\", \"estimatedMinutes\"]\n          },\n          temperature: 0.1\n        },\n        contents: content\n      });\n\n      const rawJson = response.text?.trim();\n      if (rawJson) {\n        const result = JSON.parse(rawJson);\n        \n        // Validate required fields\n        if (!result.title || !result.description || !result.priority) {\n          throw new Error(\"Invalid AI response: missing required fields\");\n        }\n        \n        // Post-processing guardrails: override generic AI titles\n        let finalTitle = result.title;\n        const genericTitles = [\"reply email\", \"check email\", \"new email\", \"email response\", \"respond email\"];\n        \n        if (genericTitles.includes(result.title.toLowerCase())) {\n          // Apply deterministic logic to notification content\n          const fallback = getFallbackTaskFromNotification(notification);\n          finalTitle = fallback.title;\n        }\n        \n        // Server-side fallback time parsing if AI didn't set dueAt\n        let finalDueAt = result.dueAt ? new Date(result.dueAt) : undefined;\n        \n        if (!finalDueAt) {\n          const fullText = `${notification.title} ${notification.description || ''}`;\n          finalDueAt = parseServerSideTimeReferences(fullText);\n        }\n        \n        return {\n          title: finalTitle,\n          description: result.description,\n          priority: result.priority,\n          estimatedMinutes: Math.max(5, Math.min(480, result.estimatedMinutes || 15)),\n          dueAt: finalDueAt\n        };\n      } else {\n        throw new Error(\"Empty response from model\");\n      }\n    } catch (error: any) {\n\n      // Check if it's a 503 (overloaded) error or other retryable errors\n      const isRetryableError = error.status === 503 || \n                              error.message?.includes(\"overloaded\") ||\n                              error.message?.includes(\"quota\") ||\n                              error.message?.includes(\"rate limit\");\n\n      if (isRetryableError && attempt < maxRetries) {\n        const delay = baseDelay * Math.pow(2, attempt - 1); // Exponential backoff\n        await new Promise(resolve => setTimeout(resolve, delay));\n        continue;\n      }\n\n      // If all retries failed or non-retryable error, return fallback\n      break;\n    }\n  }\n\n  // Use deterministic fallback helper\n  const fallback = getFallbackTaskFromNotification(notification);\n  return fallback;\n}\n\n// Deterministic fallback helper for task generation\n// Server-side time parsing fallback function\nfunction parseServerSideTimeReferences(text: string): Date | undefined {\n  if (!text) return undefined;\n\n  const now = new Date();\n  const lowerText = text.toLowerCase().trim();\n\n  // Look for \"in X min/mins/minutes/m\" patterns\n  const minuteMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:m|min|mins|minutes?)\\b/i);\n  if (minuteMatch) {\n    const minutes = parseInt(minuteMatch[1]);\n    return new Date(now.getTime() + minutes * 60 * 1000);\n  }\n\n  // Look for \"in X hour/hours/hr/hrs/h\" patterns\n  const hourMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:h|hr|hrs|hour|hours?)\\b/i);\n  if (hourMatch) {\n    const hours = parseInt(hourMatch[1]);\n    return new Date(now.getTime() + hours * 60 * 60 * 1000);\n  }\n\n  // Look for \"in X days\" patterns\n  const dayMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:day|days?)/);\n  if (dayMatch) {\n    const days = parseInt(dayMatch[1]);\n    return new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n  }\n\n  // Handle \"tomorrow\" or \"tommorow\" (common typo) - IST timezone\n  if (lowerText.includes('tomorrow') || lowerText.includes('tommorow')) {\n    const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30\n    const nowIST = new Date(now.getTime() + istOffset);\n    const tomorrow = new Date(nowIST.getFullYear(), nowIST.getMonth(), nowIST.getDate() + 1, 9, 0, 0, 0); // 9 AM IST tomorrow\n    const tomorrowUTC = new Date(tomorrow.getTime() - istOffset);\n    return tomorrowUTC;\n  }\n\n  // Handle \"today\" with specific time mentions (Indian Standard Time - UTC+5:30)\n  if (lowerText.includes('today')) {\n    // Create date in IST timezone\n    const istOffset = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30\n    const nowIST = new Date(now.getTime() + istOffset);\n    const today = new Date(nowIST.getFullYear(), nowIST.getMonth(), nowIST.getDate());\n    \n    // Look for specific time mentions with \"today\"\n    // Match patterns like: \"9 pm\", \"9:00 pm\", \"21:00\", \"9 p.m.\", \"9pm\"\n    const timeToday = lowerText.match(/(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)\\s*today|today\\s*(?:at\\s*)?(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)|(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)/i);\n    \n    if (timeToday) {\n      // Extract hour and minute, handling different capture groups\n      let hour = parseInt(timeToday[1] || timeToday[4] || timeToday[7] || '17');\n      const minute = parseInt(timeToday[2] || timeToday[5] || timeToday[8] || '0');\n      const period = (timeToday[3] || timeToday[6] || timeToday[9] || '').toLowerCase();\n      \n      // Convert to 24-hour format\n      if (period.includes('pm') || period.includes('p.m.')) {\n        if (hour !== 12) hour += 12;\n      } else if (period.includes('am') || period.includes('a.m.')) {\n        if (hour === 12) hour = 0;\n      }\n      \n      // Set time in IST and convert back to UTC for storage\n      today.setHours(hour, minute, 0, 0);\n      const todayUTC = new Date(today.getTime() - istOffset);\n      return todayUTC;\n    } else {\n      // Default to 5 PM IST if no specific time mentioned\n      today.setHours(17, 0, 0, 0);\n      const todayUTC = new Date(today.getTime() - istOffset);\n      return todayUTC;\n    }\n  }\n\n  // Handle specific day names (for this week)\n  const dayNames = {\n    'monday': 1, 'mon': 1,\n    'tuesday': 2, 'tue': 2, 'tues': 2,\n    'wednesday': 3, 'wed': 3,\n    'thursday': 4, 'thu': 4, 'thurs': 4,\n    'friday': 5, 'fri': 5,\n    'saturday': 6, 'sat': 6,\n    'sunday': 0, 'sun': 0\n  };\n\n  for (const [dayName, dayNumber] of Object.entries(dayNames)) {\n    if (lowerText.includes(dayName)) {\n      const targetDate = new Date(now);\n      const currentDay = now.getDay();\n      const daysUntilTarget = (dayNumber - currentDay + 7) % 7;\n      \n      // If it's the same day, assume next week unless it's still early\n      if (daysUntilTarget === 0 && now.getHours() >= 12) {\n        targetDate.setDate(targetDate.getDate() + 7);\n      } else if (daysUntilTarget === 0) {\n        // Same day, set to later today\n        targetDate.setHours(17, 0, 0, 0);\n        return targetDate;\n      } else {\n        targetDate.setDate(targetDate.getDate() + daysUntilTarget);\n      }\n      \n      targetDate.setHours(9, 0, 0, 0); // Set to 9 AM on target day\n      return targetDate;\n    }\n  }\n\n  // Handle \"next week\"\n  if (lowerText.includes('next week')) {\n    const nextWeek = new Date(now);\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    nextWeek.setHours(9, 0, 0, 0);\n    return nextWeek;\n  }\n\n  // Handle \"this week\" (Friday)\n  if (lowerText.includes('this week')) {\n    const friday = new Date(now);\n    const daysUntilFriday = (5 - now.getDay() + 7) % 7;\n    if (daysUntilFriday === 0 && now.getHours() >= 17) {\n      friday.setDate(friday.getDate() + 7); // Next Friday if it's late Friday\n    } else {\n      friday.setDate(friday.getDate() + daysUntilFriday);\n    }\n    friday.setHours(17, 0, 0, 0);\n    return friday;\n  }\n\n  // Look for immediate urgency keywords\n  if (lowerText.includes('asap') || lowerText.includes('urgent') || lowerText.includes('right now') || lowerText.includes('immediately')) {\n    return new Date(now.getTime() + 5 * 60 * 1000); // 5 minutes from now\n  }\n\n  return undefined;\n}\n\n// NEW: Multi-task analysis function - splits emails with multiple deadlines\nexport async function analyzeEmailForMultipleTasks(\n  notification: {\n    title: string;\n    description?: string;\n    sourceApp?: string;\n  }\n): Promise<TaskAnalysis[]> {\n  // If AI is not available, return single task analysis\n  if (!ai) {\n    return [getFallbackTaskFromNotification(notification)];\n  }\n\n  try {\n    const systemPrompt = `You are an executive assistant AI that analyzes emails and identifies if they contain multiple distinct tasks with separate deadlines.\n\n    ANALYZE the email content and determine:\n    1. How many separate actionable tasks exist\n    2. Each task's deadline/timing\n    3. Each task's priority and description\n\n    TASK IDENTIFICATION RULES:\n    - Look for multiple deadlines (e.g., \"submit draft by Monday, final version by Friday\")\n    - Look for multiple action items with different timings\n    - Look for sequential steps with different due dates\n    - Each task should be independently actionable\n\n    TITLE REQUIREMENTS for each task:\n    - Maximum 2-3 words only\n    - Action-oriented (e.g., \"Submit Draft\", \"Final Version\", \"Review Meeting\")\n    - No articles (a, an, the)\n    - No punctuation\n\n    Current time: ${new Date().toISOString()} (Server timezone: Indian Standard Time - UTC+5:30)\n\n    RESPOND with a JSON array of tasks. If only one task exists, return array with one task.\n    Each task should have this format:\n    {\n      \"title\": \"short action title\",\n      \"description\": \"full detailed description\",\n      \"priority\": \"urgent|important|normal\",\n      \"estimatedMinutes\": number,\n      \"dueAt\": \"ISO timestamp or null\"\n    }\n\n    PRIORITY RULES:\n    - urgent: deadlines within 1 hour, emergency situations\n    - important: work-related tasks, deadlines within days/hours\n    - normal: casual/social content`;\n\n    const userPrompt = `Title: ${notification.title}\nContent: ${notification.description || ''}\nSource: ${notification.sourceApp || 'email'}`;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-2.5-flash\",\n      config: {\n        systemInstruction: systemPrompt,\n        responseMimeType: \"application/json\"\n      },\n      contents: [{ role: \"user\", parts: [{ text: userPrompt }] }]\n    });\n\n    let tasks: TaskAnalysis[];\n    try {\n      // FIXED: Use correct Gemini SDK method consistent with other functions\n      const responseText = response.text;\n      tasks = JSON.parse(responseText);\n      \n      // Validate array structure and ensure we have valid task objects\n      if (!Array.isArray(tasks)) {\n        tasks = [tasks]; // Convert single object to array\n      }\n      \n      // Validate each task has required properties\n      tasks = tasks.filter(task => task && typeof task === 'object' && task.title);\n      \n      if (tasks.length === 0) {\n        throw new Error(\"No valid tasks found in AI response\");\n      }\n      \n      console.log(`[MultiTaskAnalysis] Successfully parsed ${tasks.length} tasks from AI response`);\n    } catch (parseError) {\n      console.error('Multi-task parsing error:', parseError);\n      console.log('[MultiTaskAnalysis] Falling back to single task analysis');\n      return [getFallbackTaskFromNotification(notification)];\n    }\n\n    // Validate and clean up tasks\n    return tasks.map(task => ({\n      title: task.title || \"Task\",\n      description: task.description || notification.description || \"No description\",\n      priority: (task.priority as \"urgent\" | \"important\" | \"normal\") || \"normal\",\n      estimatedMinutes: typeof task.estimatedMinutes === 'number' ? task.estimatedMinutes : 30,\n      dueAt: task.dueAt || null\n    }));\n\n  } catch (error) {\n    console.error('Multi-task analysis error:', error);\n    return [getFallbackTaskFromNotification(notification)];\n  }\n}\n\nfunction getFallbackTaskFromNotification(notification: {\n  title: string;\n  description?: string;\n  sourceApp?: string;\n}): TaskAnalysis {\n  let shortTitle = \"Check notification\";\n  let priority: \"urgent\" | \"important\" | \"normal\" = \"normal\";\n  \n  // Focus on notification description (actual content) over generic title\n  const content = notification.description || notification.title;\n  const lowerContent = content.toLowerCase();\n  \n  // Gmail-specific logic: parse email content\n  if (notification.sourceApp === 'gmail') {\n    // Look for specific actions in email content (prioritize action keywords over greetings)\n    if (lowerContent.includes(\"submit\") || lowerContent.includes(\"submission\") || lowerContent.includes(\"assignment\") || \n        lowerContent.includes(\"deliverable\") || lowerContent.includes(\"turn in\") || lowerContent.includes(\"attach\") || \n        lowerContent.includes(\"upload\")) {\n      shortTitle = \"Submit file\";\n    } else if (lowerContent.includes(\"deadline\") || lowerContent.includes(\"due\")) {\n      shortTitle = \"Meet deadline\";\n    } else if (lowerContent.includes(\"project\") && (lowerContent.includes(\"review\") || lowerContent.includes(\"check\"))) {\n      shortTitle = \"Review project\";\n    } else if (lowerContent.includes(\"meeting\") || lowerContent.includes(\"meet\") || lowerContent.includes(\"zoom\") || lowerContent.includes(\"google meet\")) {\n      shortTitle = \"Join meeting\";\n    } else if (lowerContent.includes(\"invoice\") || lowerContent.includes(\"payment\") || lowerContent.includes(\"bill\")) {\n      shortTitle = \"Pay invoice\";\n    } else if (lowerContent.includes(\"approve\") || lowerContent.includes(\"approval\") || lowerContent.includes(\"sign\")) {\n      shortTitle = \"Review approval\";\n    } else if (lowerContent.includes(\"hi\") || lowerContent.includes(\"hello\") || lowerContent.includes(\"hangout\") || lowerContent.includes(\"chat\")) {\n      shortTitle = \"Reply email\";\n    } else {\n      // Try to extract meaningful subject from \"Subject: content\" format\n      const subjectMatch = lowerContent.match(/:\\s*(.+)/);\n      if (subjectMatch) {\n        const subject = subjectMatch[1].trim();\n        const meaningfulWords = subject.split(' ')\n          .filter(word => word.length > 2 && !['the', 'and', 'for', 'with', 'from', 'just', 'will'].includes(word))\n          .slice(0, 2);\n        \n        if (meaningfulWords.length >= 2) {\n          shortTitle = meaningfulWords.join(' ').replace(/[^\\w\\s]/g, '');\n        } else if (meaningfulWords.length === 1) {\n          shortTitle = `Handle ${meaningfulWords[0]}`;\n        } else {\n          shortTitle = \"Reply email\";\n        }\n      } else {\n        shortTitle = \"Reply email\";\n      }\n    }\n  } else {\n    // For non-email notifications, use general logic\n    const allText = (notification.title + ' ' + (notification.description || '')).toLowerCase();\n    \n    if (allText.includes(\"meeting\") || allText.includes(\"meet\")) {\n      shortTitle = allText.includes(\"google meet\") || allText.includes(\"zoom\") ? \"Join meeting\" : \"Schedule meeting\";\n    } else if (allText.includes(\"review\") || allText.includes(\"check\")) {\n      shortTitle = \"Review item\";\n    } else if (allText.includes(\"call\") || allText.includes(\"phone\")) {\n      shortTitle = \"Make call\";\n    } else if (allText.includes(\"submit\") || allText.includes(\"send\")) {\n      shortTitle = \"Submit task\";\n    } else if (allText.includes(\"deadline\") || allText.includes(\"due\")) {\n      shortTitle = \"Complete deadline\";\n    } else if (allText.includes(\"boss\") || allText.includes(\"manager\")) {\n      shortTitle = \"Contact manager\";\n    } else {\n      // Extract meaningful words from title\n      const titleWords = notification.title.split(' ').filter(word => \n        word.length > 2 && !['the', 'and', 'for', 'with', 'from'].includes(word.toLowerCase())\n      );\n      if (titleWords.length >= 2) {\n        shortTitle = titleWords.slice(0, 2).join(' ');\n      } else if (titleWords.length === 1) {\n        shortTitle = `Handle ${titleWords[0]}`;\n      }\n    }\n  }\n  \n  // Priority detection based on time and context - MOVED to analyze the FULL text including description\n  const allText = (notification.title + ' ' + (notification.description || '')).toLowerCase();\n  \n  // Check for casual/social patterns FIRST (highest specificity) - Check DESCRIPTION content primarily\n  if (lowerContent.match(/\\b(?:hi|hello|hey|wassup|what's up|how are you|how r u|good morning|good afternoon|good evening|hangout|chat|let's play|game|social|casual)\\b/) ||\n      lowerContent.match(/^(?:hi|hello|hey)\\s*[!.]*\\s*$/) ||\n      allText.match(/\\b(?:hi|hello|hey|wassup|what's up|how are you|how r u|good morning|good afternoon|good evening|hangout|chat|let's play|game|social|casual)\\b/) ||\n      allText.match(/^(?:hi|hello|hey)\\s*[!.]*\\s*$/)) {\n    priority = \"normal\";\n  }\n  // Check for urgent patterns (within 1 hour or immediate action needed)\n  else if (allText.match(/\\b(?:in\\s*(?:[1-5]?\\d)\\s*(?:min|mins|minutes?))\\b/) ||\n      allText.match(/\\b(?:asap|urgent|right now|immediately|emergency)\\b/) ||\n      allText.match(/\\b(?:in\\s*(?:[1-9]|[1-5][0-9])\\s*(?:min|mins|minutes?))\\b/)) {\n    priority = \"urgent\";\n  }\n  // Check for important patterns (work-related, deadlines within hours/days) - EXCLUDE if already classified as casual\n  else if (allText.match(/\\b(?:meeting|work|boss|client|deadline|important|review|submit|report|project|task|schedule|call)\\b/) ||\n           allText.match(/\\b(?:in\\s*(?:[1-9]|[12][0-9])\\s*(?:hour|hours?|hrs?))\\b/) ||\n           allText.match(/\\b(?:today|tomorrow|this\\s+(?:morning|afternoon|evening|week))\\b/)) {\n    priority = \"important\";\n  }\n  \n  return {\n    title: shortTitle,\n    description: `Complete email content:\\n\\n${notification.title}\\n\\n${notification.description || 'No content available'}\\n\\nAction needed: Review and respond to this notification.`,\n    priority: priority,\n    estimatedMinutes: 15\n  };\n}","size_bytes":32684},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertTaskSchema,\n  insertNotificationSchema,\n  insertUserMetricsSchema,\n  insertAiInsightSchema,\n  insertUserAppLinkSchema,\n  InsertTask,\n} from \"../shared/schema\";\nimport {\n  analyzeNotification,\n  optimizeWorkflow,\n  generateWellnessInsights,\n  analyzeNotificationForTask,\n  analyzeEmailForMultipleTasks,\n} from \"./openai\";\nimport { google } from \"googleapis\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { smartScheduler } from \"./scheduler\";\nimport { taskNotificationScheduler } from \"./notificationScheduler\";\nimport nodemailer from 'nodemailer';\nimport cookieParser from 'cookie-parser';\nimport {\n  generateTokens,\n  verifyToken,\n  hashPassword,\n  verifyPassword,\n  authenticateToken,\n  optionalAuth,\n  setAuthCookies,\n  clearAuthCookies,\n  rateLimitAuth,\n  trackFailedAuth,\n  type AuthenticatedRequest\n} from \"./auth\";\n\n// Store connected user email addresses globally\nconst userEmails = new Map();\n\n// Store processed email IDs to prevent duplicates\nconst processedEmailIds = new Set();\n\n// Define the redirect URI for Google OAuth\nconst GOOGLE_REDIRECT_URI = process.env.GOOGLE_REDIRECT_URI || `https://${process.env.REPLIT_DEV_DOMAIN || 'df70036d-05e8-4417-8c01-8758b3cd0e4a-00-1pnlziilqjzlp.pike.replit.dev'}/auth/gmail/callback`;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Add cookie parser middleware\n  app.use(cookieParser());\n\n  // Authentication routes\n  app.post('/auth/register', rateLimitAuth(), async (req, res) => {\n    try {\n      const { name, email, password } = req.body;\n\n      if (!name || !email || !password) {\n        return res.status(400).json({\n          success: false,\n          message: 'Name, email, and password are required'\n        });\n      }\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(409).json({\n          success: false,\n          message: 'User with this email already exists'\n        });\n      }\n\n      // Hash password and create user\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        name,\n        email,\n        password: hashedPassword,\n      });\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      // Set HTTP-only cookies\n      setAuthCookies(res, accessToken, refreshToken);\n\n      res.status(201).json({\n        success: true,\n        message: 'User registered successfully',\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n          profileImageUrl: user.profileImageUrl\n        }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to register user'\n      });\n    }\n  });\n\n  app.post('/auth/login', rateLimitAuth(), async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      const ip = req.ip || req.connection.remoteAddress || 'unknown';\n\n      if (!email || !password) {\n        return res.status(400).json({\n          success: false,\n          message: 'Email and password are required'\n        });\n      }\n\n      // Special demo login\n      if (email === 'demo@flowhub.com' && !password) {\n        const demoUser = await storage.getUser('demo-user');\n        if (demoUser) {\n          const { accessToken, refreshToken } = generateTokens({\n            id: demoUser.id,\n            email: demoUser.email,\n            name: demoUser.name\n          });\n\n          setAuthCookies(res, accessToken, refreshToken);\n\n          return res.json({\n            success: true,\n            message: 'Demo login successful',\n            user: {\n              id: demoUser.id,\n              name: demoUser.name,\n              email: demoUser.email,\n              role: demoUser.role,\n              profileImageUrl: demoUser.profileImageUrl\n            }\n          });\n        }\n      }\n\n      // Regular login\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        trackFailedAuth(ip);\n        return res.status(401).json({\n          success: false,\n          message: 'Invalid email or password'\n        });\n      }\n\n      const isValidPassword = await verifyPassword(password, user.password);\n      if (!isValidPassword) {\n        trackFailedAuth(ip);\n        return res.status(401).json({\n          success: false,\n          message: 'Invalid email or password'\n        });\n      }\n\n      // Generate tokens\n      const { accessToken, refreshToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      // Set HTTP-only cookies\n      setAuthCookies(res, accessToken, refreshToken);\n\n      res.json({\n        success: true,\n        message: 'Login successful',\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n          profileImageUrl: user.profileImageUrl\n        }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to login'\n      });\n    }\n  });\n\n  app.post('/auth/logout', (req, res) => {\n    clearAuthCookies(res);\n    res.json({ success: true, message: 'Logged out successfully' });\n  });\n\n  app.post('/auth/refresh', async (req, res) => {\n    try {\n      const refreshToken = req.cookies?.refreshToken;\n\n      if (!refreshToken) {\n        return res.status(401).json({ success: false, message: 'Refresh token required' });\n      }\n\n      const decoded = verifyToken(refreshToken);\n      if (!decoded || decoded.type !== 'refresh') {\n        return res.status(403).json({ success: false, message: 'Invalid refresh token' });\n      }\n\n      const user = await storage.getUser(decoded.id);\n      if (!user) {\n        return res.status(404).json({ success: false, message: 'User not found' });\n      }\n\n      // Generate new tokens\n      const { accessToken, refreshToken: newRefreshToken } = generateTokens({\n        id: user.id,\n        email: user.email,\n        name: user.name\n      });\n\n      // Set new HTTP-only cookies\n      setAuthCookies(res, accessToken, newRefreshToken);\n\n      res.json({ success: true, message: 'Tokens refreshed successfully' });\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      res.status(500).json({ success: false, message: 'Failed to refresh token' });\n    }\n  });\n\n  app.get('/auth/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n\n    // Get fresh user data from database\n    const freshUser = await storage.getUser(req.user.id);\n    if (!freshUser) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    // Parse name into first and last name\n    const nameParts = (freshUser.name || '').split(' ');\n    const firstName = nameParts[0] || '';\n    const lastName = nameParts.slice(1).join(' ') || '';\n\n    res.json({\n      user: {\n        id: freshUser.id,\n        name: freshUser.name,\n        email: freshUser.email,\n        role: freshUser.role || null,\n        profileImageUrl: freshUser.profileImageUrl || null,\n        profilePicture: freshUser.profileImageUrl || null,\n        firstName,\n        lastName\n      }\n    });\n  });\n\n  // Add API version of auth endpoints for frontend\n  app.get('/api/auth/me', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    if (!req.user) {\n      return res.status(401).json({ message: 'Not authenticated' });\n    }\n\n    // Get fresh user data from database\n    const freshUser = await storage.getUser(req.user.id);\n    if (!freshUser) {\n      return res.status(401).json({ message: 'User not found' });\n    }\n\n    // Parse name into first and last name\n    const nameParts = (freshUser.name || '').split(' ');\n    const firstName = nameParts[0] || '';\n    const lastName = nameParts.slice(1).join(' ') || '';\n\n    res.json({\n      user: {\n        id: freshUser.id,\n        name: freshUser.name,\n        email: freshUser.email,\n        role: freshUser.role || null,\n        profileImageUrl: freshUser.profileImageUrl || null,\n        profilePicture: freshUser.profileImageUrl || null,\n        firstName,\n        lastName\n      }\n    });\n  });\n\n  // Profile update endpoint\n  app.put('/api/auth/profile', authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ message: 'Not authenticated' });\n      }\n\n      const { firstName, lastName, email, profilePicture } = req.body;\n\n      // Build update object with only provided fields\n      const updates: Partial<any> = {};\n\n      // Handle name updates - always combine first and last name if either is provided\n      if (firstName !== undefined || lastName !== undefined) {\n        const newName = [firstName || '', lastName || ''].filter(Boolean).join(' ').trim();\n        if (newName) {\n          updates.name = newName;\n        }\n      }\n\n      if (email !== undefined && email.trim()) {\n        updates.email = email.trim();\n      }\n\n      if (profilePicture !== undefined) {\n        updates.profileImageUrl = profilePicture;\n      }\n\n      // Only update if there are actual changes\n      if (Object.keys(updates).length === 0) {\n        return res.status(400).json({ message: 'No valid fields to update' });\n      }\n\n      console.log('Updating user profile:', req.user.id, updates);\n      const updatedUser = await storage.updateUser(req.user.id, updates);\n      console.log('Profile updated successfully:', updatedUser);\n\n      // Parse the updated name for response\n      const nameParts = (updatedUser.name || '').split(' ');\n      const firstName_response = nameParts[0] || '';\n      const lastName_response = nameParts.slice(1).join(' ') || '';\n\n      res.json({\n        success: true,\n        message: 'Profile updated successfully',\n        user: {\n          id: updatedUser.id,\n          name: updatedUser.name,\n          email: updatedUser.email,\n          role: updatedUser.role,\n          profileImageUrl: updatedUser.profileImageUrl,\n          profilePicture: updatedUser.profileImageUrl,\n          firstName: firstName_response,\n          lastName: lastName_response\n        }\n      });\n    } catch (error) {\n      console.error('Profile update error:', error);\n      res.status(500).json({\n        success: false,\n        message: 'Failed to update profile'\n      });\n    }\n  });\n  // Waitlist join endpoint\n  app.post('/api/waitlist/join', async (req, res) => {\n    try {\n      const { userEmail, plan } = req.body;\n\n      // Get real connected email if available, fallback to provided userEmail\n      const realUserEmail = userEmails.get(\"demo-user\") || userEmail;\n\n      // Send email notification about waitlist signup\n      const emailContent = `\n        New Premium Upgrade Request\n\n        User Email: ${realUserEmail}\n        Requested Plan: ${plan}\n        Timestamp: ${new Date().toISOString()}\n\n        Please follow up with this user for premium upgrade.\n      `;\n\n      // Send email notification using Nodemailer\n      try {\n        // Configure email transporter (using Gmail SMTP)\n        const transporter = nodemailer.createTransport({\n          service: 'gmail',\n          auth: {\n            user: 'chavanuday407@gmail.com',\n            pass: process.env.GMAIL_APP_PASSWORD\n          }\n        });\n\n        // Check if Gmail app password is configured\n        if (!process.env.GMAIL_APP_PASSWORD) {\n          throw new Error('GMAIL_APP_PASSWORD environment variable is not set');\n        }\n\n        // Send email to your mailbox\n        const mailOptions = {\n          from: process.env.SMTP_USER || 'noreply@flowhub.com',\n          to: 'chavanuday407@gmail.com',\n          subject: 'FlowHub Premium Upgrade Request',\n          html: `\n            <h2>New Premium Upgrade Request</h2>\n            <p><strong>User Email:</strong> ${realUserEmail}</p>\n            <p><strong>Requested Plan:</strong> ${plan}</p>\n            <p><strong>Timestamp:</strong> ${new Date().toISOString()}</p>\n            <br>\n            <p>Please follow up with this user for premium upgrade.</p>\n          `,\n          text: emailContent\n        };\n\n        await transporter.sendMail(mailOptions);\n        console.log('Waitlist email sent successfully to chavanuday407@gmail.com');\n\n        // Also create a notification in the system for tracking\n        // REMOVED: This notification should not be created as per the requirement.\n        // await storage.createNotification({\n        //   userId: \"demo-user\",\n        //   title: `Waitlist Signup Confirmed`,\n        //   description: `Your request for ${plan} plan has been received. We'll contact you soon at ${userEmail}.`,\n        //   type: \"important\",\n        //   sourceApp: \"system\",\n        //   aiSummary: `Waitlist signup confirmation for ${userEmail}`,\n        //   actionableInsights: [\"Check email\", \"Prepare for upgrade\"],\n        //   metadata: {\n        //     userEmail,\n        //     plan,\n        //     signupTime: new Date().toISOString(),\n        //     emailSent: true\n        //   }\n        // });\n\n      } catch (emailError) {\n        console.error('Failed to send email notification:', emailError);\n\n        // Log specific error details for debugging\n        if (emailError instanceof Error) {\n          console.error('Email error details:', {\n            message: emailError.message,\n            stack: emailError.stack\n          });\n        }\n\n        // Create a fallback notification if email fails\n        await storage.createNotification({\n          userId: \"demo-user\",\n          title: `Waitlist Signup Recorded`,\n          description: `Your ${plan} plan request has been recorded. Email notification failed but your request is saved.`,\n          type: \"informational\",\n          sourceApp: \"system\",\n          aiSummary: `Waitlist signup recorded for ${userEmail} (email failed)`,\n          actionableInsights: [\"Manual follow-up required\"],\n          metadata: {\n            userEmail,\n            plan,\n            signupTime: new Date().toISOString(),\n            emailFailed: true\n          }\n        });\n      }\n\n      res.json({ success: true, message: 'Successfully joined waitlist' });\n    } catch (error) {\n      console.error('Error joining waitlist:', error);\n      res.status(500).json({ error: 'Failed to join waitlist' });\n    }\n  });\n\n  // Health check endpoint\n  app.get(\"/health\", (req, res) => {\n    res.status(200).json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Get user AI tasks limit\n  app.get(\"/api/users/:id/ai-tasks-limit\", authenticateToken, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.params.id;\n      \n      // Ensure user can only access their own data or is admin\n      if (req.user?.id !== userId && req.user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const limitData = await storage.checkAiTaskLimit(userId);\n      res.json(limitData);\n    } catch (error) {\n      console.error(\"Error fetching AI tasks limit:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI tasks limit\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const tasks = await storage.getUserTasks(userId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch tasks\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n\n      // Schedule reminders for the new task\n      await taskNotificationScheduler.scheduleTaskReminders(task);\n\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const task = await storage.updateTask(req.params.id, updates);\n\n      // If due date was updated, reschedule reminders\n      if (updates.dueAt) {\n        taskNotificationScheduler.removeTaskReminders(req.params.id);\n        await taskNotificationScheduler.scheduleTaskReminders(task);\n      }\n\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.post(\"/api/tasks/:id/start\", async (req, res) => {\n    try {\n      const task = await storage.updateTask(req.params.id, {\n        status: \"in_progress\" as any,\n        startedAt: new Date(),\n      });\n\n      // Trigger smart rescheduling when starting a task\n      try {\n        await smartScheduler.rescheduleUserTasks(task.userId);\n      } catch (scheduleError) {\n        // Auto-rescheduling failed, but task started successfully\n      }\n\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start task\" });\n    }\n  });\n\n  app.post(\"/api/tasks/:id/stop\", async (req, res) => {\n    try {\n      // Calculate actual minutes spent on task\n      const existingTask = await storage.getTaskById(req.params.id);\n      let actualMinutes = undefined;\n\n      if (existingTask?.startedAt) {\n        const startTime = new Date(existingTask.startedAt);\n        const endTime = new Date();\n        actualMinutes = Math.ceil((endTime.getTime() - startTime.getTime()) / (1000 * 60));\n      }\n\n      const task = await storage.updateTask(req.params.id, {\n        status: \"completed\" as any,\n        completedAt: new Date(),\n        actualMinutes,\n      });\n\n      // Remove reminders for completed task\n      taskNotificationScheduler.removeTaskReminders(req.params.id);\n\n      // Trigger smart rescheduling after task completion\n      try {\n        const reschedulingResult = await smartScheduler.rescheduleUserTasks(task.userId, req.params.id);\n\n        // Create AI insight about the rescheduling if tasks were rescheduled\n        if (reschedulingResult.rescheduledTasks.length > 0) {\n          await storage.createAiInsight({\n            userId: task.userId,\n            type: \"task_rescheduling\",\n            title: \"Tasks Auto-Rescheduled\",\n            description: `Completed task influenced rescheduling of ${reschedulingResult.rescheduledTasks.length} upcoming tasks. ${reschedulingResult.insights.join(' ')}`,\n            priority: \"normal\" as any,\n            metadata: {\n              rescheduledTasks: reschedulingResult.rescheduledTasks,\n              completedTaskId: req.params.id,\n              timeSaved: reschedulingResult.totalTimeSaved\n            },\n          });\n        }\n      } catch (scheduleError) {\n        // Auto-rescheduling failed, but task completed successfully\n      }\n\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to stop task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      await storage.deleteTask(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Create task manually without AI\n\n  // Create task from natural language input\n  app.post(\"/api/tasks/create-from-text\", async (req, res) => {\n    try {\n      const { userId, naturalLanguageInput } = req.body;\n\n      if (!userId || !naturalLanguageInput) {\n        return res.status(400).json({ message: \"userId and naturalLanguageInput are required\" });\n      }\n\n      // Check AI task limits before proceeding\n      const limitCheck = await storage.checkAiTaskLimit(userId);\n      if (!limitCheck.withinLimit) {\n        return res.status(429).json({\n          message: \"AI task limit exceeded\",\n          error: \"PLAN_LIMIT_EXCEEDED\",\n          currentCount: limitCheck.currentCount,\n          limit: limitCheck.limit,\n          planType: limitCheck.planType,\n          upgradeRequired: true\n        });\n      }\n\n      // Try AI analysis first (wait for it to complete)\n      let aiAnalysis;\n      try {\n        aiAnalysis = await analyzeNotificationForTask({\n          title: naturalLanguageInput,\n          description: naturalLanguageInput,\n          sourceApp: \"manual\"\n        });\n      } catch (error) {\n        console.error(\"AI analysis failed:\", error);\n        // Continue with fallback if AI fails\n      }\n\n      // Use AI results if available, otherwise use fallback\n      const taskData: InsertTask = {\n        userId,\n        title: aiAnalysis?.title || naturalLanguageInput.slice(0, 60).trim() || \"New Task\",\n        description: aiAnalysis?.description || naturalLanguageInput,\n        priority: (aiAnalysis?.priority as any) || \"important\",\n        status: \"pending\" as any,\n        estimatedMinutes: aiAnalysis?.estimatedMinutes || 30,\n        dueAt: aiAnalysis?.dueAt || null,\n        sourceApp: \"manual\" as any,\n        metadata: {\n          aiGenerated: !!aiAnalysis?.title, // True if AI provided a title\n          originalInput: naturalLanguageInput,\n          manuallyCreated: true,\n          processingAI: false, // Processing is complete\n          ...(aiAnalysis && { aiAnalysis })\n        }\n      };\n\n      const task = await storage.createAiTaskWithLimit(taskData);\n      if (!task) {\n        return res.status(429).json({\n          message: \"AI task limit exceeded\",\n          error: \"PLAN_LIMIT_EXCEEDED\",\n          upgradeRequired: true,\n        });\n      }\n\n      // Schedule reminders for the task\n      await taskNotificationScheduler.scheduleTaskReminders(task);\n\n      console.log(`Task ${task.id} created with AI analysis: ${task.title}`);\n\n      // Return success with the completed task (AI-processed or fallback)\n      res.json({ success: true, task });\n\n    } catch (error) {\n      console.error(\"Task creation error:\", error);\n      res.status(500).json({ message: \"Failed to create task from natural language\" });\n    }\n  });\n\n  // Convert notification to task using Gemini AI\n  app.post(\"/api/notifications/:id/convert-to-task\", async (req, res) => {\n    try {\n      const notificationId = req.params.id;\n      const notification = await storage.getNotificationById(notificationId);\n\n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n\n      // Check AI task limits before proceeding\n      const limitCheck = await storage.checkAiTaskLimit(notification.userId);\n      if (!limitCheck.withinLimit) {\n        return res.status(429).json({\n          message: \"AI task limit exceeded\",\n          error: \"PLAN_LIMIT_EXCEEDED\",\n          currentCount: limitCheck.currentCount,\n          limit: limitCheck.limit,\n          planType: limitCheck.planType,\n          upgradeRequired: true\n        });\n      }\n\n      // Use full email content from notification metadata if available\n      const fullContent = notification.metadata?.fullEmailContent || notification.description;\n\n      // NEW: Use multi-task analysis to detect multiple deadlines in emails\n      const taskAnalyses = await analyzeEmailForMultipleTasks({\n        title: notification.title,\n        description: fullContent || undefined,\n        sourceApp: notification.sourceApp || undefined\n      });\n\n      console.log(`[SingleConversion] Found ${taskAnalyses.length} tasks from email analysis`);\n\n      // Create multiple tasks if multiple deadlines detected\n      const createdTasks = [];\n      for (const [index, aiAnalysis] of taskAnalyses.entries()) {\n        // Force urgent priority for tasks from priority person emails\n        const finalPriority = notification.metadata?.isPriorityPerson ? \"urgent\" : aiAnalysis.priority;\n\n        const taskData: InsertTask = {\n          userId: notification.userId,\n          title: aiAnalysis.title,\n          description: fullContent || aiAnalysis.description, // Use full content as description\n          priority: finalPriority as any,\n          status: \"pending\" as any,\n          estimatedMinutes: aiAnalysis.estimatedMinutes,\n          dueAt: aiAnalysis.dueAt,\n          sourceApp: notification.sourceApp as any,\n          metadata: {\n            sourceNotificationId: notification.id,\n            aiGenerated: true,\n            originalContent: fullContent,\n            emailSubject: notification.metadata?.emailSubject,\n            emailFrom: notification.metadata?.emailFrom,\n            emailDate: notification.metadata?.emailDate,\n            multiTask: taskAnalyses.length > 1,\n            taskIndex: index + 1,\n            totalTasks: taskAnalyses.length,\n            isPriorityPerson: notification.metadata?.isPriorityPerson || false\n          }\n        };\n\n        const task = await storage.createAiTaskWithLimit(taskData);\n        if (!task) {\n          // stop further creations and return 429 with partial results\n          return res.status(429).json({\n            message: \"AI task limit exceeded\",\n            error: \"PLAN_LIMIT_EXCEEDED\",\n            createdTasks,\n            upgradeRequired: true,\n          });\n        }\n        createdTasks.push(task);\n\n        // Schedule reminders for each task\n        await taskNotificationScheduler.scheduleTaskReminders(task);\n      }\n\n      // Create email conversion tracking record for Emails Converted page BEFORE dismissing\n      if (notification.sourceApp === \"gmail\") {\n        const taskTitles = createdTasks.map(t => t.title).join(\", \");\n        const taskDescription = createdTasks.length > 1\n          ? `Email split into ${createdTasks.length} tasks: ${taskTitles}`\n          : `Email converted to task: ${createdTasks[0].title}`;\n\n        await storage.createNotification({\n          userId: notification.userId,\n          title: `Email converted: ${notification.title}`,\n          description: taskDescription,\n          type: \"email_converted\",\n          sourceApp: \"system\",\n          aiSummary: `Email from ${notification.metadata?.emailFrom || 'unknown sender'} converted to ${createdTasks.length} task(s)`,\n          actionableInsights: [\"View in tasks\", \"Edit task\", \"Mark complete\"],\n          metadata: {\n            sourceNotificationId: notification.id,\n            taskIds: createdTasks.map(t => t.id),\n            convertedAt: new Date().toISOString(),\n            from: notification.metadata?.emailFrom,\n            subject: notification.title,\n            originalEmailId: notification.metadata?.emailId,\n            originalContent: fullContent,\n            tasksCount: createdTasks.length,\n            taskTitles: taskTitles\n          }\n        });\n      }\n\n      // Dismiss the original notification since it's been converted to task\n      await storage.dismissNotification(notificationId);\n\n      res.json({\n        success: true,\n        tasks: createdTasks,\n        tasksCount: createdTasks.length,\n        multiTask: createdTasks.length > 1\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to convert notification to task\" });\n    }\n  });\n\n  // Batch convert multiple notifications to tasks\n  app.post(\"/api/notifications/batch-convert-to-tasks\", async (req, res) => {\n    try {\n      const { userId, notifications } = req.body;\n\n      if (!notifications || !Array.isArray(notifications)) {\n        return res.status(400).json({ message: \"Invalid notifications array\" });\n      }\n\n      // Check AI task limits before proceeding with batch conversion\n      const limitCheck = await storage.checkAiTaskLimit(userId);\n      if (!limitCheck.withinLimit) {\n        return res.status(429).json({\n          message: \"AI task limit exceeded\",\n          error: \"PLAN_LIMIT_EXCEEDED\",\n          currentCount: limitCheck.currentCount,\n          limit: limitCheck.limit,\n          planType: limitCheck.planType,\n          upgradeRequired: true\n        });\n      }\n\n      console.log(`[BatchProcessing] Converting ${notifications.length} notifications to tasks for user ${userId}`);\n\n      const createdTasks = [];\n      const errors = [];\n\n      // Process notifications in parallel batches of 5 to avoid overwhelming AI\n      const batchSize = 5;\n      for (let i = 0; i < notifications.length; i += batchSize) {\n        const batch = notifications.slice(i, i + batchSize);\n\n        const batchPromises = batch.map(async (notificationData: any) => {\n          try {\n            const notification = await storage.getNotificationById(notificationData.id);\n            if (!notification) {\n              errors.push({ id: notificationData.id, error: \"Notification not found\" });\n              return null;\n            }\n\n            // Use full email content from notification metadata if available\n            const fullContent = notification.metadata?.fullEmailContent || notification.description;\n\n            // Use AI analysis for batch processing\n            const aiAnalysis = await analyzeNotificationForTask({\n              title: notification.title,\n              description: fullContent || undefined,\n              sourceApp: notification.sourceApp || undefined\n            });\n\n            // Force urgent priority for tasks from priority person emails\n            const finalPriority = notification.metadata?.isPriorityPerson ? \"urgent\" : aiAnalysis.priority;\n\n            // Create task from AI analysis, preserving full email content\n            const taskData: InsertTask = {\n              userId: notification.userId,\n              title: aiAnalysis.title,\n              description: fullContent || aiAnalysis.description, // Use full content as description\n              priority: finalPriority as any,\n              status: \"pending\" as any,\n              estimatedMinutes: aiAnalysis.estimatedMinutes,\n              dueAt: aiAnalysis.dueAt,\n              sourceApp: notification.sourceApp as any,\n              metadata: {\n                sourceNotificationId: notification.id,\n                aiGenerated: true,\n                batchProcessed: true,\n                originalContent: fullContent,\n                emailSubject: notification.metadata?.emailSubject,\n                emailFrom: notification.metadata?.emailFrom,\n                emailDate: notification.metadata?.emailDate,\n                isPriorityPerson: notification.metadata?.isPriorityPerson || false,\n                ...notificationData.metadata\n              }\n            };\n\n            // Use transactional function to reserve capacity and create task atomically\n            const task = await storage.createAiTaskWithLimit(taskData);\n            if (!task) {\n              errors.push({ id: notificationData.id, error: \"AI task limit exceeded\" });\n              return null;\n            }\n\n            // Schedule reminders for batch-converted task\n            await taskNotificationScheduler.scheduleTaskReminders(task);\n\n            // Create email conversion tracking record for batch-converted emails BEFORE dismissing\n            if (notification.sourceApp === \"gmail\") {\n              await storage.createNotification({\n                userId: notification.userId,\n                title: `Email converted: ${notification.title}`,\n                description: `Batch converted email to task: ${aiAnalysis.title}`,\n                type: \"email_converted\",\n                sourceApp: \"system\",\n                aiSummary: `Email from ${notification.metadata?.emailFrom || 'unknown sender'} batch converted to task`,\n                actionableInsights: [\"View in tasks\", \"Edit task\", \"Mark complete\"],\n                metadata: {\n                  sourceNotificationId: notification.id,\n                  taskId: task.id,\n                  convertedAt: new Date().toISOString(),\n                  from: notification.metadata?.emailFrom,\n                  subject: notification.title,\n                  originalEmailId: notification.metadata?.emailId,\n                  batchProcessed: true,\n                  originalContent: fullContent,\n                  taskTitle: aiAnalysis.title,\n                  taskDescription: aiAnalysis.description\n                }\n              });\n            }\n\n            // Dismiss the original notification since it's been converted to task\n            await storage.dismissNotification(notification.id);\n\n            return task;\n          } catch (error) {\n            console.error(`Error processing notification ${notificationData.id}:`, error);\n            errors.push({ id: notificationData.id, error: error.message });\n            return null;\n          }\n        });\n\n        const batchResults = await Promise.all(batchPromises);\n        createdTasks.push(...batchResults.filter(task => task !== null));\n      }\n\n      console.log(`[BatchProcessing] Successfully converted ${createdTasks.length}/${notifications.length} notifications to tasks`);\n\n      res.json({\n        success: true,\n        tasksCreated: createdTasks.length,\n        totalNotifications: notifications.length,\n        tasks: createdTasks,\n        errors: errors.length > 0 ? errors : undefined\n      });\n    } catch (error) {\n      console.error(\"Batch conversion error:\", error);\n      res.status(500).json({ message: \"Failed to batch convert notifications to tasks\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications\", async (req, res) => {\n    try {\n      const userId = req.user?.id || (req.query.userId as string) || \"demo-user\";\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const type = req.query.type as string;\n\n      let notifications = await storage.getUserNotifications(userId, limit);\n\n      // Filter by type if provided (e.g., type=email_converted)\n      if (type) {\n        notifications = notifications.filter(n => n.type === type);\n      }\n\n      res.json(notifications);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post(\"/api/notifications\", async (req, res) => {\n    try {\n      const notificationData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(notificationData);\n      res.json(notification);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create notification\" });\n    }\n  });\n\n  app.post(\"/api/notifications/analyze\", async (req, res) => {\n    try {\n      const { title, content, sourceApp, userId } = req.body;\n\n      if (!title || !content || !sourceApp || !userId) {\n        return res.status(400).json({\n          message: \"title, content, sourceApp, and userId are required\"\n        });\n      }\n\n      const analysis = await analyzeNotification(title, content, sourceApp);\n\n      // Create notification with AI analysis\n      const notification = await storage.createNotification({\n        userId,\n        title,\n        description: content,\n        type: analysis.priority,\n        sourceApp: sourceApp as any,\n        aiSummary: analysis.summary,\n        actionableInsights: analysis.actionableInsights,\n      });\n\n      res.json({ notification, analysis });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to analyze notification\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    try {\n      await storage.markNotificationRead(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/dismiss\", async (req, res) => {\n    try {\n      await storage.dismissNotification(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to dismiss notification\" });\n    }\n  });\n\n  // Bulk delete notifications for Emails Converted page\n  app.post('/api/notifications/bulk-delete', async (req, res) => {\n    try {\n      const { ids } = req.body;\n      if (!Array.isArray(ids)) {\n        return res.status(400).json({ error: 'Invalid request format' });\n      }\n\n      for (const id of ids) {\n        await storage.dismissNotification(id);\n      }\n\n      res.json({ success: true, deletedCount: ids.length });\n    } catch (error) {\n      console.error('Error bulk deleting notifications:', error);\n      res.status(500).json({ error: 'Failed to delete notifications' });\n    }\n  });\n\n  // Retrieve emails back to notification section\n  app.post('/api/notifications/retrieve-emails', async (req, res) => {\n    try {\n      const { ids } = req.body;\n      if (!Array.isArray(ids)) {\n        return res.status(400).json({ error: 'Invalid request format' });\n      }\n\n      const retrievedEmails = [];\n\n      for (const id of ids) {\n        // Get the converted email notification\n        const convertedEmail = await storage.getNotificationById(id);\n        if (!convertedEmail) continue;\n\n        // Create a new notification in the notification feed with original email data\n        const originalNotification = await storage.createNotification({\n          userId: convertedEmail.userId,\n          title: convertedEmail.metadata?.subject || convertedEmail.title,\n          description: convertedEmail.metadata?.originalContent || convertedEmail.description,\n          type: \"urgent\",\n          sourceApp: \"gmail\",\n          aiSummary: `Retrieved email from: ${convertedEmail.metadata?.from || 'unknown sender'}`,\n          actionableInsights: [\"Convert to task\", \"Mark as read\"],\n          metadata: {\n            emailId: convertedEmail.metadata?.originalEmailId || `retrieved-${Date.now()}`,\n            from: convertedEmail.metadata?.from,\n            subject: convertedEmail.metadata?.subject || convertedEmail.title,\n            retrievedFromConverted: true,\n            retrievedAt: new Date().toISOString()\n          }\n        });\n\n        // Dismiss the converted email record\n        await storage.dismissNotification(id);\n\n        retrievedEmails.push(originalNotification);\n      }\n\n      res.json({ success: true, retrievedCount: retrievedEmails.length, emails: retrievedEmails });\n    } catch (error) {\n      console.error('Error retrieving emails:', error);\n      res.status(500).json({ error: 'Failed to retrieve emails' });\n    }\n  });\n\n  // Connected Apps routes\n  app.get(\"/api/connected-apps\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const apps = await storage.getUserConnectedApps(userId);\n      res.json(apps);\n    } catch (error) {\n      // Error fetching connected apps\n      res.status(500).json({ message: \"Failed to fetch connected apps\" });\n    }\n  });\n\n  // User Usage Analytics endpoint for plan limits\n  app.get(\"/api/usage\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string || \"demo-user\";\n      const limitCheck = await storage.checkAiTaskLimit(userId);\n\n      res.json({\n        currentCount: limitCheck.currentCount,\n        limit: limitCheck.limit,\n        planType: limitCheck.planType,\n        withinLimit: limitCheck.withinLimit,\n        remainingTasks: Math.max(0, limitCheck.limit - limitCheck.currentCount),\n        usagePercentage: Math.round((limitCheck.currentCount / limitCheck.limit) * 100)\n      });\n    } catch (error) {\n      console.error(\"Error fetching user usage:\", error);\n      res.status(500).json({ message: \"Failed to fetch usage data\" });\n    }\n  });\n\n  // Time Saved Analytics endpoint\n  app.get(\"/api/analytics/time-saved\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string || \"demo-user\";\n\n      // Get all tasks and notifications for analytics\n      const tasks = await storage.getUserTasks(userId);\n      const notifications = await storage.getUserNotifications(userId);\n\n      // Calculate statistics\n      const emailConversions = notifications.filter(n =>\n        n.sourceApp === \"gmail\" && n.metadata?.convertedFromEmail\n      ).length;\n\n      const naturalLanguageTasks = tasks.filter(t =>\n        t.metadata?.aiGenerated || t.sourceApp === \"manual\"\n      ).length;\n\n      const urgentTasksHandled = tasks.filter(t => t.priority === \"urgent\").length;\n      const completedTasks = tasks.filter(t => t.status === \"completed\").length;\n\n      // Calculate estimated time saved (conservative estimates)\n      const emailTimeSaved = emailConversions * 5; // 5 minutes per email conversion\n      const nlTimeSaved = naturalLanguageTasks * 3; // 3 minutes per NL task\n      const priorityTimeSaved = urgentTasksHandled * 10; // 10 minutes per urgent task handled\n\n      const totalTimeSavedMinutes = emailTimeSaved + nlTimeSaved + priorityTimeSaved;\n\n      const stats = {\n        totalEmailsConverted: emailConversions,\n        totalTasksCreatedFromNaturalLanguage: naturalLanguageTasks,\n        totalTimeSavedMinutes,\n        conversionBreakdown: {\n          emailConversions,\n          naturalLanguageConversions: naturalLanguageTasks,\n          urgentTasksHandled,\n          completedTasks\n        }\n      };\n\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error calculating time saved stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch time saved analytics\" });\n    }\n  });\n\n  // User Metrics routes\n  app.get(\"/api/metrics\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const date = req.query.date ? new Date(req.query.date as string) : undefined;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const metrics = await storage.getUserMetrics(userId, date);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch metrics\" });\n    }\n  });\n\n  app.post(\"/api/metrics\", async (req, res) => {\n    try {\n      const metricsData = insertUserMetricsSchema.parse(req.body);\n      const metrics = await storage.createUserMetrics(metricsData);\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create metrics\" });\n    }\n  });\n\n  // AI Insights routes\n  app.get(\"/api/ai-insights\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const insights = await storage.getUserAiInsights(userId, limit);\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch AI insights\" });\n    }\n  });\n\n  app.post(\"/api/workflow/optimize\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      // Get user's pending tasks\n      const tasks = await storage.getTasksByStatus(userId, \"pending\");\n\n      const taskData = tasks.map(task => ({\n        id: task.id,\n        title: task.title,\n        description: task.description || \"\",\n        priority: task.priority || \"normal\",\n        estimatedMinutes: task.estimatedMinutes || 30,\n        dueAt: task.dueAt?.toISOString(),\n      }));\n\n      const optimization = await optimizeWorkflow(taskData, new Date());\n\n      // Apply the optimized priorities to the tasks\n      for (const optimizedTask of optimization.optimizedTasks) {\n        await storage.updateTask(optimizedTask.taskId, {\n          priority: optimizedTask.newPriority as any,\n        });\n      }\n\n      // Create AI insights about the optimization\n      await storage.createAiInsight({\n        userId,\n        type: \"workflow_optimization\",\n        title: \"Workflow Optimized\",\n        description: `AI has intelligently reorganized ${optimization.optimizedTasks.length} tasks. ${optimization.insights.join(' ')} Estimated time saving: ${optimization.estimatedTimeSaving} minutes.`,\n        priority: \"high\" as any,\n        metadata: {\n          optimizedTasks: optimization.optimizedTasks,\n          insights: optimization.insights,\n          timeSaving: optimization.estimatedTimeSaving\n        },\n      });\n\n      res.json({\n        success: true,\n        message: `Successfully optimized ${optimization.optimizedTasks.length} tasks`,\n        ...optimization\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to optimize workflow\" });\n    }\n  });\n\n  // Auto-reschedule tasks based on completion patterns and system time\n  app.post(\"/api/workflow/auto-reschedule\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const reschedulingResult = await smartScheduler.rescheduleUserTasks(userId);\n\n      // Create AI insights about the rescheduling\n      if (reschedulingResult.rescheduledTasks.length > 0) {\n        await storage.createAiInsight({\n          userId,\n          type: \"smart_rescheduling\",\n          title: \"Smart Task Rescheduling Applied\",\n          description: `Auto-rescheduled ${reschedulingResult.rescheduledTasks.length} tasks based on your work patterns and current system time. ${reschedulingResult.insights.join(' ')}`,\n          priority: \"normal\" as any,\n          metadata: {\n            rescheduledTasks: reschedulingResult.rescheduledTasks,\n            timeSaved: reschedulingResult.totalTimeSaved\n          },\n        });\n      }\n\n      res.json({\n        success: true,\n        message: reschedulingResult.rescheduledTasks.length > 0\n          ? `Successfully rescheduled ${reschedulingResult.rescheduledTasks.length} tasks`\n          : \"No tasks needed rescheduling\",\n        ...reschedulingResult\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to auto-reschedule tasks\" });\n    }\n  });\n\n  app.post(\"/api/wellness/insights\", async (req, res) => {\n    try {\n      const { userId } = req.body;\n\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const metrics = await storage.getUserMetrics(userId);\n\n      if (!metrics) {\n        return res.status(404).json({ message: \"User metrics not found\" });\n      }\n\n      const insights = await generateWellnessInsights({\n        focusScore: metrics.focusScore || 0,\n        workloadCapacity: metrics.workloadCapacity || 0,\n        stressLevel: metrics.stressLevel || \"low\",\n        activeHours: metrics.activeHours || 0,\n        tasksCompleted: metrics.tasksCompleted || 0,\n      });\n\n      // Update metrics with new break recommendation\n      await storage.updateUserMetrics(metrics.id, {\n        nextBreakIn: insights.nextBreakRecommendation,\n      });\n\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate wellness insights\" });\n    }\n  });\n\n  app.post(\"/api/ai-insights/:id/apply\", async (req, res) => {\n    try {\n      await storage.applyAiInsight(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to apply AI insight\" });\n    }\n  });\n\n  app.post(\"/api/ai-insights/:id/dismiss\", async (req, res) => {\n    try {\n      await storage.dismissAiInsight(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to dismiss AI insight\" });\n    }\n  });\n\n  \n\n  // Priority Emails routes\n  app.get(\"/api/priority-emails\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const priorityEmails = await storage.getUserPriorityEmails(userId);\n      res.json(priorityEmails);\n    } catch (error) {\n      console.error(\"Error fetching priority emails:\", error);\n      res.status(500).json({ message: \"Failed to fetch priority emails\" });\n    }\n  });\n\n  app.post(\"/api/priority-emails\", async (req, res) => {\n    try {\n      const { userId, email } = req.body;\n\n      if (!userId || !email) {\n        return res.status(400).json({ message: \"userId and email are required\" });\n      }\n\n      // Basic email validation\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(email)) {\n        return res.status(400).json({ message: \"Invalid email format\" });\n      }\n\n      const priorityEmail = await storage.createPriorityEmail({\n        userId,\n        email: email.toLowerCase().trim()\n      });\n\n      res.json(priorityEmail);\n    } catch (error) {\n      console.error(\"Error creating priority email:\", error);\n      if (error.code === '23505') { // Unique constraint violation\n        return res.status(409).json({ message: \"This email is already in your priority list\" });\n      }\n      res.status(500).json({ message: \"Failed to create priority email\" });\n    }\n  });\n\n  app.delete(\"/api/priority-emails/:id\", async (req, res) => {\n    try {\n      await storage.deletePriorityEmail(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting priority email:\", error);\n      res.status(500).json({ message: \"Failed to delete priority email\" });\n    }\n  });\n\n  // Feedback route\n  app.post(\"/api/feedback/submit\", async (req, res) => {\n    try {\n      const { userId, feedback, timestamp } = req.body;\n\n      if (!feedback || feedback.trim().length < 10) {\n        return res.status(400).json({ message: \"Feedback must be at least 10 characters long\" });\n      }\n\n      // Get real connected email if available, fallback to demo email\n      const userEmail = userEmails.get(userId) || 'demo@flowhub.com';\n\n      // Send feedback email using Nodemailer\n      const emailContent = `\n        New Feedback from FlowHub User\n\n        User ID: ${userId}\n        User Email: ${userEmail}\n        Timestamp: ${timestamp}\n\n        Feedback:\n        ${feedback}\n\n        ---\n        This feedback was submitted through the FlowHub feedback system.\n      `;\n\n      // Configure email transporter (using Gmail SMTP)\n      const transporter = nodemailer.createTransport({\n        service: 'gmail',\n        auth: {\n          user: 'chavanuday407@gmail.com',\n          pass: process.env.GMAIL_APP_PASSWORD\n        }\n      });\n\n      // Check if Gmail app password is configured\n      if (!process.env.GMAIL_APP_PASSWORD) {\n        throw new Error('GMAIL_APP_PASSWORD environment variable is not set');\n      }\n\n      // Send feedback email\n      const mailOptions = {\n        from: 'noreply@flowhub.com',\n        to: 'chavanuday407@gmail.com',\n        subject: 'New FlowHub Feedback',\n        html: `\n          <h2>New Feedback from FlowHub User</h2>\n          <p><strong>User ID:</strong> ${userId}</p>\n          <p><strong>User Email:</strong> ${userEmail}</p>\n          <p><strong>Timestamp:</strong> ${timestamp}</p>\n          <br>\n          <h3>Feedback:</h3>\n          <div style=\"background-color: #f5f5f5; padding: 15px; border-left: 4px solid #007bff; margin: 10px 0;\">\n            ${feedback.replace(/\\n/g, '<br>')}\n          </div>\n          <br>\n          <p><em>This feedback was submitted through the FlowHub feedback system.</em></p>\n        `,\n        text: emailContent\n      };\n\n      await transporter.sendMail(mailOptions);\n      console.log('Feedback email sent successfully to chavanuday407@gmail.com');\n\n      res.json({ success: true, message: 'Feedback sent successfully' });\n    } catch (error) {\n      console.error('Failed to send feedback email:', error);\n      res.status(500).json({ error: 'Failed to send feedback' });\n    }\n  });\n\n  // User App Links routes\n  app.get(\"/api/user-app-links\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      let links = await storage.getUserAppLinks(userId);\n\n      // If no links exist for demo-user, create default ones\n      if (userId === \"demo-user\" && links.length === 0) {\n        const defaultAppLinks = [\n          { userId: \"demo-user\", name: 'GitHub', url: 'https://github.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/github.svg' },\n          { userId: \"demo-user\", name: 'Zoom', url: 'https://zoom.us', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/zoom.svg' },\n          { userId: \"demo-user\", name: 'Google', url: 'https://google.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/google.svg' },\n          { userId: \"demo-user\", name: 'Slack', url: 'https://slack.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/slack.svg' },\n          { userId: \"demo-user\", name: 'Jira', url: 'https://atlassian.com/software/jira', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/jira.svg' },\n          { userId: \"demo-user\", name: 'Trello', url: 'https://trello.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/trello.svg' },\n          { userId: \"demo-user\", name: 'LinkedIn', url: 'https://linkedin.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/linkedin.svg' },\n        ];\n\n        // Create all default app links\n        for (const linkData of defaultAppLinks) {\n          await storage.createUserAppLink(linkData);\n        }\n\n        // Fetch the newly created links\n        links = await storage.getUserAppLinks(userId);\n      }\n\n      res.json(links);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user app links\" });\n    }\n  });\n\n  app.post(\"/api/user-app-links\", async (req, res) => {\n    try {\n      const linkData = insertUserAppLinkSchema.parse(req.body);\n      const link = await storage.createUserAppLink(linkData);\n      res.json(link);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create user app link\" });\n    }\n  });\n\n  app.delete(\"/api/user-app-links/:id\", async (req, res) => {\n    try {\n      await storage.deleteUserAppLink(req.params.id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete user app link\" });\n    }\n  });\n\n  // Gmail OAuth configuration\n  const oauth2Client = new OAuth2Client(\n    process.env.GOOGLE_CLIENT_ID || \"218067632703-he0j6m3595542fekbiue0g8hd1bci6m.apps.googleusercontent.com\",\n    process.env.GOOGLE_CLIENT_SECRET || \"GOCSPX-IWTHxLW7qMj6kdlqmbTn6KeC8\",\n    GOOGLE_REDIRECT_URI\n  );\n\n  // Store user OAuth clients and intervals\n  const userGmailClients = new Map();\n  const userGmailIntervals = new Map();\n\n  // Gmail Integration routes\n  app.post(\"/api/gmail/connect\", async (req, res) => {\n    try {\n      const userId = \"demo-user\"; // Use consistent demo user ID\n\n      // Generate OAuth URL for real Gmail API\n      const scopes = [\n        'https://www.googleapis.com/auth/gmail.readonly',\n        'https://www.googleapis.com/auth/userinfo.email'\n      ];\n\n      const authUrl = oauth2Client.generateAuthUrl({\n        access_type: 'offline',\n        scope: scopes,\n        state: userId, // Pass userId in state parameter\n        prompt: 'consent'\n      });\n\n      res.json({ authUrl });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to start Gmail connection\" });\n    }\n  });\n\n  // Real Gmail OAuth callback\n  app.get(\"/auth/gmail/callback\", async (req, res) => {\n    try {\n      const { code, state, error } = req.query;\n\n      if (error) {\n        res.send(`\n          <script>\n            window.opener.postMessage({ success: false, error: '${error}' }, '*');\n            window.close();\n          </script>\n        `);\n        return;\n      }\n\n      if (!code || !state) {\n        res.send(`\n          <script>\n            window.opener.postMessage({ success: false, error: 'Missing authorization code or state' }, '*');\n            window.close();\n          </script>\n        `);\n        return;\n      }\n\n      const userId = state as string;\n\n      // Create a COMPLETELY FRESH OAuth2Client using google.auth.OAuth2 (not separately imported OAuth2Client)\n      const oauth2Client = new google.auth.OAuth2(\n        process.env.GOOGLE_CLIENT_ID,\n        process.env.GOOGLE_CLIENT_SECRET,\n        GOOGLE_REDIRECT_URI\n      );\n\n      // Exchange code for tokens\n      const { tokens } = await oauth2Client.getToken(code as string);\n\n      // Set credentials on the client\n      oauth2Client.setCredentials(tokens);\n\n      // Get the user's email from Google Profile using the authenticated client\n      const oauth2 = google.oauth2({ version: 'v2', auth: oauth2Client });\n      const { data: profile } = await oauth2.userinfo.get();\n\n      // Create user client for long-term storage with the same tokens\n      const userClient = new OAuth2Client(\n        process.env.GOOGLE_CLIENT_ID,\n        process.env.GOOGLE_CLIENT_SECRET,\n        GOOGLE_REDIRECT_URI\n      );\n      userClient.setCredentials(tokens);\n      const userEmail = profile.email || 'unknown@user.com';\n      const demoUserId = \"demo-user\"; // Use consistent demo user ID to match frontend\n\n      userGmailClients.set(demoUserId, userClient);\n      userEmails.set(demoUserId, userEmail); // Store the real connected email\n\n      // Extract a proper name from the email\n      const extractNameFromEmail = (email: string) => {\n        const username = email.split('@')[0];\n        // Convert dots and underscores to spaces and capitalize each word\n        return username\n          .replace(/[._]/g, ' ')\n          .split(' ')\n          .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n          .join(' ');\n      };\n\n      // Create or get the demo user and set authentication cookies\n      let demoUser = await storage.getUser(demoUserId);\n      const extractedName = profile.name || extractNameFromEmail(userEmail);\n\n      if (!demoUser) {\n        demoUser = await storage.createUser({\n          id: demoUserId,\n          name: extractedName,\n          email: userEmail,\n          role: 'user'\n        });\n      } else {\n        // Always update user info on each login to keep it fresh\n        demoUser = await storage.updateUser(demoUserId, {\n          email: userEmail,\n          name: extractedName\n        });\n      }\n\n      // Generate authentication tokens for the demo user\n      const { accessToken, refreshToken } = generateTokens({\n        id: demoUser.id,\n        email: demoUser.email,\n        name: demoUser.name\n      });\n\n      // Set HTTP-only cookies for authentication\n      setAuthCookies(res, accessToken, refreshToken);\n\n      console.log(`[Gmail] Starting email fetching for user: ${demoUserId}, email: ${userEmail}`);\n      // Start fetching emails directly with demo user info\n      startRealGmailFetching(demoUserId, userClient, userEmail);\n\n      res.send(`\n        <script>\n          // Set a flag to indicate successful authentication\n          localStorage.setItem('gmailConnected', 'true');\n          localStorage.setItem('userEmail', '${userEmail}');\n\n          // Notify the parent window and redirect to dashboard\n          window.opener.postMessage({\n            success: true,\n            email: '${userEmail}',\n            message: 'Gmail connected successfully!',\n            authenticated: true,\n            redirect: '/dashboard'\n          }, '*');\n\n          // Close popup and redirect parent to dashboard\n          setTimeout(() => {\n            window.opener.location.href = '/dashboard';\n            window.close();\n          }, 1000);\n        </script>\n      `);\n    } catch (error) {\n      // Error in Gmail OAuth callback\n      res.send(`\n        <script>\n          window.opener.postMessage({ success: false, error: 'OAuth callback failed' }, '*');\n          window.close();\n        </script>\n      `);\n    }\n  });\n\n  // Disconnect Gmail\n  app.post(\"/api/gmail/disconnect\", async (req, res) => {\n    try {\n      // Disconnect all Gmail connections for simplicity in demo\n      const userIds = Array.from(userGmailClients.keys());\n\n      userIds.forEach(userId => {\n        userGmailClients.delete(userId);\n        if (userGmailIntervals.has(userId)) {\n          clearInterval(userGmailIntervals.get(userId));\n          userGmailIntervals.delete(userId);\n        }\n      });\n\n      res.json({ success: true, message: \"Gmail disconnected successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to disconnect Gmail\" });\n    }\n  });\n\n  // Function to start real Gmail email fetching\n  async function startRealGmailFetching(userId: string, authClient: OAuth2Client, userEmail: string) {\n\n    let lastCheckTime = new Date();\n\n    // Function to fetch and process unread emails\n    const fetchUnreadEmails = async () => {\n      try {\n        console.log(`[Gmail] Fetching emails for user ${userId} (${userEmail})`);\n        console.log(`[Gmail] Last check time: ${lastCheckTime.toISOString()}`);\n        // Create a COMPLETELY FRESH OAuth2Client for each request to ensure proper auth headers\n        const freshOAuth2Client = new google.auth.OAuth2(\n          process.env.GOOGLE_CLIENT_ID,\n          process.env.GOOGLE_CLIENT_SECRET,\n          GOOGLE_REDIRECT_URI\n        );\n\n        // Get current credentials from stored client\n        const currentAuthClient = userGmailClients.get(userId) || authClient;\n        const credentials = currentAuthClient.credentials;\n\n        // Ensure we have valid credentials\n        if (!credentials.access_token) {\n          return;\n        }\n\n        // Set fresh credentials on the new client\n        freshOAuth2Client.setCredentials({\n          access_token: credentials.access_token,\n          refresh_token: credentials.refresh_token,\n          expiry_date: credentials.expiry_date,\n          token_type: 'Bearer',\n          scope: 'https://www.googleapis.com/auth/gmail.readonly'\n        });\n\n        // Create Gmail API instance with fresh authenticated client\n        const gmail = google.gmail({ version: 'v1', auth: freshOAuth2Client });\n\n        // Get ALL unread messages from primary inbox since last check (don't filter by priority)\n        const query = `is:unread category:primary after:${Math.floor(lastCheckTime.getTime() / 1000)}`;\n\n        const response = await gmail.users.messages.list({\n          userId: 'me',\n          q: query,\n          maxResults: 20  // Increased to handle more emails\n        });\n\n        const messages = response.data.messages || [];\n        console.log(`[Gmail] Found ${messages.length} unread messages`);\n\n        for (const message of messages) {\n          try {\n            // Deduplicate based on message ID - check and add atomically\n            if (processedEmailIds.has(message.id)) {\n              console.log(`[Gmail] Skipping already processed email: ${message.id}`);\n              continue;\n            }\n\n            // Add to processed set immediately to prevent race conditions\n            processedEmailIds.add(message.id!);\n\n            // Check if notification already exists with this email ID to prevent database duplicates\n            const existingNotifications = await storage.getUserNotifications(userId, 100);\n            const emailAlreadyExists = existingNotifications.some(notification =>\n              notification.metadata?.emailId === message.id\n            );\n\n            if (emailAlreadyExists) {\n              console.log(`[Gmail] Email notification already exists in database: ${message.id}`);\n              continue;\n            }\n\n            // Get full message details\n            const messageData = await gmail.users.messages.get({\n              userId: 'me',\n              id: message.id!,\n              format: 'full'\n            });\n\n            const msg = messageData.data;\n            const headers = msg.payload?.headers || [];\n\n            // Extract email details\n            const subject = headers.find(h => h.name === 'Subject')?.value || 'No Subject';\n            const from = headers.find(h => h.name === 'From')?.value || 'Unknown Sender';\n            const date = headers.find(h => h.name === 'Date')?.value || '';\n\n            // Get email body (simplified - gets first text part)\n            let body = '';\n            if (msg.payload?.body?.data) {\n              body = Buffer.from(msg.payload.body.data, 'base64').toString();\n            } else if (msg.payload?.parts) {\n              const textPart = msg.payload.parts.find(part => part.mimeType === 'text/plain');\n              if (textPart?.body?.data) {\n                body = Buffer.from(textPart.body.data, 'base64').toString();\n              }\n            }\n\n            // Store both full and truncated body\n            const truncatedBody = body.length > 200 ? body.substring(0, 200) + '...' : body;\n            const fullEmailContent = `Subject: ${subject}\\n\\n${body}`;\n\n            // Extract email address consistently for priority checking\n            let fromEmail = from.toLowerCase().trim();\n\n            // Try to extract email from angle brackets first (e.g., \"Name <email@domain.com>\")\n            const emailMatch = from.match(/<([^>]+)>/);\n            if (emailMatch) {\n              fromEmail = emailMatch[1].toLowerCase().trim();\n            } else if (from.includes('@')) {\n              // If no angle brackets but contains @, extract the email part\n              const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n              const match = from.match(emailRegex);\n              if (match) {\n                fromEmail = match[1].toLowerCase().trim();\n              }\n            }\n\n            console.log(`[Gmail] Extracted email for priority check: \"${fromEmail}\" from \"${from}\"`);\n            const isPriorityContact = await storage.isPriorityEmail(userId, fromEmail);\n            console.log(`[Gmail] Priority check result: ${isPriorityContact} for email: ${fromEmail}`);\n\n            // Use AI to analyze and determine priority\n            let priority: \"urgent\" | \"important\" | \"informational\" = \"informational\";\n            let isPriorityPerson = false;\n\n            if (isPriorityContact) {\n              priority = \"urgent\";\n              isPriorityPerson = true;\n              console.log(`[Gmail] Priority person detected: ${fromEmail} - setting priority to urgent`);\n            } else {\n              console.log(`[Gmail] Normal email from: ${fromEmail} - will analyze with AI`);\n              try {\n                const taskAnalysis = await analyzeNotificationForTask({\n                  title: `New email from ${from}`,\n                  description: `${subject}: ${body}`,\n                  sourceApp: \"gmail\"\n                });\n                priority = taskAnalysis.priority as \"urgent\" | \"important\" | \"informational\";\n              } catch (error) {\n                console.log(`[Gmail] AI analysis failed for email from ${fromEmail}, using fallback logic`);\n                // Fallback to simple keyword matching if AI fails\n                const casualKeywords = ['hi', 'hello', 'hey', 'wassup', 'what\\'s up', 'how are you', 'how r u', 'good morning', 'good afternoon', 'good evening', 'hangout', 'chat', 'let\\'s play', 'game'];\n                const urgentKeywords = ['urgent', 'asap', 'emergency', 'critical', 'immediately', 'in 5 min', 'in 10 min', 'in 30 min'];\n                const importantKeywords = ['important', 'meeting', 'deadline', 'review', 'approval', 'join', 'schedule', 'conference', 'call', 'in 1 hour', 'in 2 hours', 'in 3 hours', 'today', 'tomorrow'];\n\n                const fullText = (subject + ' ' + body).toLowerCase();\n                if (casualKeywords.some(keyword => fullText.includes(keyword))) {\n                  priority = \"informational\";  // Use informational for casual messages (maps to normal in UI)\n                } else if (urgentKeywords.some(keyword => fullText.includes(keyword))) {\n                  priority = \"urgent\";\n                } else if (importantKeywords.some(keyword => fullText.includes(keyword))) {\n                  priority = \"important\";\n                }\n                console.log(`[Gmail] Fallback analysis result: ${priority} for email from ${fromEmail}`);\n              }\n            }\n\n            console.log(`[Gmail] Creating notification for email: ${subject} from ${from} (Priority: ${priority}, isPriorityPerson: ${isPriorityPerson})`);\n\n            // Create notification with full content in metadata - this should work for ALL emails\n            await storage.createNotification({\n              userId,\n              title: `New email from ${from}`,\n              description: `${subject}: ${truncatedBody}`,\n              type: priority,\n              sourceApp: \"gmail\",\n              aiSummary: `Email from ${from} with subject: ${subject}`,\n              metadata: {\n                fullEmailContent,\n                emailSubject: subject,\n                emailFrom: from,\n                emailDate: date,\n                emailId: message.id, // Store email ID for deduplication\n                isPriorityPerson: isPriorityPerson, // Mark if from priority contact\n                priorityReason: isPriorityPerson ? \"Priority Contact\" : \"Normal Email\",\n                fromEmail: fromEmail // Store extracted email for debugging\n              },\n              actionableInsights: [\"Reply to email\", \"Mark as read\", \"Archive email\"],\n            });\n\n            console.log(`[Gmail] Notification created successfully for ${fromEmail}`);\n\n          } catch (msgError) {\n            console.error(`[Gmail] Error processing message ${message.id}:`, msgError);\n          }\n        }\n\n        // Update lastCheckTime only if emails were processed to avoid missing emails between fetches\n        if (messages.length > 0) {\n          lastCheckTime = new Date();\n        }\n\n\n      } catch (error) {\n        // Error fetching Gmail\n\n        // If token is expired, try to refresh\n        if ((error as any)?.code === 401) {\n          try {\n            const refreshResponse = await authClient.refreshAccessToken();\n\n            // Set the full credentials including access_token and refresh_token\n            const newCredentials = {\n              access_token: refreshResponse.credentials.access_token,\n              refresh_token: refreshResponse.credentials.refresh_token,\n              expiry_date: refreshResponse.credentials.expiry_date,\n              token_type: 'Bearer',\n              scope: 'https://www.googleapis.com/auth/gmail.readonly'\n            };\n\n            authClient.setCredentials(newCredentials);\n\n            // Update the stored client with new credentials\n            userGmailClients.set(userId, authClient);\n\n            // Create a COMPLETELY FRESH Gmail API client with updated auth for retry\n            const retryFreshOAuth2Client = new google.auth.OAuth2(\n              process.env.GOOGLE_CLIENT_ID,\n              process.env.GOOGLE_CLIENT_SECRET,\n              GOOGLE_REDIRECT_URI\n            );\n\n            // Set the refreshed credentials on the new client\n            retryFreshOAuth2Client.setCredentials(newCredentials);\n\n            const refreshedGmail = google.gmail({ version: 'v1', auth: retryFreshOAuth2Client });\n\n            // Try fetching again immediately with the refreshed client\n            try {\n              // Get ALL unread messages consistently in retry\n              const retryQuery = `is:unread category:primary after:${Math.floor(lastCheckTime.getTime() / 1000)}`;\n              const retryResponse = await refreshedGmail.users.messages.list({\n                userId: 'me',\n                q: retryQuery,\n                maxResults: 20  // Increased to handle more emails\n              });\n\n              const retryMessages = retryResponse.data.messages || [];\n\n              // Process any messages found in the retry\n              for (const message of retryMessages) {\n                // Deduplicate based on message ID\n                if (processedEmailIds.has(message.id)) {\n                  console.log(`[Gmail] Skipping already processed email during retry: ${message.id}`);\n                  continue;\n                }\n\n                // Add to processed set immediately to prevent race conditions\n                processedEmailIds.add(message.id!);\n\n                try {\n                  // Check if notification already exists with this email ID\n                  const existingNotifications = await storage.getUserNotifications(userId, 100);\n                  const emailAlreadyExists = existingNotifications.some(notification =>\n                    notification.metadata?.emailId === message.id\n                  );\n\n                  if (emailAlreadyExists) {\n                    console.log(`[Gmail] Email notification already exists in database during retry: ${message.id}`);\n                    continue;\n                  }\n\n                  const messageData = await refreshedGmail.users.messages.get({\n                    userId: 'me',\n                    id: message.id!,\n                    format: 'full'\n                  });\n\n                  const msg = messageData.data;\n                  const headers = msg.payload?.headers || [];\n\n                  const subject = headers.find(h => h.name === 'Subject')?.value || 'No Subject';\n                  const from = headers.find(h => h.name === 'From')?.value || 'Unknown Sender';\n\n                  let body = '';\n                  if (msg.payload?.body?.data) {\n                    body = Buffer.from(msg.payload.body.data, 'base64').toString();\n                  } else if (msg.payload?.parts) {\n                    const textPart = msg.payload.parts.find(part => part.mimeType === 'text/plain');\n                    if (textPart?.body?.data) {\n                      body = Buffer.from(textPart.body.data, 'base64').toString();\n                    }\n                  }\n\n                  const truncatedBody = body.length > 200 ? body.substring(0, 200) + '...' : body;\n\n                  // Extract email address consistently for priority checking\n                  let fromEmail = from.toLowerCase().trim();\n\n                  // Try to extract email from angle brackets first (e.g., \"Name <email@domain.com>\")\n                  const emailMatch = from.match(/<([^>]+)>/);\n                  if (emailMatch) {\n                    fromEmail = emailMatch[1].toLowerCase().trim();\n                  } else if (from.includes('@')) {\n                    // If no angle brackets but contains @, extract the email part\n                    const emailRegex = /([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,})/;\n                    const match = from.match(emailRegex);\n                    if (match) {\n                      fromEmail = match[1].toLowerCase().trim();\n                    }\n                  }\n\n                  console.log(`[Gmail] Extracted email for priority check (retry): \"${fromEmail}\" from \"${from}\"`);\n                  const isPriorityContact = await storage.isPriorityEmail(userId, fromEmail);\n                  console.log(`[Gmail] Priority check result (retry): ${isPriorityContact} for email: ${fromEmail}`);\n\n                  let priority: \"urgent\" | \"important\" | \"informational\" = \"informational\";\n                  let isPriorityPerson = false;\n\n                  if (isPriorityContact) {\n                    priority = \"urgent\";\n                    isPriorityPerson = true;\n                    console.log(`[Gmail] Priority person detected in retry: ${fromEmail} - setting priority to urgent`);\n                  } else {\n                    console.log(`[Gmail] Normal email in retry from: ${fromEmail} - will analyze with AI`);\n                    try {\n                      const taskAnalysis = await analyzeNotificationForTask({\n                        title: `New email from ${from}`,\n                        description: `${subject}: ${body}`,\n                        sourceApp: \"gmail\"\n                      });\n                      priority = taskAnalysis.priority as \"urgent\" | \"important\" | \"informational\";\n                    } catch (error) {\n                      console.log(`[Gmail] AI analysis failed for email from ${fromEmail} during retry, using fallback logic`);\n                      // Fallback to simple keyword matching if AI fails\n                      const casualKeywords = ['hi', 'hello', 'hey', 'wassup', 'what\\'s up', 'how are you', 'how r u', 'good morning', 'good afternoon', 'good evening', 'hangout', 'chat', 'let\\'s play', 'game'];\n                      const urgentKeywords = ['urgent', 'asap', 'emergency', 'critical', 'immediately', 'in 5 min', 'in 10 min', 'in 30 min'];\n                      const importantKeywords = ['important', 'meeting', 'deadline', 'review', 'approval', 'join', 'schedule', 'conference', 'call', 'in 1 hour', 'in 2 hours', 'in 3 hours', 'today', 'tomorrow'];\n\n                      const fullText = (subject + ' ' + body).toLowerCase();\n                      if (casualKeywords.some(keyword => fullText.includes(keyword))) {\n                        priority = \"informational\";  // Use informational for casual messages (maps to normal in UI)\n                      } else if (urgentKeywords.some(keyword => fullText.includes(keyword))) {\n                        priority = \"urgent\";\n                      } else if (importantKeywords.some(keyword => fullText.includes(keyword))) {\n                        priority = \"important\";\n                      }\n                      console.log(`[Gmail] Fallback analysis result (retry): ${priority} for email from ${fromEmail}`);\n                    }\n                  }\n\n                  console.log(`[Gmail] Creating notification for email during retry: ${subject} from ${from} (Priority: ${priority}, isPriorityPerson: ${isPriorityPerson})`);\n\n                  await storage.createNotification({\n                    userId,\n                    title: `New email from ${from}`,\n                    description: `${subject}: ${truncatedBody}`,\n                    type: priority,\n                    sourceApp: \"gmail\",\n                    aiSummary: `Email from ${from} with subject: ${subject}`,\n                    metadata: {\n                      fullEmailContent: `Subject: ${subject}\\n\\n${body}`,\n                      emailSubject: subject,\n                      emailFrom: from,\n                      emailDate: date,\n                      emailId: message.id, // Store email ID for deduplication\n                      isPriorityPerson: isPriorityPerson, // Mark if from priority contact\n                      priorityReason: isPriorityPerson ? \"Priority Contact\" : \"Normal Email\",\n                      fromEmail: fromEmail // Store extracted email for debugging\n                    },\n                    actionableInsights: [\"Reply to email\", \"Mark as read\", \"Archive email\"],\n                  });\n\n                  console.log(`[Gmail] Notification created successfully during retry for ${fromEmail}`);\n\n                } catch (msgError) {\n                  console.error(`[Gmail] Error processing message ${message.id} during retry:`, msgError);\n                }\n              }\n\n              // Update lastCheckTime only if emails were processed in retry\n              if (retryMessages.length > 0) {\n                lastCheckTime = new Date();\n              }\n\n            } catch (retryError) {\n              // Error in retry fetch after token refresh\n            }\n\n          } catch (refreshError) {\n            // Failed to refresh token\n            // Create a notification about the connection issue\n            await storage.createNotification({\n              userId,\n              title: \"Gmail Connection Lost\",\n              description: \"Your Gmail connection has expired. Please reconnect to continue receiving email notifications.\",\n              type: \"important\",\n              sourceApp: \"gmail\",\n              aiSummary: \"Gmail OAuth token expired\",\n              actionableInsights: [\"Reconnect Gmail\", \"Check authentication\"],\n            });\n\n            // Stop fetching for this user\n            if (userGmailIntervals.has(userId)) {\n              clearInterval(userGmailIntervals.get(userId));\n              userGmailIntervals.delete(userId);\n            }\n            userGmailClients.delete(userId);\n          }\n        }\n      }\n    };\n\n    // Initial fetch\n    await fetchUnreadEmails();\n\n    // Set up periodic fetching every 10 seconds\n    const interval = setInterval(fetchUnreadEmails, 10000);\n    userGmailIntervals.set(userId, interval);\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":81155},"server/scheduler.ts":{"content":"import { storage } from \"./storage\";\nimport { Task } from \"../shared/schema\";\n\nexport interface ReschedulingResult {\n  rescheduledTasks: Array<{\n    taskId: string;\n    oldDueAt: Date | null;\n    newDueAt: Date;\n    reason: string;\n    timeDifference: number; // minutes\n  }>;\n  insights: string[];\n  totalTimeSaved: number;\n}\n\nexport class SmartTaskScheduler {\n  /**\n   * Calculate the user's historical accuracy ratio for time estimation\n   */\n  private async getUserTimeAccuracyRatio(userId: string): Promise<number> {\n    try {\n      const completedTasks = await storage.getTasksByStatus(userId, \"completed\");\n      \n      if (completedTasks.length === 0) return 1.0; // Default to 1:1 ratio\n      \n      let totalEstimated = 0;\n      let totalActual = 0;\n      let taskCount = 0;\n      \n      for (const task of completedTasks) {\n        if (task.estimatedMinutes && task.startedAt && task.completedAt) {\n          const actualMinutes = Math.ceil(\n            (new Date(task.completedAt).getTime() - new Date(task.startedAt).getTime()) / (1000 * 60)\n          );\n          \n          totalEstimated += task.estimatedMinutes;\n          totalActual += actualMinutes;\n          taskCount++;\n        }\n      }\n      \n      if (taskCount === 0) return 1.0;\n      \n      // Return the ratio of actual time to estimated time\n      // Values > 1 mean user takes longer than estimated\n      // Values < 1 mean user finishes faster than estimated\n      return totalActual / totalEstimated;\n    } catch (error) {\n      return 1.0;\n    }\n  }\n\n  /**\n   * Get the current system workload and suggest optimal scheduling gaps\n   */\n  private getOptimalSchedulingGaps(currentTime: Date, priority: string): number {\n    const hour = currentTime.getHours();\n    \n    // Define buffer times based on priority and time of day\n    const baseBuffers = {\n      urgent: 5,     // 5 minute buffer for urgent tasks\n      important: 15, // 15 minute buffer for important tasks  \n      normal: 30     // 30 minute buffer for normal tasks\n    };\n    \n    // Adjust based on time of day for optimal productivity\n    let timeMultiplier = 1.0;\n    \n    if (hour >= 9 && hour <= 11) timeMultiplier = 0.8;  // Peak morning hours\n    else if (hour >= 14 && hour <= 16) timeMultiplier = 0.9; // Good afternoon hours\n    else if (hour >= 17 || hour <= 8) timeMultiplier = 1.3;  // Evening/early morning\n    else timeMultiplier = 1.0; // Regular hours\n    \n    return Math.ceil((baseBuffers[priority as keyof typeof baseBuffers] || 15) * timeMultiplier);\n  }\n\n  /**\n   * Smart rescheduling algorithm that considers task completion patterns\n   */\n  async rescheduleUserTasks(userId: string, completedTaskId?: string): Promise<ReschedulingResult> {\n    try {\n      const currentTime = new Date();\n      const pendingTasks = await storage.getUserTasks(userId);\n      const activePendingTasks = pendingTasks.filter(t => t.status === \"pending\");\n      \n      if (activePendingTasks.length === 0) {\n        return {\n          rescheduledTasks: [],\n          insights: [\"No pending tasks to reschedule\"],\n          totalTimeSaved: 0\n        };\n      }\n\n      // Get user's historical time accuracy\n      const timeAccuracyRatio = await this.getUserTimeAccuracyRatio(userId);\n      \n      let rescheduledTasks: ReschedulingResult['rescheduledTasks'] = [];\n      let insights: string[] = [];\n      let cumulativeScheduleTime = new Date(currentTime);\n      \n      // Add context about the recently completed task if provided\n      if (completedTaskId) {\n        const completedTask = await storage.getTaskById(completedTaskId);\n        if (completedTask && completedTask.startedAt && completedTask.completedAt) {\n          const actualTime = Math.ceil(\n            (new Date(completedTask.completedAt).getTime() - new Date(completedTask.startedAt).getTime()) / (1000 * 60)\n          );\n          const estimatedTime = completedTask.estimatedMinutes || 30;\n          \n          if (actualTime > estimatedTime * 1.2) {\n            insights.push(`Recent task took ${actualTime - estimatedTime} minutes longer than expected`);\n          } else if (actualTime < estimatedTime * 0.8) {\n            insights.push(`Recent task completed ${estimatedTime - actualTime} minutes faster than expected`);\n          }\n        }\n      }\n      \n      // Sort tasks by priority and existing due dates\n      const priorityOrder = { urgent: 0, important: 1, normal: 2 };\n      activePendingTasks.sort((a, b) => {\n        const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder] ?? 2;\n        const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder] ?? 2;\n        \n        if (aPriority !== bPriority) return aPriority - bPriority;\n        \n        // Within same priority, sort by existing due date\n        if (a.dueAt && b.dueAt) {\n          return new Date(a.dueAt).getTime() - new Date(b.dueAt).getTime();\n        }\n        if (a.dueAt) return -1;\n        if (b.dueAt) return 1;\n        \n        return 0;\n      });\n\n      // Process each task for rescheduling\n      for (const task of activePendingTasks) {\n        const oldDueAt = task.dueAt ? new Date(task.dueAt) : null;\n        \n        // Calculate adjusted estimated time using historical accuracy\n        const baseEstimate = task.estimatedMinutes || 30;\n        const adjustedEstimate = Math.ceil(baseEstimate * timeAccuracyRatio);\n        \n        // Get optimal scheduling gap for this priority\n        const schedulingGap = this.getOptimalSchedulingGaps(cumulativeScheduleTime, task.priority || 'normal');\n        \n        // Add the gap time first\n        cumulativeScheduleTime = new Date(cumulativeScheduleTime.getTime() + schedulingGap * 60 * 1000);\n        \n        // Calculate new due time (schedule start + adjusted estimate)\n        const newDueAt = new Date(cumulativeScheduleTime.getTime() + adjustedEstimate * 60 * 1000);\n        \n        // Update the cumulative time for next task\n        cumulativeScheduleTime = new Date(newDueAt);\n        \n        // Determine if this is a meaningful reschedule\n        let shouldReschedule = false;\n        let reason = \"\";\n        let timeDifference = 0;\n        \n        if (!oldDueAt) {\n          shouldReschedule = true;\n          reason = `Scheduled based on current workload and ${Math.round(timeAccuracyRatio * 100)}% historical accuracy`;\n          timeDifference = Math.ceil((newDueAt.getTime() - currentTime.getTime()) / (1000 * 60));\n        } else {\n          timeDifference = Math.ceil((newDueAt.getTime() - oldDueAt.getTime()) / (1000 * 60));\n          \n          if (Math.abs(timeDifference) >= 10) { // Only reschedule if difference is 10+ minutes\n            shouldReschedule = true;\n            if (timeDifference > 0) {\n              reason = `Delayed by ${timeDifference} minutes due to workload optimization`;\n            } else {\n              reason = `Moved earlier by ${Math.abs(timeDifference)} minutes based on faster completion patterns`;\n            }\n          }\n        }\n        \n        if (shouldReschedule) {\n          // Update the task in the database\n          await storage.updateTask(task.id, {\n            dueAt: newDueAt,\n            estimatedMinutes: adjustedEstimate\n          });\n          \n          rescheduledTasks.push({\n            taskId: task.id,\n            oldDueAt,\n            newDueAt,\n            reason,\n            timeDifference\n          });\n        }\n      }\n      \n      // Generate insights\n      if (timeAccuracyRatio > 1.2) {\n        insights.push(`You typically take ${Math.round((timeAccuracyRatio - 1) * 100)}% longer than estimated - schedules adjusted accordingly`);\n      } else if (timeAccuracyRatio < 0.8) {\n        insights.push(`You complete tasks ${Math.round((1 - timeAccuracyRatio) * 100)}% faster than estimated - creating tighter schedules`);\n      }\n      \n      const totalTimeSaved = rescheduledTasks.reduce((sum, task) => {\n        return sum + (task.timeDifference < 0 ? Math.abs(task.timeDifference) : 0);\n      }, 0);\n      \n      if (rescheduledTasks.length > 0) {\n        insights.push(`Smart rescheduling optimized ${rescheduledTasks.length} tasks based on your work patterns`);\n      }\n      \n      return {\n        rescheduledTasks,\n        insights,\n        totalTimeSaved\n      };\n      \n    } catch (error) {\n      throw new Error(\"Failed to reschedule tasks: \" + (error as Error).message);\n    }\n  }\n\n  /**\n   * Calculate optimal break times based on task completion patterns\n   */\n  async suggestOptimalBreaks(userId: string): Promise<{\n    nextBreakSuggestion: Date;\n    reason: string;\n    breakDuration: number;\n  }> {\n    try {\n      const recentTasks = await storage.getUserTasks(userId);\n      const activeTasks = recentTasks.filter(t => t.status === \"in_progress\" || t.status === \"completed\");\n      \n      // Simple break calculation - suggest break after 90 minutes of work or between task sessions\n      const currentTime = new Date();\n      const nextBreakTime = new Date(currentTime.getTime() + 90 * 60 * 1000); // 90 minutes\n      \n      return {\n        nextBreakSuggestion: nextBreakTime,\n        reason: \"Optimal productivity break based on 90-minute work cycles\",\n        breakDuration: 15 // 15 minute break\n      };\n      \n    } catch (error) {\n      // Error suggesting breaks\n      return {\n        nextBreakSuggestion: new Date(Date.now() + 60 * 60 * 1000),\n        reason: \"Standard hourly break\",\n        breakDuration: 10\n      };\n    }\n  }\n}\n\n// Export singleton instance\nexport const smartScheduler = new SmartTaskScheduler();","size_bytes":9539},"server/storage.ts":{"content":"import {\n  users,\n  tasks,\n  notifications,\n  connectedApps,\n  userMetrics,\n  aiInsights,\n  userAppLinks,\n  credentials,\n  plans,\n  payments,\n  subscriptions,\n  userUsage,\n  encryptedGmailTokens,\n  priorityEmails,\n  type User,\n  type InsertUser,\n  type Task,\n  type InsertTask,\n  type Notification,\n  type InsertNotification,\n  type ConnectedApp,\n  type InsertConnectedApp,\n  type UserMetrics,\n  type InsertUserMetrics,\n  type AiInsight,\n  type InsertAiInsight,\n  type UserAppLink,\n  type InsertUserAppLink,\n  type Credential,\n  type InsertCredential,\n  type Plan,\n  type InsertPlan,\n  type Payment,\n  type InsertPayment,\n  type Subscription,\n  type InsertSubscription,\n  type UserUsage,\n  type InsertUserUsage,\n  type EncryptedGmailToken,\n  type InsertEncryptedGmailToken,\n  type PriorityEmail,\n  type InsertPriorityEmail,\n} from \"../shared/schema\";\nimport { getDb } from \"./db\";\nimport { eq, desc, and, gte, lte, or, isNull, exists, asc, inArray, sql } from \"drizzle-orm\";\n\n// Helper function to get database instance\nfunction requireDb() {\n  const db = getDb();\n  if (!db) {\n    throw new Error(\"Database not available\");\n  }\n  return db;\n}\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n\n  // Task operations\n  getUserTasks(userId: string): Promise<Task[]>;\n  getTaskById(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  getTasksByStatus(userId: string, status: string): Promise<Task[]>;\n  getTasksByPriority(priority: string, status?: string): Promise<Task[]>;\n\n  // Notification operations\n  getUserNotifications(userId: string, limit?: number): Promise<Notification[]>;\n  getNotificationById(id: string): Promise<Notification | undefined>;\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  markNotificationRead(id: string): Promise<void>;\n  dismissNotification(id: string): Promise<void>;\n  getUnreadNotificationCount(userId: string): Promise<number>;\n\n  // Connected Apps operations\n  getUserConnectedApps(userId: string): Promise<ConnectedApp[]>;\n  createConnectedApp(app: InsertConnectedApp): Promise<ConnectedApp>;\n  updateConnectedApp(id: string, updates: Partial<ConnectedApp>): Promise<ConnectedApp>;\n\n  // User Metrics operations\n  getUserMetrics(userId: string, date?: Date): Promise<UserMetrics | undefined>;\n  createUserMetrics(metrics: InsertUserMetrics): Promise<UserMetrics>;\n  updateUserMetrics(id: string, updates: Partial<UserMetrics>): Promise<UserMetrics>;\n\n  // AI Insights operations\n  getUserAiInsights(userId: string, limit?: number): Promise<AiInsight[]>;\n  createAiInsight(insight: InsertAiInsight): Promise<AiInsight>;\n  dismissAiInsight(id: string): Promise<void>;\n  applyAiInsight(id: string): Promise<void>;\n\n  // User App Links operations\n  getUserAppLinks(userId: string): Promise<UserAppLink[]>;\n  createUserAppLink(link: InsertUserAppLink): Promise<UserAppLink>;\n  deleteUserAppLink(id: string): Promise<void>;\n\n  // User Usage operations for plan limits\n  getUserUsage(userId: string, month: string): Promise<UserUsage | undefined>;\n  createUserUsage(usage: InsertUserUsage): Promise<UserUsage>;\n  updateUserUsage(id: string, updates: Partial<UserUsage>): Promise<UserUsage>;\n  incrementAiTaskUsage(userId: string): Promise<UserUsage | null>;\n  checkAiTaskLimit(userId: string): Promise<{ withinLimit: boolean; currentCount: number; limit: number; planType: string }>;\n  createAiTaskWithLimit(task: InsertTask): Promise<Task | null>;\n\n  // Gmail Token operations\n  createEncryptedGmailToken(data: InsertEncryptedGmailToken): Promise<EncryptedGmailToken>;\n  getEncryptedGmailToken(userId: string): Promise<EncryptedGmailToken | undefined>;\n  updateEncryptedGmailToken(userId: string, data: Partial<InsertEncryptedGmailToken>): Promise<EncryptedGmailToken>;\n  deleteEncryptedGmailToken(userId: string): Promise<void>;\n\n  // Priority Email operations\n  createPriorityEmail(data: InsertPriorityEmail): Promise<PriorityEmail>;\n  getUserPriorityEmails(userId: string): Promise<PriorityEmail[]>;\n  deletePriorityEmail(id: string): Promise<void>;\n  isPriorityEmail(userId: string, email: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await requireDb().select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await requireDb().select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await requireDb().insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await requireDb()\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Task operations\n  async getUserTasks(userId: string): Promise<Task[]> {\n    return await requireDb()\n      .select()\n      .from(tasks)\n      .where(eq(tasks.userId, userId))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTaskById(id: string): Promise<Task | undefined> {\n    const [task] = await requireDb().select().from(tasks).where(eq(tasks.id, id));\n    return task;\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await requireDb().insert(tasks).values(insertTask).returning();\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const [task] = await requireDb()\n      .update(tasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(tasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await requireDb().delete(tasks).where(eq(tasks.id, id));\n  }\n\n  async getTasksByStatus(userId: string, status: string): Promise<Task[]> {\n    return await requireDb()\n      .select()\n      .from(tasks)\n      .where(and(eq(tasks.userId, userId), eq(tasks.status, status as any)))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  async getTasksByPriority(priority: string, status?: string): Promise<Task[]> {\n    const conditions = [eq(tasks.priority, priority as any)];\n    if (status) {\n      conditions.push(eq(tasks.status, status as any));\n    }\n    return await requireDb()\n      .select()\n      .from(tasks)\n      .where(and(...conditions))\n      .orderBy(desc(tasks.createdAt));\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string, limit = 50): Promise<Notification[]> {\n    return await requireDb()\n      .select()\n      .from(notifications)\n      .where(and(eq(notifications.userId, userId), eq(notifications.isDismissed, false)))\n      .orderBy(desc(notifications.createdAt))\n      .limit(limit);\n  }\n\n  async getNotificationById(id: string): Promise<Notification | undefined> {\n    const [notification] = await requireDb()\n      .select()\n      .from(notifications)\n      .where(eq(notifications.id, id));\n    return notification;\n  }\n\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const [notification] = await requireDb()\n      .insert(notifications)\n      .values(insertNotification)\n      .returning();\n    return notification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    await requireDb()\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, id));\n  }\n\n  async dismissNotification(id: string): Promise<void> {\n    await requireDb()\n      .update(notifications)\n      .set({ isDismissed: true })\n      .where(eq(notifications.id, id));\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    const result = await requireDb()\n      .select()\n      .from(notifications)\n      .where(\n        and(\n          eq(notifications.userId, userId),\n          eq(notifications.isRead, false),\n          eq(notifications.isDismissed, false)\n        )\n      );\n    return result.length;\n  }\n\n  // Connected Apps operations\n  async getUserConnectedApps(userId: string): Promise<ConnectedApp[]> {\n    return await requireDb()\n      .select()\n      .from(connectedApps)\n      .where(eq(connectedApps.userId, userId))\n      .orderBy(connectedApps.appName);\n  }\n\n  async createConnectedApp(insertApp: InsertConnectedApp): Promise<ConnectedApp> {\n    const [app] = await requireDb().insert(connectedApps).values(insertApp).returning();\n    return app;\n  }\n\n  async updateConnectedApp(id: string, updates: Partial<ConnectedApp>): Promise<ConnectedApp> {\n    const [app] = await requireDb()\n      .update(connectedApps)\n      .set(updates)\n      .where(eq(connectedApps.id, id))\n      .returning();\n    return app;\n  }\n\n  // User Metrics operations\n  async getUserMetrics(userId: string, date?: Date): Promise<UserMetrics | undefined> {\n    const targetDate = date || new Date();\n    const startOfDay = new Date(targetDate);\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date(targetDate);\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [metrics] = await requireDb()\n      .select()\n      .from(userMetrics)\n      .where(\n        and(\n          eq(userMetrics.userId, userId),\n          gte(userMetrics.date, startOfDay),\n          lte(userMetrics.date, endOfDay)\n        )\n      )\n      .orderBy(desc(userMetrics.createdAt));\n\n    return metrics;\n  }\n\n  async createUserMetrics(insertMetrics: InsertUserMetrics): Promise<UserMetrics> {\n    const [metrics] = await requireDb()\n      .insert(userMetrics)\n      .values(insertMetrics)\n      .returning();\n    return metrics;\n  }\n\n  async updateUserMetrics(id: string, updates: Partial<UserMetrics>): Promise<UserMetrics> {\n    const [metrics] = await requireDb()\n      .update(userMetrics)\n      .set(updates)\n      .where(eq(userMetrics.id, id))\n      .returning();\n    return metrics;\n  }\n\n  // AI Insights operations\n  async getUserAiInsights(userId: string, limit = 10): Promise<AiInsight[]> {\n    return await requireDb()\n      .select()\n      .from(aiInsights)\n      .where(\n        and(\n          eq(aiInsights.userId, userId),\n          eq(aiInsights.isDismissed, false)\n        )\n      )\n      .orderBy(desc(aiInsights.createdAt))\n      .limit(limit);\n  }\n\n  async createAiInsight(insertInsight: InsertAiInsight): Promise<AiInsight> {\n    const [insight] = await requireDb().insert(aiInsights).values(insertInsight).returning();\n    return insight;\n  }\n\n  async dismissAiInsight(id: string): Promise<void> {\n    await requireDb()\n      .update(aiInsights)\n      .set({ isDismissed: true })\n      .where(eq(aiInsights.id, id));\n  }\n\n  async applyAiInsight(id: string): Promise<void> {\n    await requireDb()\n      .update(aiInsights)\n      .set({ isApplied: true })\n      .where(eq(aiInsights.id, id));\n  }\n\n  // User App Links operations\n  async getUserAppLinks(userId: string): Promise<UserAppLink[]> {\n    return await requireDb()\n      .select()\n      .from(userAppLinks)\n      .where(eq(userAppLinks.userId, userId))\n      .orderBy(desc(userAppLinks.createdAt));\n  }\n\n  async createUserAppLink(insertLink: InsertUserAppLink): Promise<UserAppLink> {\n    const [link] = await requireDb().insert(userAppLinks).values(insertLink).returning();\n    return link;\n  }\n\n  async deleteUserAppLink(id: string): Promise<void> {\n    await requireDb().delete(userAppLinks).where(eq(userAppLinks.id, id));\n  }\n\n  // User Usage operations for plan limits\n  async getUserUsage(userId: string, month: string): Promise<UserUsage | undefined> {\n    const [usage] = await requireDb()\n      .select()\n      .from(userUsage)\n      .where(and(eq(userUsage.userId, userId), eq(userUsage.month, month)));\n    return usage;\n  }\n\n  async createUserUsage(insertUsage: InsertUserUsage): Promise<UserUsage> {\n    const [usage] = await requireDb().insert(userUsage).values(insertUsage).returning();\n    return usage;\n  }\n\n  async updateUserUsage(id: string, updates: Partial<UserUsage>): Promise<UserUsage> {\n    const [usage] = await requireDb()\n      .update(userUsage)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userUsage.id, id))\n      .returning();\n    return usage;\n  }\n\n  async incrementAiTaskUsage(userId: string): Promise<UserUsage | null> {\n    const currentMonth = new Date().toISOString().slice(0, 7); // \"2025-01\" format\n    const limit = 50; // Free plan limit\n\n    try {\n      // Atomic increment with limit check - only increment if under limit\n      const [updatedUsage] = await requireDb()\n        .update(userUsage)\n        .set({ \n          aiTasksCreated: sql`${userUsage.aiTasksCreated} + 1`,\n          aiInteractionsCount: sql`${userUsage.aiInteractionsCount} + 1`,\n          updatedAt: new Date()\n        })\n        .where(and(\n          eq(userUsage.userId, userId), \n          eq(userUsage.month, currentMonth),\n          sql`${userUsage.aiTasksCreated} < ${limit}` // Only update if under limit\n        ))\n        .returning();\n\n      if (updatedUsage) {\n        return updatedUsage; // Successfully incremented\n      }\n\n      // If no rows updated, either no record exists or limit reached\n      // Try to create new record if it doesn't exist\n      try {\n        const [newUsage] = await requireDb()\n          .insert(userUsage)\n          .values({\n            userId,\n            month: currentMonth,\n            aiTasksCreated: 1,\n            aiInteractionsCount: 1,\n            planType: \"free\"\n          })\n          .returning();\n        return newUsage;\n      } catch (insertError: any) {\n        // Handle race condition where another request created the record\n        if (insertError.code === '23505') { // Unique constraint violation\n          // Record exists, retry atomic update with limit check\n          const [retryUsage] = await requireDb()\n            .update(userUsage)\n            .set({ \n              aiTasksCreated: sql`${userUsage.aiTasksCreated} + 1`,\n              aiInteractionsCount: sql`${userUsage.aiInteractionsCount} + 1`,\n              updatedAt: new Date()\n            })\n            .where(and(\n              eq(userUsage.userId, userId), \n              eq(userUsage.month, currentMonth),\n              sql`${userUsage.aiTasksCreated} < ${limit}` // Only update if under limit\n            ))\n            .returning();\n          return retryUsage || null; // null if limit exceeded\n        }\n        throw insertError;\n      }\n    } catch (error) {\n      console.error(\"Error incrementing AI task usage:\", error);\n      return null;\n    }\n  }\n\n  async createAiTaskWithLimit(taskData: InsertTask): Promise<Task | null> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const limit = 50; // Free plan limit\n\n    try {\n      // Perform atomic reservation and task creation in a single transaction\n      const result = await requireDb().transaction(async (tx) => {\n        // First, try to reserve capacity atomically using the transaction\n        const [reservedUsage] = await tx\n          .update(userUsage)\n          .set({ \n            aiTasksCreated: sql`${userUsage.aiTasksCreated} + 1`,\n            aiInteractionsCount: sql`${userUsage.aiInteractionsCount} + 1`,\n            updatedAt: new Date()\n          })\n          .where(and(\n            eq(userUsage.userId, taskData.userId),\n            eq(userUsage.month, currentMonth),\n            sql`${userUsage.aiTasksCreated} < ${limit}` // Only update if under limit\n          ))\n          .returning();\n\n        if (!reservedUsage) {\n          // Either no record exists or limit reached - try to create new record within transaction\n          try {\n            const [newUsage] = await tx\n              .insert(userUsage)\n              .values({\n                userId: taskData.userId,\n                month: currentMonth,\n                aiTasksCreated: 1,\n                aiInteractionsCount: 1,\n                planType: \"free\"\n              })\n              .returning();\n\n            if (!newUsage) {\n              throw new Error(\"Failed to create usage record\");\n            }\n          } catch (insertError: any) {\n            if (insertError.code === '23505') {\n              // Record exists, try the conditional update one more time within transaction\n              const [retryUsage] = await tx\n                .update(userUsage)\n                .set({ \n                  aiTasksCreated: sql`${userUsage.aiTasksCreated} + 1`,\n                  aiInteractionsCount: sql`${userUsage.aiInteractionsCount} + 1`,\n                  updatedAt: new Date()\n                })\n                .where(and(\n                  eq(userUsage.userId, taskData.userId),\n                  eq(userUsage.month, currentMonth),\n                  sql`${userUsage.aiTasksCreated} < ${limit}` // Only update if under limit\n                ))\n                .returning();\n\n              if (!retryUsage) {\n                throw new Error(\"AI task limit exceeded\");\n              }\n            } else {\n              throw insertError;\n            }\n          }\n        }\n\n        // If we reach here, capacity is reserved within the transaction - now create the task\n        const [task] = await tx\n          .insert(tasks)\n          .values(taskData)\n          .returning();\n\n        if (!task) {\n          throw new Error(\"Failed to create task\");\n        }\n\n        return task;\n      });\n\n      return result;\n    } catch (error: any) {\n      if (error.message === \"AI task limit exceeded\") {\n        console.log(`AI task limit exceeded for user ${taskData.userId}`);\n        return null;\n      }\n      console.error(\"Error creating AI task with limit check:\", error);\n      throw error;\n    }\n  }\n\n  async checkAiTaskLimit(userId: string): Promise<{ withinLimit: boolean; currentCount: number; limit: number; planType: string }> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const usage = await this.getUserUsage(userId, currentMonth);\n\n    const currentCount = usage?.aiTasksCreated || 0;\n    const planType = usage?.planType || \"free\";\n\n    // Define limits based on plan\n    const limits = {\n      free: 50,\n      basic: 100,\n      premium: 500,\n      enterprise: 1000\n    };\n\n    const limit = limits[planType as keyof typeof limits] || 50;\n    const withinLimit = currentCount < limit;\n\n    return { withinLimit, currentCount, limit, planType };\n  }\n\n  // Create encrypted Gmail token\n  async createEncryptedGmailToken(data: InsertEncryptedGmailToken): Promise<EncryptedGmailToken> {\n    const [token] = await requireDb().insert(encryptedGmailTokens).values(data).returning();\n    return token;\n  }\n\n  // Get encrypted Gmail token by user ID\n  async getEncryptedGmailToken(userId: string): Promise<EncryptedGmailToken | undefined> {\n    const [token] = await requireDb().select().from(encryptedGmailTokens).where(eq(encryptedGmailTokens.userId, userId));\n    return token;\n  }\n\n  // Update encrypted Gmail token\n  async updateEncryptedGmailToken(userId: string, data: Partial<InsertEncryptedGmailToken>): Promise<EncryptedGmailToken> {\n    const [token] = await requireDb()\n      .update(encryptedGmailTokens)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(encryptedGmailTokens.userId, userId))\n      .returning();\n    return token;\n  }\n\n  // Delete encrypted Gmail token\n  async deleteEncryptedGmailToken(userId: string): Promise<void> {\n    await requireDb().delete(encryptedGmailTokens).where(eq(encryptedGmailTokens.userId, userId));\n  }\n\n  // Priority Emails methods\n  async createPriorityEmail(data: InsertPriorityEmail): Promise<PriorityEmail> {\n    const [priorityEmail] = await requireDb().insert(priorityEmails).values(data).returning();\n    return priorityEmail;\n  }\n\n  async getUserPriorityEmails(userId: string): Promise<PriorityEmail[]> {\n    return await requireDb().select().from(priorityEmails)\n      .where(eq(priorityEmails.userId, userId))\n      .orderBy(desc(priorityEmails.createdAt));\n  }\n\n  async deletePriorityEmail(id: string): Promise<void> {\n    await requireDb().delete(priorityEmails).where(eq(priorityEmails.id, id));\n  }\n\n  async isPriorityEmail(userId: string, email: string): Promise<boolean> {\n    const [result] = await requireDb().select({ count: sql<number>`count(*)` })\n      .from(priorityEmails)\n      .where(and(\n        eq(priorityEmails.userId, userId),\n        eq(priorityEmails.email, email.toLowerCase())\n      ));\n    return result.count > 0;\n  }\n}\n\n// Use in-memory storage for demo/development\nexport class MemoryStorage implements IStorage {\n  private users = new Map<string, User>();\n  private tasks = new Map<string, Task>();\n  private notifications = new Map<string, Notification>();\n  private connectedApps = new Map<string, ConnectedApp>();\n  private userMetrics = new Map<string, UserMetrics>();\n  private aiInsights = new Map<string, AiInsight>();\n  private userAppLinks = new Map<string, UserAppLink>();\n  private userUsageMap = new Map<string, UserUsage>();\n  private encryptedGmailTokens = new Map<string, EncryptedGmailToken>();\n  private priorityEmailsMap = new Map<string, PriorityEmail>();\n\n\n  constructor() {\n    // Initialize with demo user\n    const demoUser: User = {\n      id: \"demo-user\",\n      name: \"Demo User\",\n      email: \"demo@flowhub.com\",\n      password: null,\n      role: \"Executive\",\n      profileImageUrl: null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(\"demo-user\", demoUser);\n\n    // Initialize demo metrics\n    const demoMetrics: UserMetrics = {\n      id: \"demo-metrics\",\n      userId: \"demo-user\",\n      focusScore: 85,\n      workloadCapacity: 75,\n      stressLevel: \"low\",\n      tasksCompleted: 12,\n      activeHours: 6,\n      todayProgress: 68,\n      nextBreakIn: 25,\n      date: new Date(),\n      createdAt: new Date(),\n    };\n    this.userMetrics.set(\"demo-user\", demoMetrics);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    for (const user of Array.from(this.users.values())) {\n      if (user.email === email) {\n        return user;\n      }\n    }\n    return undefined;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    // Using memory storage instead of db\n    const user: User = {\n      ...userData,\n      id: Math.random().toString(36).substr(2, 9),\n      password: userData.password || null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      role: userData.role || null,\n      profileImageUrl: userData.profileImageUrl || null\n    };\n    this.users.set(user.id, user);\n\n    // Create default app links for new users\n    const defaultAppLinks = [\n      { userId: user.id, name: 'GitHub', url: 'https://github.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/github.svg' },\n      { userId: user.id, name: 'Zoom', url: 'https://zoom.us', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/zoom.svg' },\n      { userId: user.id, name: 'Google', url: 'https://google.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/google.svg' },\n      { userId: user.id, name: 'Slack', url: 'https://slack.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/slack.svg' },\n      { userId: user.id, name: 'Jira', url: 'https://atlassian.com/software/jira', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/jira.svg' },\n      { userId: user.id, name: 'Trello', url: 'https://trello.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/trello.svg' },\n      { userId: user.id, name: 'LinkedIn', url: 'https://linkedin.com', logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/linkedin.svg' },\n    ];\n\n    // Add default app links using memory storage\n    defaultAppLinks.forEach(link => {\n      const appLink: UserAppLink = {\n        ...link,\n        id: Math.random().toString(36).substr(2, 9),\n        createdAt: new Date(),\n        logo: link.logo || null\n      };\n      this.userAppLinks.set(appLink.id, appLink);\n    });\n\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n\n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserTasks(userId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime());\n  }\n\n  async getTaskById(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(task: InsertTask): Promise<Task> {\n    const newTask: Task = {\n      ...task,\n      id: Math.random().toString(36).substr(2, 9),\n      status: task.status || \"pending\", // Ensure status defaults to \"pending\"\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      metadata: task.metadata || {},\n      description: task.description || null,\n      priority: task.priority || null,\n      sourceApp: task.sourceApp || null,\n      dueAt: task.dueAt || null,\n      startedAt: task.startedAt || null,\n      completedAt: task.completedAt || null,\n      estimatedMinutes: task.estimatedMinutes || null,\n      actualMinutes: task.actualMinutes || null\n    };\n    this.tasks.set(newTask.id, newTask);\n    return newTask;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const task = this.tasks.get(id);\n    if (!task) throw new Error(\"Task not found\");\n\n    const updatedTask = { ...task, ...updates, updatedAt: new Date() };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    this.tasks.delete(id);\n  }\n\n  async getTasksByStatus(userId: string, status: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.userId === userId && task.status === status);\n  }\n\n  async getTasksByPriority(priority: string, status?: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.priority === priority && (!status || task.status === status));\n  }\n\n  async getUserNotifications(userId: string, limit?: number): Promise<Notification[]> {\n    const userNotifications = Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId && !notification.isDismissed)\n      .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime());\n\n    return limit ? userNotifications.slice(0, limit) : userNotifications;\n  }\n\n  async getNotificationById(id: string): Promise<Notification | undefined> {\n    return this.notifications.get(id);\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const newNotification: Notification = {\n      ...notification,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      description: notification.description || null,\n      type: notification.type || null,\n      sourceApp: notification.sourceApp || null,\n      isRead: notification.isRead || null,\n      isDismissed: notification.isDismissed || null,\n      aiSummary: notification.aiSummary || null,\n      actionableInsights: notification.actionableInsights || null,\n      metadata: notification.metadata || {}\n    };\n    this.notifications.set(newNotification.id, newNotification);\n    return newNotification;\n  }\n\n  async markNotificationRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n      this.notifications.set(id, notification);\n    }\n  }\n\n  async dismissNotification(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isDismissed = true;\n      this.notifications.set(id, notification);\n    }\n  }\n\n  async getUnreadNotificationCount(userId: string): Promise<number> {\n    return Array.from(this.notifications.values())\n      .filter(n => n.userId === userId && !n.isRead && !n.isDismissed).length;\n  }\n\n  async getUserConnectedApps(userId: string): Promise<ConnectedApp[]> {\n    return Array.from(this.connectedApps.values())\n      .filter(app => app.userId === userId);\n  }\n\n  async createConnectedApp(app: InsertConnectedApp): Promise<ConnectedApp> {\n    const newApp: ConnectedApp = {\n      ...app,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      isConnected: app.isConnected || null,\n      hasNotifications: app.hasNotifications || null,\n      lastSyncAt: app.lastSyncAt || null\n    };\n    this.connectedApps.set(newApp.id, newApp);\n    return newApp;\n  }\n\n  async updateConnectedApp(id: string, updates: Partial<ConnectedApp>): Promise<ConnectedApp> {\n    const app = this.connectedApps.get(id);\n    if (!app) throw new Error(\"Connected app not found\");\n\n    const updatedApp = { ...app, ...updates };\n    this.connectedApps.set(id, updatedApp);\n    return updatedApp;\n  }\n\n  async getUserMetrics(userId: string, date?: Date): Promise<UserMetrics | undefined> {\n    return this.userMetrics.get(userId);\n  }\n\n  async createUserMetrics(metrics: InsertUserMetrics): Promise<UserMetrics> {\n    const newMetrics: UserMetrics = {\n      ...metrics,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      date: metrics.date || null,\n      focusScore: metrics.focusScore || null,\n      workloadCapacity: metrics.workloadCapacity || null,\n      stressLevel: metrics.stressLevel || null,\n      tasksCompleted: metrics.tasksCompleted || null,\n      activeHours: metrics.activeHours || null,\n      todayProgress: metrics.todayProgress || null,\n      nextBreakIn: metrics.nextBreakIn || null\n    };\n    this.userMetrics.set(metrics.userId, newMetrics);\n    return newMetrics;\n  }\n\n  async updateUserMetrics(id: string, updates: Partial<UserMetrics>): Promise<UserMetrics> {\n    const metrics = Array.from(this.userMetrics.values()).find(m => m.id === id);\n    if (!metrics) throw new Error(\"User metrics not found\");\n\n    const updatedMetrics = { ...metrics, ...updates };\n    this.userMetrics.set(metrics.userId, updatedMetrics);\n    return updatedMetrics;\n  }\n\n  async getUserAiInsights(userId: string, limit?: number): Promise<AiInsight[]> {\n    const userInsights = Array.from(this.aiInsights.values())\n      .filter(insight => insight.userId === userId && !insight.isDismissed)\n      .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime());\n\n    return limit ? userInsights.slice(0, limit) : userInsights;\n  }\n\n  async createAiInsight(insight: InsertAiInsight): Promise<AiInsight> {\n    const newInsight: AiInsight = {\n      ...insight,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      metadata: insight.metadata || {},\n      isDismissed: insight.isDismissed || null,\n      priority: insight.priority || null,\n      actionable: insight.actionable || null,\n      isApplied: insight.isApplied || null\n    };\n    this.aiInsights.set(newInsight.id, newInsight);\n    return newInsight;\n  }\n\n  async dismissAiInsight(id: string): Promise<void> {\n    const insight = this.aiInsights.get(id);\n    if (insight) {\n      insight.isDismissed = true;\n      this.aiInsights.set(id, insight);\n    }\n  }\n\n  async applyAiInsight(id: string): Promise<void> {\n    const insight = this.aiInsights.get(id);\n    if (insight) {\n      insight.isApplied = true;\n      this.aiInsights.set(id, insight);\n    }\n  }\n\n  async getUserAppLinks(userId: string): Promise<UserAppLink[]> {\n    return Array.from(this.userAppLinks.values())\n      .filter(link => link.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime());\n  }\n\n  async createUserAppLink(link: InsertUserAppLink): Promise<UserAppLink> {\n    const newLink: UserAppLink = {\n      ...link,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      logo: link.logo || null\n    };\n    this.userAppLinks.set(newLink.id, newLink);\n    return newLink;\n  }\n\n  async deleteUserAppLink(id: string): Promise<void> {\n    this.userAppLinks.delete(id);\n  }\n\n  // User Usage operations for plan limits\n  async getUserUsage(userId: string, month: string): Promise<UserUsage | undefined> {\n    const key = `${userId}-${month}`;\n    return this.userUsageMap.get(key);\n  }\n\n  async createUserUsage(insertUsage: InsertUserUsage): Promise<UserUsage> {\n    const newUsage: UserUsage = {\n      ...insertUsage,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      aiTasksCreated: insertUsage.aiTasksCreated || 0,\n      aiInteractionsCount: insertUsage.aiInteractionsCount || 0,\n      planType: insertUsage.planType || \"free\"\n    };\n    const key = `${newUsage.userId}-${newUsage.month}`;\n    this.userUsageMap.set(key, newUsage);\n    return newUsage;\n  }\n\n  async updateUserUsage(id: string, updates: Partial<UserUsage>): Promise<UserUsage> {\n    const usage = Array.from(this.userUsageMap.values()).find(u => u.id === id);\n    if (!usage) throw new Error(\"User usage not found\");\n\n    const updatedUsage = { ...usage, ...updates, updatedAt: new Date() };\n    const key = `${updatedUsage.userId}-${updatedUsage.month}`;\n    this.userUsageMap.set(key, updatedUsage);\n    return updatedUsage;\n  }\n\n  async incrementAiTaskUsage(userId: string): Promise<UserUsage | null> {\n    const currentMonth = new Date().toISOString().slice(0, 7); // \"2025-01\" format\n\n    // First check current limits to prevent increment if already at limit\n    const limitCheck = await this.checkAiTaskLimit(userId);\n    if (!limitCheck.withinLimit) {\n      return null; // Return null if limit would be exceeded\n    }\n\n    // Get or create usage record for current month\n    let usage = await this.getUserUsage(userId, currentMonth);\n\n    if (!usage) {\n      // Create new usage record for this month\n      usage = await this.createUserUsage({\n        userId,\n        month: currentMonth,\n        aiTasksCreated: 1,\n        aiInteractionsCount: 1,\n        planType: \"free\"\n      });\n    } else {\n      // Increment existing usage\n      usage = await this.updateUserUsage(usage.id, {\n        aiTasksCreated: (usage.aiTasksCreated || 0) + 1,\n        aiInteractionsCount: (usage.aiInteractionsCount || 0) + 1\n      });\n    }\n\n    return usage;\n  }\n\n  async createAiTaskWithLimit(taskData: InsertTask): Promise<Task | null> {\n    // Check AI task limits before proceeding\n    const limitCheck = await this.checkAiTaskLimit(taskData.userId);\n    if (!limitCheck.withinLimit) {\n      return null; // Return null if limit exceeded\n    }\n\n    // Increment usage counter\n    const usage = await this.incrementAiTaskUsage(taskData.userId);\n    if (!usage) {\n      return null; // Return null if increment failed (shouldn't happen in memory storage)\n    }\n\n    // Create the task\n    const task = await this.createTask(taskData);\n    return task;\n  }\n\n  async checkAiTaskLimit(userId: string): Promise<{ withinLimit: boolean; currentCount: number; limit: number; planType: string }> {\n    const currentMonth = new Date().toISOString().slice(0, 7);\n    const usage = await this.getUserUsage(userId, currentMonth);\n\n    const currentCount = usage?.aiTasksCreated || 0;\n    const planType = usage?.planType || \"free\";\n\n    // Define limits based on plan\n    const limits = {\n      free: 50,\n      basic: 100,\n      premium: 500,\n      enterprise: 1000\n    };\n\n    const limit = limits[planType as keyof typeof limits] || 50;\n    const withinLimit = currentCount < limit;\n\n    return { withinLimit, currentCount, limit, planType };\n  }\n\n  // Gmail Token operations\n  async createEncryptedGmailToken(data: InsertEncryptedGmailToken): Promise<EncryptedGmailToken> {\n    const newEncryptedGmailToken: EncryptedGmailToken = {\n      ...data,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      token: data.token,\n      userId: data.userId,\n    };\n    this.encryptedGmailTokens.set(newEncryptedGmailToken.id, newEncryptedGmailToken);\n    return newEncryptedGmailToken;\n  }\n\n  async getEncryptedGmailToken(userId: string): Promise<EncryptedGmailToken | undefined> {\n    for (const token of Array.from(this.encryptedGmailTokens.values())) {\n      if (token.userId === userId) {\n        return token;\n      }\n    }\n    return undefined;\n  }\n\n  async updateEncryptedGmailToken(userId: string, data: Partial<InsertEncryptedGmailToken>): Promise<EncryptedGmailToken> {\n    const token = Array.from(this.encryptedGmailTokens.values()).find(t => t.userId === userId);\n    if (!token) throw new Error(\"Encrypted Gmail token not found\");\n\n    const updatedToken = { ...token, ...data, updatedAt: new Date() };\n    this.encryptedGmailTokens.set(token.id, updatedToken);\n    return updatedToken;\n  }\n\n  async deleteEncryptedGmailToken(userId: string): Promise<void> {\n    const token = Array.from(this.encryptedGmailTokens.values()).find(t => t.userId === userId);\n    if (token) {\n      this.encryptedGmailTokens.delete(token.id);\n    }\n  }\n\n  // Priority Emails methods\n  async createPriorityEmail(data: InsertPriorityEmail): Promise<PriorityEmail> {\n    const newPriorityEmail: PriorityEmail = {\n      ...data,\n      id: Math.random().toString(36).substr(2, 9),\n      createdAt: new Date(),\n      email: data.email.toLowerCase(),\n      userId: data.userId,\n    };\n    this.priorityEmailsMap.set(newPriorityEmail.id, newPriorityEmail);\n    return newPriorityEmail;\n  }\n\n  async getUserPriorityEmails(userId: string): Promise<PriorityEmail[]> {\n    return Array.from(this.priorityEmailsMap.values())\n      .filter(email => email.userId === userId)\n      .sort((a, b) => new Date(b.createdAt || new Date()).getTime() - new Date(a.createdAt || new Date()).getTime());\n  }\n\n  async deletePriorityEmail(id: string): Promise<void> {\n    this.priorityEmailsMap.delete(id);\n  }\n\n  async isPriorityEmail(userId: string, email: string): Promise<boolean> {\n    return Array.from(this.priorityEmailsMap.values())\n      .some(priorityEmail => priorityEmail.userId === userId && priorityEmail.email === email.toLowerCase());\n  }\n}\n\n// Use MemoryStorage for stable demo while database connection issues are resolved\nexport const storage = new MemoryStorage();","size_bytes":38768},"server/tokenStorage.ts":{"content":"import { createCipherGCM, createDecipherGCM, randomBytes } from 'crypto';\nimport { storage } from './storage';\n\n// Encryption service for Gmail OAuth tokens\nclass TokenEncryption {\n  private readonly algorithm = 'aes-256-gcm';\n  private readonly secretKey: Buffer;\n\n  constructor() {\n    // Use a secure secret from environment or generate one\n    const keyString = process.env.TOKEN_ENCRYPTION_KEY || this.generateSecureKey();\n    this.secretKey = keyString.length === 64 ? Buffer.from(keyString, 'hex') : Buffer.from(keyString).subarray(0, 32);\n  }\n\n  private generateSecureKey(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  encrypt(plaintext: string): { encrypted: string; iv: string; authTag: string } {\n    const iv = randomBytes(16);\n    const cipher = createCipherGCM(this.algorithm, this.secretKey, iv);\n    \n    let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    \n    const authTag = cipher.getAuthTag().toString('hex');\n    \n    return {\n      encrypted,\n      iv: iv.toString('hex'),\n      authTag\n    };\n  }\n\n  decrypt(encryptedData: { encrypted: string; iv: string; authTag: string }): string {\n    const decipher = createDecipherGCM(this.algorithm, this.secretKey, Buffer.from(encryptedData.iv, 'hex'));\n    decipher.setAuthTag(Buffer.from(encryptedData.authTag, 'hex'));\n    \n    let decrypted = decipher.update(encryptedData.encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    \n    return decrypted;\n  }\n}\n\n// Secure token storage service\nexport class SecureTokenStorage {\n  private encryption = new TokenEncryption();\n\n  async storeGmailTokens(userId: string, tokens: any, userEmail: string): Promise<void> {\n    try {\n      const tokenString = JSON.stringify({\n        access_token: tokens.access_token,\n        refresh_token: tokens.refresh_token,\n        expiry_date: tokens.expiry_date,\n        token_type: tokens.token_type || 'Bearer',\n        scope: tokens.scope\n      });\n\n      const encryptedData = this.encryption.encrypt(tokenString);\n      \n      // Store encrypted tokens in database\n      const encryptedTokenBlob = JSON.stringify({\n        encrypted: encryptedData.encrypted,\n        iv: encryptedData.iv,\n        authTag: encryptedData.authTag,\n        userEmail,\n        createdAt: new Date().toISOString()\n      });\n\n      // Store in database (we'll add this to schema)\n      await storage.storeEncryptedGmailTokens(userId, encryptedTokenBlob);\n      \n    } catch (error) {\n      console.error('[TokenStorage] Failed to store Gmail tokens:', error);\n      throw new Error('Failed to store encrypted tokens');\n    }\n  }\n\n  async retrieveGmailTokens(userId: string): Promise<{ tokens: any; userEmail: string } | null> {\n    try {\n      const encryptedBlob = await storage.getEncryptedGmailTokens(userId);\n      if (!encryptedBlob) return null;\n\n      const encryptedData = JSON.parse(encryptedBlob);\n      const decryptedTokenString = this.encryption.decrypt({\n        encrypted: encryptedData.encrypted,\n        iv: encryptedData.iv,\n        authTag: encryptedData.authTag\n      });\n\n      const tokens = JSON.parse(decryptedTokenString);\n      \n      return {\n        tokens,\n        userEmail: encryptedData.userEmail\n      };\n    } catch (error) {\n      console.error('[TokenStorage] Failed to retrieve Gmail tokens:', error);\n      return null;\n    }\n  }\n\n  async deleteGmailTokens(userId: string): Promise<void> {\n    try {\n      await storage.deleteEncryptedGmailTokens(userId);\n    } catch (error) {\n      console.error('[TokenStorage] Failed to delete Gmail tokens:', error);\n      throw new Error('Failed to delete encrypted tokens');\n    }\n  }\n}\n\nexport const secureTokenStorage = new SecureTokenStorage();","size_bytes":3736},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`[${formattedTime}] ${source}: ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(process.cwd(), \"dist\", \"client\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2266},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  integer,\n  jsonb,\n  boolean,\n  pgEnum,\n  unique,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const taskPriorityEnum = pgEnum(\"task_priority\", [\"urgent\", \"important\", \"normal\"]);\nexport const notificationTypeEnum = pgEnum(\"notification_type\", [\"urgent\", \"important\", \"informational\"]);\nexport const taskStatusEnum = pgEnum(\"task_status\", [\"pending\", \"in_progress\", \"completed\", \"paused\"]);\nexport const appTypeEnum = pgEnum(\"app_type\", [\"gmail\", \"slack\", \"notion\", \"trello\", \"zoom\", \"calendar\", \"manual\"]);\nexport const credentialTypeEnum = pgEnum(\"credential_type\", [\"oauth_token\", \"api_key\", \"password\", \"certificate\"]);\nexport const planTypeEnum = pgEnum(\"plan_type\", [\"free\", \"basic\", \"premium\", \"enterprise\"]);\nexport const paymentStatusEnum = pgEnum(\"payment_status\", [\"pending\", \"completed\", \"failed\", \"refunded\"]);\nexport const paymentProviderEnum = pgEnum(\"payment_provider\", [\"razorpay\", \"cashfree\", \"phonepe\", \"paytm\", \"manual\"]);\nexport const paymentMethodEnum = pgEnum(\"payment_method\", [\"upi\", \"card\", \"netbanking\", \"wallet\"]);\nexport const subscriptionStatusEnum = pgEnum(\"subscription_status\", [\"active\", \"pending\", \"canceled\", \"paused\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\"),\n  role: text(\"role\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Connected Apps table\nexport const connectedApps = pgTable(\"connected_apps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  appType: appTypeEnum(\"app_type\").notNull(),\n  appName: text(\"app_name\").notNull(),\n  isConnected: boolean(\"is_connected\").default(true),\n  hasNotifications: boolean(\"has_notifications\").default(false),\n  lastSyncAt: timestamp(\"last_sync_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: taskPriorityEnum(\"priority\").default(\"normal\"),\n  status: taskStatusEnum(\"status\").default(\"pending\"),\n  estimatedMinutes: integer(\"estimated_minutes\"),\n  actualMinutes: integer(\"actual_minutes\"),\n  dueAt: timestamp(\"due_at\"),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  sourceApp: appTypeEnum(\"source_app\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  type: notificationTypeEnum(\"type\").default(\"informational\"),\n  sourceApp: appTypeEnum(\"source_app\"),\n  isRead: boolean(\"is_read\").default(false),\n  isDismissed: boolean(\"is_dismissed\").default(false),\n  aiSummary: text(\"ai_summary\"),\n  actionableInsights: jsonb(\"actionable_insights\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Metrics table\nexport const userMetrics = pgTable(\"user_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  focusScore: integer(\"focus_score\").default(0),\n  workloadCapacity: integer(\"workload_capacity\").default(0),\n  stressLevel: text(\"stress_level\").default(\"low\"),\n  tasksCompleted: integer(\"tasks_completed\").default(0),\n  activeHours: integer(\"active_hours\").default(0),\n  todayProgress: integer(\"today_progress\").default(0),\n  nextBreakIn: integer(\"next_break_in\").default(25),\n  date: timestamp(\"date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User App Links table\nexport const userAppLinks = pgTable(\"user_app_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  url: text(\"url\").notNull(),\n  logo: text(\"logo\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// AI Insights table\nexport const aiInsights = pgTable(\"ai_insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // \"deadline_alert\", \"workflow_optimization\", \"wellness_suggestion\"\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  priority: taskPriorityEnum(\"priority\").default(\"normal\"),\n  actionable: boolean(\"actionable\").default(true),\n  metadata: jsonb(\"metadata\"),\n  isApplied: boolean(\"is_applied\").default(false),\n  isDismissed: boolean(\"is_dismissed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User Usage table for tracking AI task creation limits\nexport const userUsage = pgTable(\"user_usage\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  month: text(\"month\").notNull(), // Format: \"2025-01\" for monthly tracking\n  aiTasksCreated: integer(\"ai_tasks_created\").default(0).notNull(),\n  aiInteractionsCount: integer(\"ai_interactions_count\").default(0).notNull(),\n  planType: planTypeEnum(\"plan_type\").default(\"free\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n}, (table) => ({\n  userIdIdx: index(\"user_usage_user_id_idx\").on(table.userId),\n  monthIdx: index(\"user_usage_month_idx\").on(table.month),\n  // Unique constraint to prevent duplicate records per user per month\n  userMonthUnique: unique(\"user_usage_user_month_unique\").on(table.userId, table.month),\n}));\n\n// Credentials table\nexport const credentials = pgTable(\"credentials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  serviceType: appTypeEnum(\"service_type\").notNull(),\n  credentialType: credentialTypeEnum(\"credential_type\").notNull(),\n  encryptedValue: text(\"encrypted_value\").notNull(),\n  expiresAt: timestamp(\"expires_at\"),\n  isActive: boolean(\"is_active\").default(true),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Plans table\nexport const plans = pgTable(\"plans\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  planType: planTypeEnum(\"plan_type\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\").notNull(), // price in paise (smallest unit)\n  currency: text(\"currency\").default(\"inr\"),\n  billingInterval: text(\"billing_interval\").notNull(), // \"monthly\", \"yearly\"\n  features: jsonb(\"features\"),\n  isActive: boolean(\"is_active\").default(true),\n  provider: paymentProviderEnum(\"provider\").default(\"razorpay\"),\n  providerProductId: text(\"provider_product_id\"),\n  providerPriceId: text(\"provider_price_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Payments table\nexport const payments = pgTable(\"payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planId: varchar(\"plan_id\").references(() => plans.id),\n  amount: integer(\"amount\").notNull(), // amount in paise (smallest unit)\n  currency: text(\"currency\").default(\"inr\"),\n  status: paymentStatusEnum(\"status\").default(\"pending\"),\n  provider: paymentProviderEnum(\"provider\").default(\"razorpay\"),\n  paymentMethod: paymentMethodEnum(\"payment_method\"),\n  providerPaymentId: text(\"provider_payment_id\"), // Razorpay payment ID\n  providerOrderId: text(\"provider_order_id\"), // Razorpay order ID\n  signature: text(\"signature\"), // Payment signature for verification\n  webhookVerified: boolean(\"webhook_verified\").default(false),\n  upiTxnId: text(\"upi_txn_id\"), // UPI transaction ID\n  payerVpa: text(\"payer_vpa\"), // UPI VPA (Virtual Payment Address)\n  pspRefNo: text(\"psp_ref_no\"), // Payment Service Provider reference number\n  metadata: jsonb(\"metadata\"),\n  paidAt: timestamp(\"paid_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscriptions table for recurring payments/UPI AutoPay\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  planId: varchar(\"plan_id\").notNull().references(() => plans.id),\n  provider: paymentProviderEnum(\"provider\").default(\"razorpay\"),\n  providerSubscriptionId: text(\"provider_subscription_id\"), // Razorpay subscription ID\n  upiMandateId: text(\"upi_mandate_id\"), // UPI AutoPay mandate ID\n  status: subscriptionStatusEnum(\"status\").default(\"pending\"),\n  currentPeriodStart: timestamp(\"current_period_start\"),\n  currentPeriodEnd: timestamp(\"current_period_end\"),\n  canceledAt: timestamp(\"canceled_at\"),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Encrypted Gmail Tokens table\nexport const encryptedGmailTokens = pgTable(\"encrypted_gmail_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  encryptedTokenBlob: text(\"encrypted_token_blob\").notNull(), // JSON string with encrypted data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Priority Emails table\nexport const priorityEmails = pgTable(\"priority_emails\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  email: text(\"email\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userEmailUnique: unique(\"priority_emails_user_email_unique\").on(table.userId, table.email),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n  .extend({\n    dueAt: z.union([z.string(), z.date()]).optional().transform((val) => {\n      if (typeof val === 'string') {\n        return new Date(val);\n      }\n      return val;\n    }),\n  });\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConnectedAppSchema = createInsertSchema(connectedApps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserMetricsSchema = createInsertSchema(userMetrics).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserAppLinkSchema = createInsertSchema(userAppLinks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiInsightSchema = createInsertSchema(aiInsights).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCredentialSchema = createInsertSchema(credentials).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserUsageSchema = createInsertSchema(userUsage).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEncryptedGmailTokensSchema = createInsertSchema(encryptedGmailTokens).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPriorityEmailSchema = createInsertSchema(priorityEmails).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\nexport type ConnectedApp = typeof connectedApps.$inferSelect;\nexport type InsertConnectedApp = z.infer<typeof insertConnectedAppSchema>;\n\nexport type UserMetrics = typeof userMetrics.$inferSelect;\nexport type InsertUserMetrics = z.infer<typeof insertUserMetricsSchema>;\n\nexport type UserAppLink = typeof userAppLinks.$inferSelect;\nexport type InsertUserAppLink = z.infer<typeof insertUserAppLinkSchema>;\n\nexport type AiInsight = typeof aiInsights.$inferSelect;\nexport type InsertAiInsight = z.infer<typeof insertAiInsightSchema>;\n\nexport type Credential = typeof credentials.$inferSelect;\nexport type InsertCredential = z.infer<typeof insertCredentialSchema>;\n\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\n\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\n\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\n\nexport type EncryptedGmailToken = typeof encryptedGmailTokens.$inferSelect;\nexport type InsertEncryptedGmailToken = z.infer<typeof insertEncryptedGmailTokensSchema>;\n\nexport type UserUsage = typeof userUsage.$inferSelect;\nexport type InsertUserUsage = z.infer<typeof insertUserUsageSchema>;\n\nexport type PriorityEmail = typeof priorityEmails.$inferSelect;\nexport type InsertPriorityEmail = z.infer<typeof insertPriorityEmailSchema>;","size_bytes":14446},"client/public/sw.js":{"content":"// Service Worker removed - using direct Windows notifications instead\nconsole.log('Service Worker: Removed for direct Windows notifications');\n\nself.addEventListener('install', event => {\n  console.log('Service Worker: Installing (minimal)');\n  event.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', event => {\n  console.log('Service Worker: Activating (minimal)');\n  event.waitUntil(self.clients.claim());\n});\n\n// No longer handling notifications via service worker\n// Using direct Notification API for Windows notifications","size_bytes":547},"client/src/App.tsx":{"content":"\nimport { useEffect, useState } from \"react\";\nimport { Router, Route, useLocation } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Landing } from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\nimport EmailsConverted from \"@/pages/EmailsConverted\";\nimport TimeSaved from \"@/pages/TimeSaved\";\nimport AppLinks from \"@/pages/app-links\";\nimport PriorityEmails from \"@/pages/PriorityEmails\";\nimport Feedback from \"@/pages/Feedback\";\nimport { useCurrentUser } from \"@/hooks/useAuth\";\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\nfunction AppRouter() {\n  const { user, isLoading, isAuthenticated } = useCurrentUser();\n  const [location, setLocation] = useLocation();\n  const [authChecked, setAuthChecked] = useState(false);\n  const [initialAuthState, setInitialAuthState] = useState<boolean | null>(null);\n\n  useEffect(() => {\n    if (!isLoading) {\n      setAuthChecked(true);\n      if (initialAuthState === null) {\n        setInitialAuthState(isAuthenticated);\n      }\n    }\n  }, [isLoading, isAuthenticated, initialAuthState]);\n\n  // Handle authentication state changes\n  useEffect(() => {\n    if (authChecked && initialAuthState !== null) {\n      // If user was logged in and is now logged out, go to landing\n      if (initialAuthState && !isAuthenticated) {\n        // Clear any remaining auth data\n        localStorage.removeItem('user_auth');\n        setLocation(\"/\");\n        setInitialAuthState(false);\n      }\n    }\n  }, [authChecked, isAuthenticated, initialAuthState, setLocation]);\n\n  // Listen for storage changes (when user logs out in another tab)\n  useEffect(() => {\n    const handleStorageChange = (e: StorageEvent) => {\n      if (e.key === 'user_auth' && e.newValue === null) {\n        // User logged out in another tab\n        window.location.reload();\n      }\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n\n  // Check for successful Gmail connection on mount\n  useEffect(() => {\n    const gmailConnected = localStorage.getItem('gmailConnected');\n    const userEmail = localStorage.getItem('userEmail');\n\n    if (gmailConnected === 'true' && userEmail && !user) {\n      // Clear the flags\n      localStorage.removeItem('gmailConnected');\n      localStorage.removeItem('userEmail');\n    }\n  }, [user]);\n\n  if (!authChecked) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      <Route path=\"/\">\n        <Landing />\n      </Route>\n      <Route path=\"/dashboard\">\n        {isAuthenticated ? <Dashboard /> : <Landing />}\n      </Route>\n      <Route path=\"/emails-converted\">\n        {isAuthenticated ? <EmailsConverted /> : <Landing />}\n      </Route>\n      <Route path=\"/time-saved\">\n        {isAuthenticated ? <TimeSaved /> : <Landing />}\n      </Route>\n      <Route path=\"/app-links\">\n        {isAuthenticated ? <AppLinks /> : <Landing />}\n      </Route>\n      <Route path=\"/priority-emails\">\n        {isAuthenticated ? <PriorityEmails /> : <Landing />}\n      </Route>\n      <Route path=\"/feedback\">\n        {isAuthenticated ? <Feedback /> : <Landing />}\n      </Route>\n      <Route path=\"/404\" component={NotFound} />\n      <Route path=\"/:rest*\">\n        {isAuthenticated ? <Dashboard /> : <Landing />}\n      </Route>\n    </Router>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <div className=\"min-h-screen max-h-screen overflow-hidden\">\n        <Toaster />\n        <AppRouter />\n      </div>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3948},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Playfair+Display:wght@400;500;600;700&family=JetBrains+Mono:wght@300;400;500;600;700&family=Sohne:wght@400;500;600;700&family=GT+America:wght@400;500;600;700;800;900&display=swap');\n@tailwind base;\n@tailwind components;\n\n\n/* Enhanced Light Theme Styles */\n:root.light {\n  /* Glass effect for light theme */\n  --glass-bg: rgba(255, 255, 255, 0.85);\n  --glass-border: rgba(0, 0, 0, 0.15);\n  --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\n\n  /* Enhanced gradient backgrounds */\n  --gradient-primary: linear-gradient(135deg, hsl(221, 83%, 53%) 0%, hsl(221, 83%, 60%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(210, 40%, 94%) 0%, hsl(210, 40%, 98%) 100%);\n\n  /* Button hover effects */\n  --hover-overlay: rgba(0, 0, 0, 0.05);\n}\n\n:root.dark {\n  /* Glass effect for dark theme */\n  --glass-bg: rgba(0, 0, 0, 0.3);\n  --glass-border: rgba(255, 255, 255, 0.1);\n  --glass-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n\n  /* Enhanced gradient backgrounds */\n  --gradient-primary: linear-gradient(135deg, hsl(212, 100%, 47%) 0%, hsl(212, 100%, 54%) 100%);\n  --gradient-secondary: linear-gradient(135deg, hsl(217, 32%, 17%) 0%, hsl(217, 32%, 20%) 100%);\n\n  /* Button hover effects */\n  --hover-overlay: rgba(255, 255, 255, 0.05);\n}\n\n/* Enhanced Glass Card Effect */\n.glass-card {\n  background: var(--glass-bg);\n  backdrop-filter: blur(20px) saturate(150%);\n  border: 1px solid var(--glass-border);\n  box-shadow: var(--glass-shadow);\n}\n\n/* Enhanced Button Styles for Light Theme */\n.light .glass-effect,\n.light .glass-card {\n  background: var(--glass-bg);\n  backdrop-filter: blur(16px) saturate(120%);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n}\n\n.light .glass-effect:hover,\n.light .glass-card:hover {\n  background: rgba(255, 255, 255, 0.95);\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);\n  transform: translateY(-1px);\n  transition: all 0.2s ease;\n}\n\n/* Light Theme Icon Colors */\n.light svg {\n  color: rgba(0, 0, 0, 0.8) !important;\n}\n\n.light .text-primary svg,\n.light .text-blue-500,\n.light .text-red-500,\n.light .text-purple-500,\n.light .text-green-500,\n.light .text-green-600 {\n  color: inherit !important;\n}\n\n/* Profile Avatar Enhancement */\n.light .premium-logo-glow {\n  filter: drop-shadow(0 2px 8px rgba(0, 0, 0, 0.1));\n}\n\n/* Enhanced Cards for Light Theme */\n.light [data-testid=\"card-notifications\"],\n.light [data-testid=\"card-tasks\"],\n.light [data-testid=\"card-app-launcher\"] {\n  background: rgba(255, 255, 255, 0.95);\n  border: 1px solid rgba(0, 0, 0, 0.12);\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\n}\n\n/* Better contrast for text in light mode */\n.light .text-muted-foreground {\n  color: hsl(215, 16%, 38%) !important;\n}\n\n/* Enhanced navigation buttons */\n.light button[variant=\"ghost\"] {\n  background: rgba(255, 255, 255, 0.6);\n  border: 1px solid rgba(0, 0, 0, 0.05);\n}\n\n.light button[variant=\"ghost\"]:hover {\n  background: rgba(255, 255, 255, 0.9);\n  border: 1px solid rgba(0, 0, 0, 0.1);\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n}\n\n/* Global Styles */\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Open Sans', 'Helvetica Neue', sans-serif;\n  font-display: swap;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  overflow-x: hidden;\n}\n\n/* Ensure all pages are scrollable */\nhtml, body {\n  height: 100%;\n  overflow-y: auto;\n}\n\n#root {\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n}\n\n/* Page scroll fixes */\n.min-h-screen {\n  min-height: 100vh;\n  max-height: 100vh;\n  overflow-y: auto;\n}\n\n/* Main content scroll fixes */\nmain {\n  overflow-y: auto !important;\n  flex: 1;\n  min-height: 0;\n}\n\n/* Prevent duplicate content and fix scrolling */\n/* The previous rules for main, dashboard-container, and root are now handled by the new global styles.\n   Keeping these commented out for reference but they are effectively superseded. */\n/*\nmain {\n  min-height: 100vh;\n  position: relative;\n  overflow-y: auto;\n  padding-top: 80px;\n}\n\n.dashboard-container {\n  min-height: 100vh;\n  position: relative;\n  overflow: hidden;\n}\n\n#root {\n  min-height: 100vh;\n  position: relative;\n  overflow: hidden;\n}\n*/\n\n/* Mobile Responsive Layout */\n@media (max-width: 768px) {\n  /* Hide app launcher on mobile */\n  [data-testid=\"card-app-launcher\"] {\n    display: none !important;\n  }\n\n  /* Mobile dashboard layout adjustments */\n  .dashboard-grid {\n    grid-template-columns: 1fr !important;\n    gap: 1rem !important;\n  }\n\n  /* Desktop dashboard layout - allow sections to grow naturally */\n  .dashboard-grid {\n    display: flex;\n    align-items: start;\n    gap: 1.5rem;\n    min-height: calc(100vh - 120px);\n  }\n\n  /* Ensure mobile content fits properly */\n  main {\n    min-height: auto;\n    height: auto;\n    overflow-y: visible;\n    padding-bottom: 1rem !important;\n  }\n\n  /* Mobile task button container - force side by side layout */\n  .mobile-task-buttons-container {\n    display: flex !important;\n    flex-direction: row !important;\n    gap: 8px;\n    align-items: center;\n    justify-content: flex-start;\n    flex-wrap: nowrap;\n    overflow-x: auto;\n    padding: 2px;\n  }\n\n  /* Stack tasks and notifications vertically on mobile */\n  .mobile-task-notification-stack {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n  }\n\n  /* Adjust button spacing for mobile - force horizontal layout */\n  .mobile-button-group {\n    display: flex !important;\n    flex-direction: row !important;\n    flex-wrap: nowrap !important;\n    gap: 0.5rem;\n    justify-content: flex-start;\n    align-items: center;\n  }\n\n  .mobile-button-group .button {\n    flex-shrink: 0;\n    min-width: 80px;\n  }\n\n  /* Force task section buttons to display horizontally */\n  [data-testid=\"card-tasks\"] .space-y-3,\n  [data-testid=\"card-tasks\"] .flex-col {\n    display: flex !important;\n    flex-direction: row !important;\n    gap: 8px !important;\n    align-items: center !important;\n  }\n\n  /* Ensure task buttons container stays horizontal */\n  .tasks-header-buttons {\n    display: flex !important;\n    flex-direction: row !important;\n    gap: 8px !important;\n    align-items: center !important;\n    flex-wrap: nowrap !important;\n  }\n\n  /* Force horizontal layout for task buttons - strongest possible selectors */\n  @media (max-width: 768px) {\n    /* Target the specific task buttons container */\n    [data-testid=\"card-tasks\"] div[class*=\"space-y\"],\n    [data-testid=\"card-tasks\"] div[class*=\"flex-col\"],\n    [data-testid=\"card-tasks\"] .space-y-3,\n    [data-testid=\"card-tasks\"] .flex-col {\n      display: flex !important;\n      flex-direction: row !important;\n      gap: 8px !important;\n      align-items: center !important;\n      justify-content: flex-start !important;\n      flex-wrap: nowrap !important;\n    }\n\n    /* Target any parent containers that might be forcing column layout */\n    [data-testid=\"card-tasks\"] > div > div,\n    [data-testid=\"card-tasks\"] [role=\"group\"],\n    [data-testid=\"card-tasks\"] .tasks-header,\n    [data-testid=\"card-tasks\"] .task-buttons-container {\n      display: flex !important;\n      flex-direction: row !important;\n      gap: 8px !important;\n      align-items: center !important;\n      flex-wrap: nowrap !important;\n    }\n\n    /* Override any Tailwind classes that might be forcing vertical layout */\n    [data-testid=\"card-tasks\"] * {\n      flex-direction: row !important;\n    }\n\n    [data-testid=\"card-tasks\"] .space-y-1,\n    [data-testid=\"card-tasks\"] .space-y-2,\n    [data-testid=\"card-tasks\"] .space-y-3,\n    [data-testid=\"card-tasks\"] .space-y-4 {\n      display: flex !important;\n      flex-direction: row !important;\n      gap: 8px !important;\n      margin-top: 0 !important;\n      margin-bottom: 0 !important;\n    }\n\n    [data-testid=\"card-tasks\"] .space-y-1 > *,\n    [data-testid=\"card-tasks\"] .space-y-2 > *,\n    [data-testid=\"card-tasks\"] .space-y-3 > *,\n    [data-testid=\"card-tasks\"] .space-y-4 > * {\n      margin-top: 0 !important;\n      margin-bottom: 0 !important;\n    }\n  }\n\n  /* Mobile header optimizations */\n  [data-testid=\"header-main\"] .container {\n    padding-left: 1rem !important;\n    padding-right: 1rem !important;\n  }\n\n  /* Compact mobile buttons */\n  @media (max-width: 640px) {\n    .mobile-compact-btn {\n      padding: 0.25rem !important;\n      min-width: auto !important;\n    }\n\n    .mobile-compact-btn span {\n      display: none !important;\n    }\n  }\n\n  /* Task section button improvements for mobile */\n  @media (max-width: 768px) {\n    [data-testid=\"button-add-ai-task\"],\n    [data-testid=\"button-add-manual-task-plus\"],\n    [data-testid=\"button-auto-reschedule\"] {\n      height: 36px !important;\n      min-height: 36px !important;\n      max-height: 36px !important;\n      font-size: 14px !important;\n      white-space: nowrap;\n      flex-shrink: 0;\n      border-radius: 8px !important;\n    }\n\n    /* AI task button - minimal width with \"AI\" text and icon */\n    [data-testid=\"button-add-ai-task\"] {\n      min-width: 50px !important;\n      width: auto !important;\n      padding: 0 8px !important;\n    }\n\n    /* Manual task button - minimal width with just plus icon */\n    [data-testid=\"button-add-manual-task-plus\"] {\n      min-width: 36px !important;\n      width: 36px !important;\n      padding: 0 !important;\n    }\n\n    /* Auto reschedule button */\n    [data-testid=\"button-auto-reschedule\"] {\n      min-width: 36px !important;\n      width: 36px !important;\n      padding: 0 !important;\n    }\n  }\n\n  /* Extra small screens (iPhone SE and similar) */\n  @media (max-width: 375px) {\n    [data-testid=\"button-add-ai-task\"],\n    [data-testid=\"button-add-manual-task-plus\"],\n    [data-testid=\"button-auto-reschedule\"] {\n      height: 34px !important;\n      min-height: 34px !important;\n      max-height: 34px !important;\n      font-size: 13px !important;\n    }\n\n    [data-testid=\"button-auto-reschedule\"] {\n      min-width: 34px !important;\n      width: 34px !important;\n    }\n\n    [data-testid=\"button-add-ai-task\"],\n    [data-testid=\"button-add-manual-task-plus\"] {\n      min-width: 75px !important;\n      padding: 0 10px !important;\n    }\n  }\n\n  /* Upgrade modal mobile optimization */\n  .upgrade-modal-content {\n    margin: 0.5rem !important;\n    max-height: calc(100vh - 1rem) !important;\n    width: calc(100vw - 1rem) !important;\n    overflow-y: auto !important;\n    -webkit-overflow-scrolling: touch !important;\n    position: fixed !important;\n    top: 50% !important;\n    left: 50% !important;\n    transform: translate(-50%, -50%) !important;\n    z-index: 9999 !important;\n  }\n\n  /* Ensure modal content is scrollable on very small screens */\n  @media (max-height: 600px) {\n    .upgrade-modal-content {\n      max-height: 95vh !important;\n      overflow-y: scroll !important;\n    }\n  }\n\n  /* Fix modal body scrolling */\n  .upgrade-modal-content > * {\n    flex-shrink: 0;\n  }\n}\n\n\n@tailwind utilities;\n\n@keyframes shimmer {\n  0% {\n    transform: translateX(-100%);\n  }\n  100% {\n    transform: translateX(100%);\n  }\n}\n\n@keyframes shimmerInner {\n  0% {\n    transform: translateX(-100%) scale(0.8);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n    transform: translateX(0%) scale(1);\n  }\n  100% {\n    transform: translateX(100%) scale(0.8);\n    opacity: 0;\n  }\n}\n\n@keyframes shimmerOuter {\n  0% {\n    transform: translateX(-150%);\n    opacity: 0;\n  }\n  50% {\n    opacity: 1;\n  }\n  100% {\n    transform: translateX(150%);\n    opacity: 0;\n  }\n}\n\n.shimmer {\n  position: relative;\n  overflow: hidden;\n}\n\n.shimmer::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);\n  animation: shimmer 2s infinite;\n}\n\n.animate-shimmer {\n  animation: shimmer 3s linear infinite;\n}\n\n.animate-shimmer-inner {\n  animation: shimmerInner 3s ease-in-out infinite;\n}\n\n.animate-shimmer-outer {\n  animation: shimmerOuter 4s ease-in-out infinite 1s;\n}\n\n:root {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 6%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 6%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(212, 100%, 47%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 12%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(220, 14%, 96%);\n  --accent-foreground: hsl(222, 84%, 4%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(212, 100%, 47%);\n  --chart-1: hsl(212, 100%, 47%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(222, 84%, 6%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(212, 100%, 47%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217, 32%, 17%);\n  --sidebar-accent-foreground: hsl(212, 100%, 47%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(212, 100%, 47%);\n  --font-sans: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;\n  --font-serif: 'Playfair Display', 'Times New Roman', serif;\n  --font-mono: 'JetBrains Mono', 'SF Mono', Consolas, monospace;\n  --font-display: 'Inter', 'GT America', -apple-system, BlinkMacSystemFont, sans-serif;\n  --font-heading: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(212, 100%, 47% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00), 0px 1px 2px -1px hsl(195, 100%, 55% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00), 0px 1px 2px -1px hsl(195, 100%, 55% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00), 0px 2px 4px -1px hsl(195, 100%, 55% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00), 0px 4px 6px -1px hsl(195, 100%, 55% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00), 0px 8px 10px -1px hsl(195, 100%, 55% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(195, 100%, 55% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    background: linear-gradient(135deg, hsl(240, 5%, 4%) 0%, hsl(245, 8%, 6%) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .glass-card {\n    background: rgba(26, 26, 27, 0.8);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);\n  }\n\n  .holographic-glow {\n    box-shadow: 0 0 20px rgba(0, 212, 255, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  }\n\n  .workflow-river {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .pulse-urgent {\n    animation: pulse-urgent 1s infinite;\n  }\n\n  .floating-metric {\n    background: rgba(16, 185, 129, 0.1);\n    border: 1px solid rgba(16, 185, 129, 0.3);\n  }\n\n  .app-launcher-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n    gap: 1rem;\n  }\n\n  /* App icons - white in dark mode */\n  .app-launcher-grid img,\n  .glass-card img[src*=\"simple-icons\"],\n  .app-icon {\n    filter: brightness(0) saturate(100%) invert(1);\n  }\n\n  /* App icons - black in light mode */\n  .light .app-launcher-grid img,\n  .light .glass-card img[src*=\"simple-icons\"],\n  .light .app-icon {\n    filter: brightness(0) saturate(100%) invert(0);\n  }\n}\n\n@layer utilities {\n  @keyframes pulse-urgent {\n    0%, 100% {\n      box-shadow: inset 0 0 0 1px rgba(239, 68, 68, 0.4);\n    }\n    50% {\n      box-shadow: inset 0 0 0 2px rgba(239, 68, 68, 0.8);\n    }\n  }\n\n  @keyframes holographicShimmer {\n    0% {\n      background-position: -200% center;\n    }\n    100% {\n      background-position: 200% center;\n    }\n  }\n\n  .holographic-text {\n    background: linear-gradient(\n      90deg,\n      hsl(195, 100%, 55%),\n      hsl(263, 70%, 65%),\n      hsl(195, 100%, 55%)\n    );\n    background-size: 200% auto;\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: holographicShimmer 3s linear infinite;\n    font-family: var(--font-heading);\n    font-weight: 700;\n    letter-spacing: -0.03em;\n  }\n\n  .premium-text-gradient {\n    background: linear-gradient(\n      135deg,\n      hsl(210, 40%, 20%) 0%,\n      hsl(195, 100%, 55%) 30%,\n      hsl(263, 70%, 65%) 60%,\n      hsl(210, 40%, 25%) 100%\n    );\n    background-size: 300% 300%;\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: premiumGradientShift 8s ease-in-out infinite;\n    font-family: var(--font-heading);\n    font-weight: 800;\n    letter-spacing: -0.04em;\n  }\n\n  .premium-subtitle {\n    font-family: var(--font-heading);\n    font-weight: 600;\n    letter-spacing: -0.01em;\n    color: hsl(195, 100%, 65%);\n    text-shadow: 0 0 20px rgba(0, 212, 255, 0.3);\n  }\n\n  .futuristic-logo {\n    background: linear-gradient(135deg,\n      rgba(0, 212, 255, 0.1) 0%,\n      rgba(147, 51, 234, 0.15) 50%,\n      rgba(0, 212, 255, 0.1) 100%);\n    border: 2px solid transparent;\n    background-clip: padding-box;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .futuristic-logo::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(45deg,\n      hsl(195, 100%, 55%),\n      hsl(263, 70%, 65%),\n      hsl(195, 100%, 55%));\n    background-size: 200% 200%;\n    animation: holographicShimmer 4s linear infinite;\n    z-index: -1;\n    margin: -2px;\n    border-radius: inherit;\n  }\n\n  .logo-glow {\n    filter: drop-shadow(0 0 8px rgba(0, 212, 255, 0.3))\n            drop-shadow(0 0 16px rgba(0, 212, 255, 0.2));\n    transition: all 0.3s ease;\n  }\n\n  .logo-glow:hover {\n    filter: drop-shadow(0 0 12px rgba(0, 212, 255, 0.5))\n            drop-shadow(0 0 24px rgba(0, 212, 255, 0.3));\n    transform: scale(1.02);\n  }\n\n  .premium-logo-container {\n    background: linear-gradient(135deg,\n      rgba(33, 150, 243, 0.05) 0%,\n      rgba(63, 81, 181, 0.08) 50%,\n      rgba(33, 150, 243, 0.05) 100%);\n    border: 1px solid rgba(33, 150, 243, 0.2);\n    backdrop-filter: blur(20px);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .glass-card {\n    background: rgba(15, 23, 42, 0.8);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(30, 41, 59, 0.5);\n    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);\n  }\n\n  .professional-header {\n    font-family: var(--font-heading);\n    font-weight: 700;\n    letter-spacing: -0.035em;\n    line-height: 1.1;\n  }\n\n  .professional-text {\n    font-family: var(--font-sans);\n    font-weight: 450;\n    line-height: 1.5;\n    letter-spacing: -0.01em;\n  }\n\n  .bold-heading {\n    font-family: var(--font-heading);\n    font-weight: 800;\n    letter-spacing: -0.04em;\n    line-height: 1.05;\n  }\n\n  .medium-heading {\n    font-family: var(--font-heading);\n    font-weight: 650;\n    letter-spacing: -0.02em;\n    line-height: 1.2;\n  }\n\n  .systematic-text {\n    font-family: var(--font-sans);\n    font-weight: 500;\n    letter-spacing: -0.005em;\n    line-height: 1.4;\n  }\n\n  .caption-text {\n    font-family: var(--font-sans);\n    font-weight: 500;\n    font-size: 0.875rem;\n    letter-spacing: 0.01em;\n    text-transform: uppercase;\n  }\n\n  .premium-logo-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(45deg,\n      transparent 30%,\n      rgba(0, 212, 255, 0.1) 50%,\n      transparent 70%);\n    animation: premiumShimmer 6s linear infinite;\n    z-index: 0;\n  }\n\n  .premium-logo-glow {\n    filter: drop-shadow(0 0 20px rgba(0, 212, 255, 0.2));\n    transition: all 0.4s ease;\n  }\n\n  .premium-cta-button {\n    background: linear-gradient(135deg,\n      hsl(195, 100%, 45%) 0%,\n      hsl(263, 70%, 55%) 100%);\n    border: none;\n    border-radius: 12px;\n    color: white;\n    font-family: var(--font-sans);\n    position: relative;\n    overflow: hidden;\n    transition: all 0.3s ease;\n    box-shadow: 0 8px 32px rgba(0, 212, 255, 0.3);\n  }\n\n  .premium-cta-button::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg,\n      transparent,\n      rgba(255, 255, 255, 0.2),\n      transparent);\n    transition: left 0.6s ease;\n  }\n\n  .premium-cta-button:hover::before {\n    left: 100%;\n  }\n\n  .premium-cta-button:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 12px 40px rgba(0, 212, 255, 0.4);\n  }\n\n  .floating-particle {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes premiumGradientShift {\n    0%, 100% { background-position: 0% 50%; }\n    50% { background-position: 100% 50%; }\n  }\n\n  @keyframes premiumShimmer {\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(200%); }\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px) translateX(0px); opacity: 0.3; }\n    25% { transform: translateY(-20px) translateX(10px); opacity: 0.7; }\n    50% { transform: translateY(-40px) translateX(-5px); opacity: 1; }\n    75% { transform: translateY(-20px) translateX(-10px); opacity: 0.7; }\n  }\n\n  @keyframes goldenShine {\n    0% {\n      background-position: -200% center;\n    }\n    100% {\n      background-position: 200% center;\n    }\n  }\n\n  .golden-shine-text {\n    background: linear-gradient(\n      90deg,\n      #f59e0b 25%,\n      #fbbf24 50%,\n      #fde047 75%,\n      #f59e0b 100%\n    );\n    background-size: 200% auto;\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n    animation: goldenShine 4s linear infinite;\n  }\n\n  /* Custom animations for the dashboard */\n  .task-complete-celebration {\n    animation: taskComplete 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55);\n  }\n\n  @keyframes taskComplete {\n    0% { transform: scale(1); }\n    50% { transform: scale(1.05); }\n    100% { transform: scale(1); }\n  }\n\n  .gentle-hover {\n    transition: all 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .gentle-hover:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .gentle-press {\n    transition: transform 0.1s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .gentle-press:active {\n    transform: scale(0.98);\n  }\n\n  /* Keep only urgent pulse animation */\n  .pulse-urgent {\n    animation: pulse-urgent 1s infinite;\n  }\n\n  /* Mobile button consistency utilities */\n  .mobile-consistent-btn {\n    height: 36px !important;\n    min-height: 36px !important;\n    max-height: 36px !important;\n    font-size: 14px !important;\n    border-radius: 8px !important;\n    flex-shrink: 0;\n    white-space: nowrap;\n  }\n\n  .mobile-consistent-btn-text {\n    padding: 0 12px !important;\n    min-width: 80px !important;\n  }\n\n  .mobile-consistent-btn-icon {\n    min-width: 36px !important;\n    width: 36px !important;\n    padding: 0 !important;\n  }\n\n  @media (max-width: 375px) {\n    .mobile-consistent-btn {\n      height: 34px !important;\n      min-height: 34px !important;\n      max-height: 34px !important;\n      font-size: 13px !important;\n    }\n\n    .mobile-consistent-btn-text {\n      min-width: 75px !important;\n      padding: 0 10px !important;\n    }\n\n    .mobile-consistent-btn-icon {\n      min-width: 34px !important;\n      width: 34px !important;\n    }\n  }\n\n  @keyframes pulse-urgent {\n    0%, 100% {\n      box-shadow: inset 0 0 0 1px rgba(239, 68, 68, 0.4);\n    }\n    50% {\n      box-shadow: inset 0 0 0 2px rgba(239, 68, 68, 0.8);\n    }\n  }\n\n/* Vertical taskbar hover animations */\n.app-icon-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.app-icon-hover:hover {\n  transform: scale(1.25);\n  filter: brightness(1.2);\n}\n\n/* Prevent text wrapping in time displays */\n.workflow-river .whitespace-nowrap {\n  white-space: nowrap !important;\n}\n\n/* Custom scrollbar for dark theme compatibility */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground) / 0.3);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--muted-foreground) / 0.5);\n}\n\n/* App icon theme-aware styling */\n.app-icon-light {\n  filter: brightness(0) saturate(100%) invert(0.2) sepia(1) saturate(1.5) hue-rotate(0deg) contrast(1.1);\n}\n\n.dark .app-icon-light {\n  filter: brightness(0) saturate(100%) invert(0.8) sepia(1) saturate(1.5) hue-rotate(0deg) contrast(1.1);\n}\n}\n\n/* Enhanced animations for intro page */\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px) translateX(0px);\n    opacity: 0.3;\n  }\n  25% {\n    transform: translateY(-15px) translateX(8px);\n    opacity: 0.8;\n  }\n  50% {\n    transform: translateY(-30px) translateX(0px);\n    opacity: 1;\n  }\n  75% {\n    transform: translateY(-15px) translateX(-8px);\n    opacity: 0.8;\n  }\n}\n\n@keyframes spin-slow {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes flowingLight {\n  0% {\n    transform: translateX(-100%) scale(0.8);\n    opacity: 0;\n  }\n  30% {\n    opacity: 0.9;\n    transform: translateX(-10%) scale(1.1);\n  }\n  70% {\n    opacity: 0.9;\n    transform: translateX(10%) scale(1.1);\n  }\n  100% {\n    transform: translateX(100%) scale(0.8);\n    opacity: 0;\n  }\n}\n\n@keyframes outerGlow {\n  0% {\n    transform: translateX(-200%);\n    opacity: 0;\n  }\n  25% {\n    opacity: 0.7;\n  }\n  75% {\n    opacity: 0.7;\n  }\n  100% {\n    transform: translateX(200%);\n    opacity: 0;\n  }\n}\n\n.animate-float {\n  animation: float 8s ease-in-out infinite;\n}\n\n.animate-spin-slow {\n  animation: spin-slow 20s linear infinite;\n}\n\n.animate-flowing-light {\n  animation: flowingLight 3s ease-in-out infinite;\n}\n\n.animate-outer-glow {\n  animation: outerGlow 5s ease-in-out infinite 0.5s;\n}\n\n/* Enhanced glassmorphism effects */\n.backdrop-blur-lg {\n  backdrop-filter: blur(20px);\n}\n\n/* Gradient text improvements */\n.bg-clip-text {\n  -webkit-background-clip: text;\n  background-clip: text;\n}","size_bytes":26222},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BrowserNotificationManager.tsx":{"content":"\nimport { useEffect, useState, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface WindowsNotificationManagerProps {\n  userId: string;\n}\n\nexport function WindowsNotificationManager({ userId }: WindowsNotificationManagerProps) {\n  const [permissionGranted, setPermissionGranted] = useState(false);\n  const [permissionRequested, setPermissionRequested] = useState(false);\n  const processedNotifications = useRef(new Set<string>());\n  const tabId = useRef(`tab-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);\n\n  // Request Windows notification permission - only on desktop devices\n  useEffect(() => {\n    // Simplified mobile detection - only exclude actual mobile devices\n    const isMobile = /Mobi|Android|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n    const isTablet = /iPad/i.test(navigator.userAgent);\n    \n    // Allow notifications on Windows/Mac desktop (including touch-enabled desktops)\n    const isDesktop = !isMobile && !isTablet;\n    \n    if ('Notification' in window && isDesktop) {\n      if (Notification.permission === 'granted') {\n        setPermissionGranted(true);\n      } else if (Notification.permission === 'default' && !permissionRequested) {\n        setPermissionRequested(true);\n        Notification.requestPermission().then((permission) => {\n          setPermissionGranted(permission === 'granted');\n        });\n      }\n    }\n  }, [permissionRequested]);\n\n  // Poll for Windows notifications\n  const { data: notifications } = useQuery({\n    queryKey: ['notifications', userId],\n    queryFn: async () => {\n      const response = await fetch(`/api/notifications?userId=${userId}`);\n      if (!response.ok) throw new Error('Failed to fetch notifications');\n      return response.json();\n    },\n    refetchInterval: 5000, // Poll every 5 seconds\n    enabled: permissionGranted\n  });\n\n  useEffect(() => {\n    if (!permissionGranted || !notifications || !('Notification' in window)) return;\n\n    const processWindowsNotifications = async () => {\n      // Filter for Windows notifications that haven't been processed\n      const windowsNotifications = notifications.filter((notification: any) => \n        notification.type === 'browser_notification' && \n        notification.metadata?.browserNotification &&\n        !processedNotifications.current.has(notification.id)\n      );\n\n      for (const notification of windowsNotifications) {\n        // Cross-tab coordination using localStorage to prevent duplicates\n        const lockKey = `notification-lock-${notification.id}`;\n        const existingLock = localStorage.getItem(lockKey);\n\n        // If another tab already claimed this notification, skip it\n        if (existingLock && existingLock !== tabId.current) {\n          processedNotifications.current.add(notification.id);\n          continue;\n        }\n\n        // Claim the notification for this tab\n        localStorage.setItem(lockKey, tabId.current);\n\n        // Double-check that we won the race\n        if (localStorage.getItem(lockKey) !== tabId.current) {\n          processedNotifications.current.add(notification.id);\n          continue;\n        }\n\n        // Mark as processed to avoid duplicate notifications\n        processedNotifications.current.add(notification.id);\n\n        try {\n          // Show Windows notification directly\n          const windowsNotification = new Notification(notification.title, {\n            body: notification.description,\n            icon: '/favicon.ico',\n            tag: `task-reminder-${notification.metadata.taskId}`,\n            requireInteraction: true,\n            silent: false,\n            renotify: true\n          });\n\n          // Handle notification click\n          windowsNotification.onclick = () => {\n            window.focus();\n            windowsNotification.close();\n          };\n\n          // Auto-close after 10 seconds\n          setTimeout(() => {\n            windowsNotification.close();\n          }, 10000);\n\n          console.log(`[WindowsNotification] Windows notification shown for task: ${notification.metadata.taskId} from tab: ${tabId.current}`);\n\n        } catch (error) {\n          console.error('Windows notification failed:', error);\n        }\n\n        // Immediately mark this notification as dismissed so it doesn't show again\n        try {\n          const dismissResponse = await fetch(`/api/notifications/${notification.id}/dismiss`, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' }\n          });\n\n          if (!dismissResponse.ok) {\n            throw new Error(`HTTP ${dismissResponse.status}`);\n          }\n\n          console.log(`[WindowsNotification] Dismissed notification: ${notification.id}`);\n        } catch (error) {\n          console.error(`Failed to dismiss notification ${notification.id}:`, error);\n          // Keep the lock longer if dismiss fails to prevent duplicates\n          setTimeout(() => {\n            localStorage.removeItem(lockKey);\n          }, 15000);\n          continue; // Skip the normal cleanup\n        }\n\n        // Clean up the lock after a delay\n        setTimeout(() => {\n          localStorage.removeItem(lockKey);\n        }, 5000);\n      }\n    };\n\n    processWindowsNotifications();\n  }, [notifications, permissionGranted]);\n\n  // Clean up old processed notifications to prevent memory leaks\n  useEffect(() => {\n    const cleanup = setInterval(() => {\n      // Keep only the last 100 processed notification IDs\n      if (processedNotifications.current.size > 100) {\n        const processed = Array.from(processedNotifications.current);\n        processedNotifications.current = new Set(processed.slice(-50));\n      }\n    }, 300000); // Every 5 minutes\n\n    return () => clearInterval(cleanup);\n  }, []);\n\n  // Simplified mobile/desktop detection for UI display\n  const isMobile = /Mobi|Android|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  const isTablet = /iPad/i.test(navigator.userAgent);\n  const isDesktop = !isMobile && !isTablet;\n  \n  // Show permission request UI only on desktop devices\n  if ('Notification' in window && Notification.permission !== 'granted' && isDesktop) {\n    return (\n      <div className=\"fixed bottom-4 right-4 bg-blue-600 text-white p-4 rounded-lg shadow-lg max-w-sm z-50\">\n        <h4 className=\"font-semibold mb-2\">Enable Windows Notifications</h4>\n        <p className=\"text-sm mb-3\">\n          Get native Windows notifications for task deadlines that appear in your Windows notification center.\n        </p>\n        <div className=\"space-y-2\">\n          <button\n            onClick={async () => {\n              setPermissionRequested(true);\n              const permission = await Notification.requestPermission();\n              setPermissionGranted(permission === 'granted');\n\n              // Test notification immediately if granted\n              if (permission === 'granted') {\n                new Notification('FlowHub Windows Notifications Enabled! 🎉', {\n                  body: 'You will now receive Windows notifications for your task deadlines in the Windows notification center.',\n                  icon: '/favicon.ico',\n                  requireInteraction: true,\n                  tag: 'flowhub-test'\n                });\n              }\n            }}\n            className=\"w-full bg-white text-blue-600 px-3 py-2 rounded text-sm font-medium hover:bg-gray-100\"\n          >\n            Enable Windows Notifications\n          </button>\n          {Notification.permission === 'denied' && (\n            <p className=\"text-xs text-blue-200\">\n              Notifications are blocked. Please enable them in your browser settings for Windows notifications to work.\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Component doesn't render anything in normal operation\n  return null;\n}\n\n// Export with the old name for compatibility\nexport { WindowsNotificationManager as BrowserNotificationManager };\n","size_bytes":7955},"client/src/components/TextLoop.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface TextLoopProps {\n  messages: string[];\n  duration?: number;\n  className?: string;\n}\n\nexport function TextLoop({ messages, duration = 3000, className = '' }: TextLoopProps) {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isVisible, setIsVisible] = useState(true);\n  const [isPaused, setIsPaused] = useState(false);\n\n  useEffect(() => {\n    if (isPaused || messages.length <= 1) return;\n\n    const interval = setInterval(() => {\n      setIsVisible(false);\n      \n      setTimeout(() => {\n        setCurrentIndex((prev) => (prev + 1) % messages.length);\n        setIsVisible(true);\n      }, 300);\n    }, duration);\n\n    return () => clearInterval(interval);\n  }, [messages, duration, isPaused]);\n\n  // Respect user's motion preferences\n  useEffect(() => {\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    if (prefersReducedMotion) {\n      setIsPaused(true);\n      setCurrentIndex(0);\n    }\n  }, []);\n\n  return (\n    <div \n      className={`relative ${className}`}\n      onMouseEnter={() => setIsPaused(true)}\n      onMouseLeave={() => setIsPaused(false)}\n    >\n      {/* Static text for screen readers */}\n      <span className=\"sr-only\">\n        FlowHub helps you: {messages.join(', ')}\n      </span>\n      \n      {/* Fixed height container to prevent shifting */}\n      <div className=\"h-[2.4em] flex items-center justify-center\">\n        {/* Animated text */}\n        <span \n          aria-hidden=\"true\"\n          className={`block transition-all duration-300 ease-in-out transform text-center ${\n            isVisible \n              ? 'opacity-100 translate-y-0' \n              : 'opacity-0 translate-y-2'\n          }`}\n        >\n          {messages[currentIndex]}\n        </span>\n      </div>\n    </div>\n  );\n}","size_bytes":1836},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profilePicture?: string;\n  profileImageUrl?: string;\n}\n\ninterface AuthResponse {\n  user?: User;\n}\n\nexport function useAuth() {\n  return useQuery<AuthResponse>({\n    queryKey: [\"/api/auth/me\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/me\", {\n          credentials: \"include\",\n        });\n        \n        if (!response.ok) {\n          // Clear any stale auth state on failed requests\n          localStorage.removeItem('user_auth');\n          return { user: undefined };\n        }\n        \n        const data = await response.json();\n        \n        // Always store fresh user data in localStorage\n        if (data.user) {\n          localStorage.setItem('user_auth', JSON.stringify(data.user));\n        } else {\n          localStorage.removeItem('user_auth');\n        }\n        \n        return data;\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('user_auth');\n        return { user: undefined };\n      }\n    },\n    retry: false,\n    staleTime: 1000 * 10, // Very short cache for immediate updates\n    refetchOnWindowFocus: true,\n    refetchInterval: 1000 * 30, // Check auth every 30 seconds for better reactivity\n  });\n}\n\nexport function useCurrentUser() {\n  const { data, isLoading, error } = useAuth();\n  \n  return {\n    user: data?.user,\n    isLoading,\n    isAuthenticated: !!data?.user,\n    error\n  };\n}","size_bytes":1575},"client/src/hooks/useMetrics.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { UserMetrics, InsertUserMetrics, UserAppLink } from \"@shared/schema\";\n\nconst MOCK_USER_ID = \"demo-user\";\n\nexport function useMetrics() {\n  return useQuery<UserMetrics>({\n    queryKey: [\"/api/metrics\", { userId: MOCK_USER_ID }],\n  });\n}\n\nexport function useWellnessInsights() {\n  return useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/wellness/insights\", {\n        userId: MOCK_USER_ID,\n      });\n    },\n  });\n}\n\nexport function useConnectedApps() {\n  return useQuery({\n    queryKey: [\"/api/connected-apps\", { userId: MOCK_USER_ID }],\n  });\n}\n\nexport function useAIInsights() {\n  return useQuery({\n    queryKey: [\"/api/ai-insights\", { userId: MOCK_USER_ID }],\n  });\n}\n\nexport function useApplyAIInsight() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (insightId: string) => {\n      return await apiRequest(\"POST\", `/api/ai-insights/${insightId}/apply`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-insights\"] });\n    },\n  });\n}\n\nexport function useDismissAIInsight() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (insightId: string) => {\n      return await apiRequest(\"POST\", `/api/ai-insights/${insightId}/dismiss`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai-insights\"] });\n    },\n  });\n}\n\nexport function useUserAppLinks() {\n  return useQuery<UserAppLink[]>({\n    queryKey: [\"/api/user-app-links\", \"demo-user\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/user-app-links?userId=demo-user`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch user app links');\n      }\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateUserAppLink() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (linkData: { name: string; url: string; logo?: string }) => {\n      return await apiRequest(\"POST\", \"/api/user-app-links\", {\n        userId: \"demo-user\",\n        ...linkData,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n    },\n  });\n}","size_bytes":2440},"client/src/hooks/useNotifications.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Notification } from \"@shared/schema\";\n\nconst MOCK_USER_ID = \"demo-user\";\n\nexport function useNotifications() {\n  return useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\", { userId: MOCK_USER_ID }],\n    queryFn: async () => {\n      try {\n        const response = await fetch(`/api/notifications?userId=${MOCK_USER_ID}`);\n        if (!response.ok) {\n          throw new Error('Failed to fetch notifications');\n        }\n        return response.json();\n      } catch (error) {\n        // Return sample data if API fails\n        return [\n          {\n            id: \"1\",\n            title: \"Meeting with Product Team\",\n            description: \"Quarterly planning meeting scheduled for 3 PM\",\n            type: \"important\",\n            sourceApp: \"calendar\",\n            isRead: false,\n            isDismissed: false,\n            createdAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago\n            aiSummary: \"Important quarterly planning meeting with the product team\"\n          },\n          {\n            id: \"2\",\n            title: \"New email from client\",\n            description: \"Project update and feedback request\",\n            type: \"urgent\",\n            sourceApp: \"gmail\",\n            isRead: false,\n            isDismissed: false,\n            createdAt: new Date(Date.now() - 1000 * 60 * 15).toISOString(), // 15 minutes ago\n            aiSummary: \"Client has provided feedback on the latest project deliverables\"\n          },\n          {\n            id: \"3\",\n            title: \"Slack message from team\",\n            description: \"New discussion in #development channel\",\n            type: \"informational\",\n            sourceApp: \"slack\",\n            isRead: false,\n            isDismissed: false,\n            createdAt: new Date(Date.now() - 1000 * 60 * 5).toISOString(), // 5 minutes ago\n            aiSummary: \"Team discussion about upcoming sprint planning\"\n          }\n        ].map(notification => ({ \n          ...notification, \n          userId: MOCK_USER_ID, \n          metadata: {}, \n          actionableInsights: [] as string[],\n          createdAt: new Date(notification.createdAt),\n          type: notification.type as \"urgent\" | \"important\" | \"informational\",\n          sourceApp: notification.sourceApp as \"gmail\" | \"slack\" | \"calendar\" | \"notion\" | \"trello\" | \"zoom\" | \"manual\"\n        })) as Notification[];\n      }\n    },\n    refetchInterval: 5000, // Poll every 5 seconds for new notifications\n    refetchIntervalInBackground: true,\n  });\n}\n\nexport function useMarkNotificationRead() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (notificationId: string) => {\n      return await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n}\n\nexport function useDismissNotification() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (notificationId: string) => {\n      return await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/dismiss`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n}\n\nexport function useAnalyzeNotification() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      title,\n      content,\n      sourceApp,\n    }: {\n      title: string;\n      content: string;\n      sourceApp: string;\n    }) => {\n      return await apiRequest(\"POST\", \"/api/notifications/analyze\", {\n        title,\n        content,\n        sourceApp,\n        userId: MOCK_USER_ID,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n}","size_bytes":3931},"client/src/hooks/useTasks.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Task, InsertTask } from \"@shared/schema\";\n\nconst MOCK_USER_ID = \"demo-user\";\n\nexport function useTasks() {\n  return useQuery<Task[]>({\n    queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }],\n    queryFn: async () => {\n      const response = await fetch(`/api/tasks?userId=${MOCK_USER_ID}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      return response.json();\n    },\n    refetchInterval: 5000, // Poll every 5 seconds to catch priority changes\n    refetchIntervalInBackground: true,\n  });\n}\n\nexport function useCreateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (task: InsertTask) => {\n      return await apiRequest(\"POST\", \"/api/tasks\", task);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useCreateTaskFromText() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ userId, naturalLanguageInput }: { userId: string; naturalLanguageInput: string }) => {\n      const response = await fetch(\"/api/tasks/create-from-text\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId,\n          naturalLanguageInput,\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to create task from natural language\");\n      }\n      \n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useStartTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId: string) => {\n      return await apiRequest(\"POST\", `/api/tasks/${taskId}/start`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useStopTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId: string) => {\n      return await apiRequest(\"POST\", `/api/tasks/${taskId}/stop`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useUpdateTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: Partial<Task> }) => {\n      return await apiRequest(\"PATCH\", `/api/tasks/${id}`, updates);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useOptimizeWorkflow() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/workflow/optimize\", {\n        userId: MOCK_USER_ID,\n      });\n    },\n    onSuccess: () => {\n      // Invalidate tasks to refresh with new priorities\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useDeleteTask() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (taskId: string) => {\n      return await apiRequest(\"DELETE\", `/api/tasks/${taskId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n\nexport function useAutoReschedule() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/workflow/auto-reschedule\", {\n        userId: MOCK_USER_ID,\n      });\n    },\n    onSuccess: () => {\n      // Invalidate tasks to refresh with new rescheduled times\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: MOCK_USER_ID }] });\n    },\n  });\n}\n","size_bytes":4120},"client/src/lib/auth.ts":{"content":"\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  profileImageUrl?: string;\n}\n\ninterface AuthResponse {\n  success: boolean;\n  user?: User;\n  message: string;\n}\n\nclass AuthService {\n  private baseUrl = '/auth';\n\n  async login(email: string, password: string): Promise<AuthResponse> {\n    const response = await fetch(`${this.baseUrl}/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include', // Include cookies\n      body: JSON.stringify({ email, password }),\n    });\n\n    return response.json();\n  }\n\n  async register(name: string, email: string, password: string): Promise<AuthResponse> {\n    const response = await fetch(`${this.baseUrl}/register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      credentials: 'include',\n      body: JSON.stringify({ name, email, password }),\n    });\n\n    return response.json();\n  }\n\n  async logout(): Promise<{ success: boolean; message: string }> {\n    const response = await fetch(`${this.baseUrl}/logout`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    return response.json();\n  }\n\n  async refreshToken(): Promise<{ success: boolean; message: string }> {\n    const response = await fetch(`${this.baseUrl}/refresh`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    return response.json();\n  }\n\n  async getCurrentUser(): Promise<{ user?: User }> {\n    try {\n      const response = await fetch(`${this.baseUrl}/me`, {\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        return response.json();\n      }\n      return {};\n    } catch (error) {\n      console.error('Failed to get current user:', error);\n      return {};\n    }\n  }\n\n  // Auto-refresh token when API calls fail with 401\n  async authenticatedFetch(url: string, options: RequestInit = {}): Promise<Response> {\n    const response = await fetch(url, {\n      ...options,\n      credentials: 'include',\n    });\n\n    // If token expired, try to refresh and retry\n    if (response.status === 401) {\n      const refreshResult = await this.refreshToken();\n      \n      if (refreshResult.success) {\n        // Retry the original request\n        return fetch(url, {\n          ...options,\n          credentials: 'include',\n        });\n      }\n    }\n\n    return response;\n  }\n\n  // Check if user is authenticated by trying to get current user\n  async isAuthenticated(): Promise<boolean> {\n    const result = await this.getCurrentUser();\n    return !!result.user;\n  }\n}\n\nexport const authService = new AuthService();\nexport type { User, AuthResponse };\n","size_bytes":2656},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/types.ts":{"content":"export interface AppStatus {\n  id: string;\n  name: string;\n  type: \"gmail\" | \"slack\" | \"notion\" | \"trello\" | \"zoom\" | \"calendar\";\n  isConnected: boolean;\n  hasNotifications: boolean;\n  icon: string;\n  color: string;\n}\n\nexport interface TaskPriority {\n  level: \"urgent\" | \"important\" | \"normal\";\n  color: string;\n  bgColor: string;\n}\n\nexport interface WorkflowTask {\n  id: string;\n  title: string;\n  description: string;\n  priority: \"urgent\" | \"important\" | \"normal\";\n  status: \"pending\" | \"in_progress\" | \"completed\" | \"paused\";\n  estimatedMinutes: number;\n  dueAt?: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n}\n\nexport interface NotificationItem {\n  id: string;\n  title: string;\n  description: string;\n  type: \"urgent\" | \"important\" | \"informational\";\n  sourceApp: string;\n  isRead: boolean;\n  createdAt: Date;\n  aiSummary?: string;\n}\n\nexport interface UserMetrics {\n  focusScore: number;\n  workloadCapacity: number;\n  stressLevel: \"low\" | \"medium\" | \"high\";\n  tasksCompleted: number;\n  activeHours: number;\n  todayProgress: number;\n  nextBreakIn: number;\n}\n\nexport interface AIInsight {\n  id: string;\n  type: \"deadline_alert\" | \"workflow_optimization\" | \"wellness_suggestion\";\n  title: string;\n  description: string;\n  priority: \"urgent\" | \"important\" | \"normal\";\n  actionable: boolean;\n  isApplied: boolean;\n  createdAt: Date;\n}\n","size_bytes":1337},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/EmailsConverted.tsx":{"content":"\nimport { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Header } from \"@/components/dashboard/Header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { ChevronDown, ChevronRight, Mail } from \"lucide-react\";\n\ninterface ConvertedEmail {\n  id: string;\n  title: string;\n  description: string;\n  sourceApp: string;\n  metadata?: {\n    emailId?: string;\n    from?: string;\n    subject?: string;\n    convertedAt?: string;\n    taskId?: string;\n    taskTitle?: string;\n    originalContent?: string;\n  };\n  createdAt: string;\n}\n\nexport default function EmailsConverted() {\n  const [selectedEmails, setSelectedEmails] = useState<string[]>([]);\n  const [expandedEmail, setExpandedEmail] = useState<string | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch converted emails (notifications with email-to-task conversions) with userId for security\n  const { data: convertedEmails = [], isLoading } = useQuery({\n    queryKey: ['convertedEmails', 'demo-user'],\n    queryFn: async () => {\n      const response = await fetch('/api/notifications?type=email_converted&userId=demo-user');\n      if (!response.ok) throw new Error('Failed to fetch converted emails');\n      return response.json();\n    }\n  });\n\n  // Delete selected emails mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (emailIds: string[]) => {\n      const response = await fetch('/api/notifications/bulk-delete', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ids: emailIds })\n      });\n      if (!response.ok) throw new Error('Failed to delete emails');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['convertedEmails'] });\n      setSelectedEmails([]);\n    }\n  });\n\n  // Retrieve emails back to notification section\n  const retrieveMutation = useMutation({\n    mutationFn: async (emailIds: string[]) => {\n      const response = await fetch('/api/notifications/retrieve-emails', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ ids: emailIds })\n      });\n      if (!response.ok) throw new Error('Failed to retrieve emails');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['convertedEmails'] });\n      queryClient.invalidateQueries({ queryKey: ['notifications'] });\n      setSelectedEmails([]);\n    }\n  });\n\n  const handleSelectAll = () => {\n    if (selectedEmails.length === convertedEmails.length) {\n      setSelectedEmails([]);\n    } else {\n      setSelectedEmails(convertedEmails.map((email: ConvertedEmail) => email.id));\n    }\n  };\n\n  const handleSelectEmail = (emailId: string) => {\n    setSelectedEmails(prev => \n      prev.includes(emailId) \n        ? prev.filter(id => id !== emailId)\n        : [...prev, emailId]\n    );\n  };\n\n  const handleDeleteSelected = () => {\n    if (selectedEmails.length > 0) {\n      deleteMutation.mutate(selectedEmails);\n    }\n  };\n\n  const handleRetrieveSelected = () => {\n    if (selectedEmails.length > 0) {\n      retrieveMutation.mutate(selectedEmails);\n    }\n  };\n\n  const handleRetrieveIndividual = (emailId: string) => {\n    retrieveMutation.mutate([emailId]);\n  };\n\n  const handleEmailClick = (emailId: string) => {\n    setExpandedEmail(expandedEmail === emailId ? null : emailId);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-6 pt-8 pb-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <Header />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 pt-6 md:pt-8 pb-8\">\n          <div className=\"space-y-6\">\n          {/* Page Header */}\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n            <div>\n              <h1 className=\"text-2xl md:text-3xl font-bold\">Emails Converted to Tasks</h1>\n              <p className=\"text-muted-foreground mt-2 text-sm md:text-base\">\n                Track and manage emails that have been successfully converted to actionable tasks\n              </p>\n            </div>\n            <Badge variant=\"secondary\" className=\"text-sm md:text-lg px-3 md:px-4 py-1 md:py-2 self-start sm:self-auto\">\n              {convertedEmails.length} Total Conversions\n            </Badge>\n          </div>\n\n          {/* Bulk Actions */}\n          {convertedEmails.length > 0 && (\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Checkbox\n                      checked={selectedEmails.length === convertedEmails.length}\n                      onCheckedChange={handleSelectAll}\n                    />\n                    <span className=\"text-sm\">\n                      {selectedEmails.length === 0 \n                        ? \"Select all emails\" \n                        : `${selectedEmails.length} of ${convertedEmails.length} selected`\n                      }\n                    </span>\n                  </div>\n                  <div className=\"flex flex-col sm:flex-row gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleRetrieveSelected}\n                      disabled={selectedEmails.length === 0 || retrieveMutation.isPending}\n                      className=\"text-xs sm:text-sm\"\n                    >\n                      {retrieveMutation.isPending ? \"Retrieving...\" : \n                        selectedEmails.length > 0 ? `Retrieve Selected (${selectedEmails.length})` : \"Retrieve Selected\"\n                      }\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={handleDeleteSelected}\n                      disabled={selectedEmails.length === 0 || deleteMutation.isPending}\n                      className=\"text-xs sm:text-sm\"\n                    >\n                      {deleteMutation.isPending ? \"Deleting...\" : \n                        selectedEmails.length > 0 ? `Delete Selected (${selectedEmails.length})` : \"Delete Selected\"\n                      }\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Converted Emails List */}\n          <div className=\"space-y-2\">\n            {convertedEmails.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"text-6xl mb-4\">📬</div>\n                  <h3 className=\"text-xl font-semibold mb-2\">No Converted Emails Yet</h3>\n                  <p className=\"text-muted-foreground\">\n                    Start converting emails to tasks to see them listed here. \n                    They'll be automatically moved from your notification feed once converted.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              convertedEmails.map((email: ConvertedEmail) => {\n                const isExpanded = expandedEmail === email.id;\n                const subject = email.metadata?.subject || email.metadata?.taskTitle || email.title;\n                const from = email.metadata?.from || \"Unknown Sender\";\n                const convertedAt = formatDate(email.metadata?.convertedAt || email.createdAt);\n                \n                return (\n                  <Card key={email.id} className=\"transition-all hover:shadow-md border dark:border-gray-700\">\n                    {/* Narrow Email Header */}\n                    <div \n                      className=\"flex items-center justify-between p-4 cursor-pointer hover:bg-muted/50 transition-colors\"\n                      onClick={() => handleEmailClick(email.id)}\n                    >\n                      <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                        <Checkbox\n                          checked={selectedEmails.includes(email.id)}\n                          onCheckedChange={() => handleSelectEmail(email.id)}\n                          onClick={(e) => e.stopPropagation()}\n                        />\n                        \n                        <Mail className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\n                        \n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-medium text-sm truncate\">\n                            {subject}\n                          </h3>\n                          <p className=\"text-xs text-muted-foreground truncate\">\n                            From: {from} → Converted to: {email.metadata?.taskTitle || \"Task\"}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          system\n                        </Badge>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {convertedAt}\n                        </span>\n                        {isExpanded ? (\n                          <ChevronDown className=\"w-4 h-4 text-muted-foreground\" />\n                        ) : (\n                          <ChevronRight className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Expanded Content */}\n                    {isExpanded && (\n                      <div className=\"border-t dark:border-gray-700 bg-muted/20\">\n                        <div className=\"p-4 space-y-4\">\n                          {/* Email Content Section */}\n                          <div>\n                            <h4 className=\"text-sm font-medium text-muted-foreground mb-2\">Email Content:</h4>\n                            <div className=\"bg-background/50 p-3 rounded border\">\n                              <p className=\"text-sm whitespace-pre-wrap\">\n                                {email.metadata?.originalContent || email.description}\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Task Details Section */}\n                          <div className=\"space-y-2\">\n                            <h4 className=\"text-sm font-medium text-muted-foreground\">Task Details:</h4>\n                            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                              <div>\n                                <label className=\"text-xs font-medium text-muted-foreground\">Title:</label>\n                                <p className=\"text-sm\">{email.metadata?.taskTitle || \"N/A\"}</p>\n                              </div>\n                              <div>\n                                <label className=\"text-xs font-medium text-muted-foreground\">Status:</label>\n                                <p className=\"text-sm\">pending</p>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Task Status Badge */}\n                          {email.metadata?.taskId && (\n                            <div className=\"pt-2 border-t\">\n                              <Badge variant=\"default\" className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                                ✅ Converted to Task #{email.metadata.taskId.slice(-8)}\n                              </Badge>\n                            </div>\n                          )}\n\n                          {/* Individual Actions */}\n                          <div className=\"pt-3 border-t flex space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleRetrieveIndividual(email.id)}\n                              disabled={retrieveMutation.isPending}\n                              className=\"text-xs\"\n                            >\n                              Retrieve to Notifications\n                            </Button>\n                            <Button\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => deleteMutation.mutate([email.id])}\n                              disabled={deleteMutation.isPending}\n                              className=\"text-xs\"\n                            >\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                );\n              })\n            )}\n          </div>\n        </div>\n      </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13897},"client/src/pages/Feedback.tsx":{"content":"\nimport { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { Header } from \"@/components/dashboard/Header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MessageCircle, Send, CheckCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Feedback() {\n  const [feedback, setFeedback] = useState('');\n  const [submitted, setSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  // Submit feedback mutation\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (feedbackText: string) => {\n      const response = await fetch('/api/feedback/submit', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          userId: 'demo-user',\n          feedback: feedbackText,\n          timestamp: new Date().toISOString()\n        })\n      });\n      if (!response.ok) throw new Error('Failed to submit feedback');\n      return response.json();\n    },\n    onSuccess: () => {\n      setSubmitted(true);\n      setFeedback('');\n      toast({\n        title: \"Feedback Sent!\",\n        description: \"Thank you for your feedback. We'll review it and get back to you soon.\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send feedback. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!feedback.trim()) {\n      toast({\n        title: \"Empty Feedback\",\n        description: \"Please write your feedback before submitting.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    if (feedback.trim().length < 10) {\n      toast({\n        title: \"Feedback Too Short\",\n        description: \"Please provide more detailed feedback (at least 10 characters).\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    submitFeedbackMutation.mutate(feedback);\n  };\n\n  const handleNewFeedback = () => {\n    setSubmitted(false);\n    setFeedback('');\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <Header />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-4xl mx-auto px-4 md:px-6 pt-6 md:pt-8 pb-8\">\n          <div className=\"space-y-6\">\n            {/* Page Header */}\n            <div className=\"text-center space-y-4\">\n              <div className=\"flex items-center justify-center space-x-3\">\n                <MessageCircle className=\"w-8 h-8 text-primary\" />\n                <h1 className=\"text-2xl md:text-3xl font-bold\">Feedback</h1>\n              </div>\n              <p className=\"text-muted-foreground text-sm md:text-base max-w-2xl mx-auto\">\n                Help us improve FlowHub by sharing your thoughts, suggestions, or reporting any issues\n              </p>\n            </div>\n\n            {!submitted ? (\n              /* Feedback Form */\n              <Card className=\"max-w-2xl mx-auto\">\n                <CardHeader>\n                  <CardTitle>\n                    Share Your Feedback\n                  </CardTitle>\n                  <CardDescription>\n                    Your feedback helps us make FlowHub better for everyone. All feedback is sent directly to our development team.\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label htmlFor=\"feedback\" className=\"text-sm font-medium\">\n                      Your Feedback\n                    </label>\n                    <textarea\n                      id=\"feedback\"\n                      placeholder=\"Tell us what you think about FlowHub. What features do you love? What could be improved? Any bugs or issues you've encountered?\"\n                      value={feedback}\n                      onChange={(e) => setFeedback(e.target.value)}\n                      className=\"w-full h-32 md:h-40 px-3 py-2 border border-input bg-background rounded-md text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 resize-none\"\n                      maxLength={1000}\n                    />\n                    <div className=\"flex justify-between items-center\">\n                      <p className=\"text-xs text-muted-foreground\">\n                        Minimum 10 characters required\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {feedback.length}/1000\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3 pt-4\">\n                    <Button\n                      onClick={handleSubmit}\n                      disabled={submitFeedbackMutation.isPending || feedback.trim().length < 10}\n                      className=\"flex-1 sm:flex-initial\"\n                    >\n                      {submitFeedbackMutation.isPending ? (\n                        <>\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                          Sending...\n                        </>\n                      ) : (\n                        <>\n                          <Send className=\"w-4 h-4 mr-2\" />\n                          Send Feedback\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              /* Success State */\n              <Card className=\"max-w-2xl mx-auto border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"space-y-4\">\n                    <div className=\"mx-auto w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                      <CheckCircle className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <h3 className=\"text-xl font-semibold text-green-900 dark:text-green-100\">\n                        Feedback Sent Successfully!\n                      </h3>\n                      <p className=\"text-green-800 dark:text-green-200\">\n                        Thank you for taking the time to share your feedback. Our team will review it and get back to you if needed.\n                      </p>\n                    </div>\n                    <Button\n                      onClick={handleNewFeedback}\n                      variant=\"outline\"\n                      className=\"mt-4\"\n                    >\n                      Send Another Feedback\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Feedback Guidelines */}\n            <div className=\"max-w-2xl mx-auto space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Feedback Guidelines</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-start space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-xs mt-0.5\">💡</Badge>\n                      <p><strong>Feature Requests:</strong> Describe what you'd like to see and how it would help you</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-xs mt-0.5\">🐛</Badge>\n                      <p><strong>Bug Reports:</strong> Include steps to reproduce the issue and what you expected to happen</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-xs mt-0.5\">⭐</Badge>\n                      <p><strong>General Feedback:</strong> Share your overall experience and suggestions for improvement</p>\n                    </div>\n                    <div className=\"flex items-start space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-xs mt-0.5\">🔒</Badge>\n                      <p><strong>Privacy:</strong> Your feedback is sent securely and will only be used to improve FlowHub</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":8890},"client/src/pages/Landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { TextLoop } from \"@/components/TextLoop\";\nimport { ArrowRight } from \"lucide-react\";\n\nexport function Landing() {\n  const [, setLocation] = useLocation();\n  const [isVisible, setIsVisible] = useState(false);\n\n  const benefits = [\n    \"Turn emails into next steps\",\n    \"Auto-prioritize your day\", \n    \"Schedule itself, not you\",\n    \"Exec-ready status in seconds\",\n    \"Deadlines handled, not chased\",\n    \"Focus on what moves the needle\"\n  ];\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleSignInWithGoogle = async () => {\n    try {\n      // Trigger Google OAuth flow\n      const response = await fetch('/api/gmail/connect', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: 'demo-user' })\n      });\n\n      const data = await response.json();\n\n      if (data.authUrl) {\n        // Open OAuth popup\n        const popup = window.open(data.authUrl, 'google-auth', \n          'width=500,height=600,scrollbars=yes,resizable=yes');\n\n        // Listen for auth completion\n        const checkClosed = setInterval(() => {\n          if (popup?.closed) {\n            clearInterval(checkClosed);\n          }\n        }, 1000);\n\n        // Listen for OAuth callback message\n        window.addEventListener('message', (event) => {\n          if (event.origin !== window.location.origin) return;\n          \n          if (event.data.success && event.data.authenticated) {\n            // Authentication successful, redirect to dashboard\n            setLocation('/dashboard');\n          }\n\n          if (event.data.success) {\n            // Close popup and redirect to dashboard\n            popup?.close();\n            \n            // Redirect to dashboard after successful login\n            setLocation('/dashboard');\n          }\n        }, { once: true });\n      }\n    } catch (error) {\n      // Authentication error\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-indigo-950 relative overflow-hidden\">\n      {/* Subtle Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Soft gradient orbs */}\n        <div className=\"absolute top-1/4 -left-32 w-64 h-64 bg-gradient-to-br from-indigo-500/10 to-purple-500/10 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '6s' }} />\n        <div className=\"absolute bottom-1/4 -right-32 w-80 h-80 bg-gradient-to-br from-blue-500/8 to-cyan-500/8 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '5s', animationDelay: '2s' }} />\n        \n        {/* Premium noise texture overlay */}\n        <div className=\"absolute inset-0 opacity-[0.015]\" style={{\n          backgroundImage: `url(\"data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E\")`\n        }} />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen px-6 text-center max-w-4xl mx-auto\">\n        <div className={`transition-all duration-1000 transform ${\n          isVisible ? 'translate-y-0 opacity-100' : 'translate-y-12 opacity-0'\n        }`}>\n          \n          {/* Optional subtle wordmark */}\n          <div className=\"mb-4\">\n            <h1 className=\"text-2xl font-light text-white/60 tracking-[0.2em] uppercase mb-2\">\n              FlowHub\n            </h1>\n            <div className=\"w-16 h-px bg-gradient-to-r from-transparent via-white/20 to-transparent mx-auto\" />\n          </div>\n\n          {/* Hero Animated Benefits */}\n          <div className=\"mb-8\">\n            <TextLoop \n              messages={benefits}\n              duration={2800}\n              className=\"text-5xl md:text-6xl lg:text-7xl font-extralight text-white leading-tight tracking-tight flex items-center justify-center\"\n            />\n          </div>\n\n\n\n          {/* Primary CTA */}\n          <button\n            onClick={handleSignInWithGoogle}\n            className=\"bg-white/95 hover:bg-white text-slate-900 hover:text-slate-950 px-10 py-4 text-lg font-medium rounded-full transition-all duration-500 group hover:scale-105 hover:shadow-2xl hover:shadow-white/20 border-0 backdrop-blur-sm flex items-center justify-center gap-3 mx-auto\"\n            data-testid=\"button-sign-in-google\"\n          >\n            <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n              <path fill=\"currentColor\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n              <path fill=\"currentColor\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n              <path fill=\"currentColor\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n              <path fill=\"currentColor\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n            </svg>\n            <span className=\"relative z-10\">Sign in with Google</span>\n            <ArrowRight className=\"ml-3 w-5 h-5 transition-transform group-hover:translate-x-1\" />\n          </button>\n          \n          {/* Glass reflection effect */}\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-96 bg-gradient-to-b from-white/[0.02] to-transparent rounded-full blur-3xl pointer-events-none\" />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5950},"client/src/pages/PriorityEmails.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Header } from \"@/components/dashboard/Header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Plus, User } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PriorityEmail {\n  id: string;\n  email: string;\n  addedAt: string;\n}\n\nexport default function PriorityEmails() {\n  const [newEmail, setNewEmail] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch priority emails\n  const { data: priorityEmails = [], isLoading } = useQuery({\n    queryKey: ['priorityEmails'],\n    queryFn: async () => {\n      const response = await fetch('/api/priority-emails?userId=demo-user');\n      if (!response.ok) throw new Error('Failed to fetch priority emails');\n      return response.json();\n    }\n  });\n\n  // Add priority email mutation\n  const addEmailMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const response = await fetch('/api/priority-emails', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ userId: 'demo-user', email })\n      });\n      if (!response.ok) throw new Error('Failed to add priority email');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['priorityEmails'] });\n      setNewEmail('');\n      toast({\n        title: \"Success\",\n        description: \"Priority email added successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add priority email\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Delete priority email mutation\n  const deleteEmailMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/priority-emails/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to delete priority email');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['priorityEmails'] });\n      toast({\n        title: \"Success\",\n        description: \"Priority email removed successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove priority email\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleAddEmail = () => {\n    if (!newEmail.trim()) return;\n\n    // Basic email validation\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(newEmail)) {\n      toast({\n        title: \"Invalid Email\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Check if email already exists\n    if (priorityEmails.some((pe: PriorityEmail) => pe.email.toLowerCase() === newEmail.toLowerCase())) {\n      toast({\n        title: \"Email Already Exists\",\n        description: \"This email is already in your priority list\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    addEmailMutation.mutate(newEmail);\n  };\n\n  const handleDeleteEmail = (id: string) => {\n    deleteEmailMutation.mutate(id);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-6 pt-8 pb-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <Header />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 pt-6 md:pt-8 pb-8\">\n          <div className=\"space-y-6\">\n            {/* Page Header */}\n            <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\n              <div>\n                <h1 className=\"text-2xl md:text-3xl font-bold\">Priority Email Contacts</h1>\n                <p className=\"text-muted-foreground mt-2 text-sm md:text-base\">\n                  Add email addresses that should always be marked as urgent priority\n                </p>\n              </div>\n              <Badge variant=\"secondary\" className=\"text-sm md:text-lg px-3 md:px-4 py-1 md:py-2 self-start sm:self-auto\">\n                {priorityEmails.length} Priority Contacts\n              </Badge>\n            </div>\n\n            {/* Add New Email Section */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Plus className=\"w-5 h-5\" />\n                  Add Priority Email\n                </CardTitle>\n                <CardDescription>\n                  Emails from these addresses will automatically be marked as urgent\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-col sm:flex-row gap-3\">\n                  <Input\n                    type=\"email\"\n                    placeholder=\"Enter email address (e.g., boss@company.com)\"\n                    value={newEmail}\n                    onChange={(e) => setNewEmail(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddEmail()}\n                    className=\"flex-1\"\n                  />\n                  <Button \n                    onClick={handleAddEmail}\n                    disabled={addEmailMutation.isPending || !newEmail.trim()}\n                    className=\"sm:w-auto\"\n                  >\n                    {addEmailMutation.isPending ? 'Adding...' : 'Add Email'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Priority Emails List */}\n            <div className=\"space-y-3\">\n              {priorityEmails.length === 0 ? (\n                <Card>\n                  <CardContent className=\"p-8 text-center\">\n                    <div className=\"space-y-2 text-center\">\n                      <div className=\"mx-auto w-16 h-16 bg-muted rounded-full flex items-center justify-center\">\n                      </div>\n                      <h3 className=\"text-xl font-semibold\">No Priority Emails Yet</h3>\n                      <p className=\"text-muted-foreground\">\n                        Add email addresses above to automatically mark their emails as urgent priority.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              ) : (\n                priorityEmails.map((priorityEmail: PriorityEmail) => (\n                  <Card key={priorityEmail.id} className=\"transition-all hover:shadow-md\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n                          <div className=\"relative\">\n                            <User className=\"w-8 h-8 text-blue-500\" />\n                          </div>\n\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"font-medium text-sm md:text-base truncate\">\n                              {priorityEmail.email}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Added on {formatDate(priorityEmail.addedAt)}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          <Badge className=\"text-xs bg-red-500 text-white border-red-500 hover:bg-red-600\">\n                            Priority Person\n                          </Badge>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteEmail(priorityEmail.id)}\n                            disabled={deleteEmailMutation.isPending}\n                            className=\"text-destructive hover:text-destructive\"\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n\n            {/* Info Card */}\n            <Card className=\"border-blue-200 bg-blue-50 dark:bg-blue-950 dark:border-blue-800\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"text-blue-500 mt-0.5\">ℹ️</div>\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-100\">\n                      How Priority Emails Work\n                    </h4>\n                    <div className=\"text-sm text-blue-800 dark:text-blue-200 space-y-1\">\n                      <p>• Emails from these addresses will automatically be marked as <strong>urgent priority</strong></p>\n                      <p>• They will appear with a <strong>\"Priority Person\"</strong> corner sticker</p>\n                      <p>• These emails will be sorted to the top of your urgent notifications</p>\n                      <p>• You can remove contacts anytime by clicking the trash icon</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":10220},"client/src/pages/TimeSaved.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Header } from \"@/components/dashboard/Header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface TimeSavedStats {\n  totalEmailsConverted: number;\n  totalTasksCreatedFromNaturalLanguage: number;\n  totalTimeSavedMinutes: number;\n  conversionBreakdown: {\n    emailConversions: number;\n    naturalLanguageConversions: number;\n    urgentTasksHandled: number;\n    completedTasks: number;\n  };\n}\n\nfunction AnimatedCounter({ target, duration = 2000, suffix = \"\" }: { target: number; duration?: number; suffix?: string }) {\n  const [current, setCurrent] = useState(0);\n\n  useEffect(() => {\n    const startTime = Date.now();\n    const startValue = 0;\n    \n    const animate = () => {\n      const now = Date.now();\n      const elapsed = now - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      \n      // Easing function for smooth animation\n      const easeOutQuart = 1 - Math.pow(1 - progress, 4);\n      const value = Math.floor(startValue + (target - startValue) * easeOutQuart);\n      \n      setCurrent(value);\n      \n      if (progress < 1) {\n        requestAnimationFrame(animate);\n      }\n    };\n    \n    requestAnimationFrame(animate);\n  }, [target, duration]);\n\n  return (\n    <span className=\"font-mono\">\n      {current.toLocaleString()}{suffix}\n    </span>\n  );\n}\n\nfunction StatCard({ \n  title, \n  value, \n  description, \n  icon, \n  color = \"bg-blue-50\",\n  animated = false \n}: { \n  title: string; \n  value: number; \n  description: string; \n  icon: string; \n  color?: string;\n  animated?: boolean;\n}) {\n  return (\n    <Card className={`${color} border-l-4 border-l-blue-500 transition-all hover:shadow-lg`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n            {title}\n          </CardTitle>\n          <span className=\"text-2xl\">{icon}</span>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-3xl font-bold mb-2\">\n          {animated ? (\n            <AnimatedCounter target={value} />\n          ) : (\n            value.toLocaleString()\n          )}\n        </div>\n        <CardDescription>{description}</CardDescription>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function TimeSaved() {\n  // Fetch time saved statistics\n  const { data: stats, isLoading } = useQuery<TimeSavedStats>({\n    queryKey: ['timeSavedStats'],\n    queryFn: async () => {\n      const response = await fetch('/api/analytics/time-saved');\n      if (!response.ok) {\n        // Return mock data if endpoint doesn't exist yet\n        return {\n          totalEmailsConverted: 47,\n          totalTasksCreatedFromNaturalLanguage: 128,\n          totalTimeSavedMinutes: 1847,\n          conversionBreakdown: {\n            emailConversions: 47,\n            naturalLanguageConversions: 128,\n            urgentTasksHandled: 23,\n            completedTasks: 156\n          }\n        };\n      }\n      return response.json();\n    }\n  });\n\n  const formatTimeDisplay = (minutes: number) => {\n    const hours = Math.floor(minutes / 60);\n    const remainingMinutes = minutes % 60;\n    \n    if (hours === 0) {\n      return `${remainingMinutes} minutes`;\n    } else if (remainingMinutes === 0) {\n      return `${hours} hour${hours > 1 ? 's' : ''}`;\n    } else {\n      return `${hours}h ${remainingMinutes}m`;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <main className=\"max-w-7xl mx-auto px-6 pt-8 pb-8\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground flex flex-col\">\n      <Header />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-7xl mx-auto px-4 md:px-6 pt-6 md:pt-8 pb-8\">\n          <div className=\"space-y-6 md:space-y-8\">\n            {/* Page Header */}\n            <div className=\"text-center space-y-4\">\n              <h1 className=\"text-2xl md:text-4xl font-bold text-foreground\">Time Saved</h1>\n              <p className=\"text-base md:text-xl text-muted-foreground max-w-2xl mx-auto px-4\">\n                Track your productivity gains through intelligent task automation\n              </p>\n            </div>\n\n          {/* Main Time Saved Display */}\n            <Card className=\"border\">\n              <CardContent className=\"text-center py-8 md:py-12\">\n                <div className=\"space-y-6\">\n                  <h2 className=\"text-lg md:text-2xl font-medium text-muted-foreground\">\n                    Total Time Saved\n                  </h2>\n                  <div className=\"text-4xl md:text-6xl font-bold text-foreground\">\n                    <AnimatedCounter \n                      target={stats?.totalTimeSavedMinutes || 0} \n                      duration={3000} \n                    />\n                    <span className=\"text-2xl md:text-3xl text-muted-foreground ml-2\">minutes</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            \n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":5517},"client/src/pages/app-links.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Plus, ExternalLink, ArrowRight, Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\ninterface AppLink {\n  id: string;\n  name: string;\n  url: string;\n  logo: string;\n}\n\nconst APP_LOGOS: Record<string, string> = {\n  'linkedin': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/linkedin.svg',\n  'gmail': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/gmail.svg',\n  'slack': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/slack.svg',\n  'trello': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/trello.svg',\n  'notion': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/notion.svg',\n  'jira': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/jira.svg',\n  'zoom': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/zoom.svg',\n  'github': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/github.svg',\n  'google': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/google.svg',\n  'microsoft': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/microsoft.svg',\n  'outlook': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/microsoftoutlook.svg',\n  'calendar': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/googlecalendar.svg',\n  'drive': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/googledrive.svg',\n  'dropbox': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/dropbox.svg',\n  'asana': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/asana.svg',\n  'monday': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/mondaydotcom.svg',\n};\n\nfunction detectAppFromUrl(url: string): { name: string; logo: string } {\n  const domain = url.toLowerCase();\n\n  for (const [key, logo] of Object.entries(APP_LOGOS)) {\n    if (domain.includes(key)) {\n      return { \n        name: key.charAt(0).toUpperCase() + key.slice(1), \n        logo \n      };\n    }\n  }\n\n  // Default fallback\n  return { \n    name: new URL(url).hostname.replace('www.', ''), \n    logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/link.svg' \n  };\n}\n\nexport default function AppLinks() {\n  const [, setLocation] = useLocation();\n  const [newUrl, setNewUrl] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: appLinks = [] } = useQuery({\n    queryKey: [\"/api/user-app-links\", \"demo-user\"],\n    queryFn: () => fetch(\"/api/user-app-links?userId=demo-user\").then(res => res.json()),\n  });\n\n  const createAppLinkMutation = useMutation({\n    mutationFn: async (linkData: { userId: string; name: string; url: string; logo: string }) => {\n      return await apiRequest(\"POST\", \"/api/user-app-links\", linkData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      setIsDialogOpen(false);\n      setNewUrl(\"\");\n      toast({\n        title: \"Success\",\n        description: \"App link added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add app link. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAppLinkMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/user-app-links/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      toast({\n        title: \"Removed\",\n        description: \"App link removed successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove app link. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddLink = () => {\n    if (!newUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Ensure URL has protocol\n      let formattedUrl = newUrl.trim();\n      if (!formattedUrl.startsWith('http://') && !formattedUrl.startsWith('https://')) {\n        formattedUrl = 'https://' + formattedUrl;\n      }\n\n      const { name, logo } = detectAppFromUrl(formattedUrl);\n\n      createAppLinkMutation.mutate({\n        userId: \"demo-user\",\n        name,\n        url: formattedUrl,\n        logo,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid URL format\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveLink = (id: string) => {\n    deleteAppLinkMutation.mutate(id);\n  };\n\n  const handleOpenLink = (url: string) => {\n    window.open(url, '_blank', 'noopener,noreferrer');\n  };\n\n  const handleEnterWorkplace = () => {\n    setLocation(\"/landing\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold mb-4\">Your Workflow Apps</h1>\n          <p className=\"text-muted-foreground text-lg mb-8\">\n            Add links to your favorite workplace apps for quick access\n          </p>\n        </div>\n\n        {/* Add New Link Dialog */}\n        <div className=\"flex justify-center mb-8\">\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                size=\"lg\" \n                className=\"bg-primary text-primary-foreground hover:bg-primary/90 transition-colors\"\n                data-testid=\"button-add-app-link\"\n              >\n                <Plus className=\"w-5 h-5 mr-2\" />\n                Add App Link\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add New App Link</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 pt-4\">\n                <Input\n                  placeholder=\"Enter app URL (e.g., linkedin.com, gmail.com)\"\n                  value={newUrl}\n                  onChange={(e) => setNewUrl(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleAddLink()}\n                  data-testid=\"input-app-url\"\n                />\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-add\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleAddLink}\n                    className=\"flex-1\"\n                    data-testid=\"button-save-app-link\"\n                  >\n                    Add Link\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* App Links Grid */}\n        {appLinks.length > 0 ? (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-6 mb-12\">\n            {appLinks.map((link: AppLink) => (\n              <Card key={link.id} className=\"group hover:shadow-lg transition-all duration-300 cursor-pointer\">\n                <CardContent className=\"p-6 text-center relative\">\n                  <button\n                    onClick={() => handleRemoveLink(link.id)}\n                    className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity p-1 hover:bg-destructive/10 rounded\"\n                    data-testid={`button-remove-${link.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4 text-destructive\" />\n                  </button>\n\n                  <div \n                    className=\"w-16 h-16 mx-auto mb-3 bg-muted rounded-xl flex items-center justify-center cursor-pointer hover:bg-primary/10 transition-colors\"\n                    onClick={() => handleOpenLink(link.url)}\n                    data-testid={`app-icon-${link.id}`}\n                  >\n                    <img \n                      src={link.logo} \n                      alt={link.name}\n                      className=\"w-8 h-8 object-contain app-icon-light\"\n                      onError={(e) => {\n                        const target = e.target as HTMLImageElement;\n                        target.src = 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/link.svg';\n                      }}\n                    />\n                  </div>\n\n                  <h3 className=\"font-medium text-sm mb-2\" data-testid={`app-name-${link.id}`}>\n                    {link.name}\n                  </h3>\n\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleOpenLink(link.url)}\n                    className=\"text-xs opacity-0 group-hover:opacity-100 transition-opacity\"\n                    data-testid={`button-open-${link.id}`}\n                  >\n                    <ExternalLink className=\"w-3 h-3 mr-1\" />\n                    Open\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-12 mb-12\">\n            <div className=\"w-24 h-24 bg-muted rounded-full flex items-center justify-center mx-auto mb-6\">\n              <Plus className=\"w-8 h-8 text-muted-foreground\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No apps added yet</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Add your first workplace app link to get started\n            </p>\n          </div>\n        )}\n\n        {/* Enter Workplace Button */}\n        <div className=\"text-center\">\n          <Button\n            onClick={handleEnterWorkplace}\n            size=\"lg\"\n            className=\"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground px-8 py-4 text-lg font-semibold hover:from-primary/90 hover:to-primary/70 transition-all duration-300 group\"\n            data-testid=\"button-enter-workplace\"\n          >\n            Enter Your Workplace\n            <ArrowRight className=\"ml-2 w-5 h-5 transition-transform group-hover:translate-x-1\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10714},"client/src/pages/dashboard.tsx":{"content":"import { Header } from \"@/components/dashboard/Header\";\nimport { AppLauncher } from \"@/components/dashboard/AppLauncher\";\nimport { WorkflowRiver } from \"@/components/dashboard/WorkflowRiver\";\nimport { NotificationFeed } from \"@/components/dashboard/NotificationFeed\";\n\nimport { GmailConnect } from \"@/components/dashboard/GmailConnect\";\nimport { WindowsNotificationManager } from \"@/components/BrowserNotificationManager\";\nimport { BrowserNotificationManager } from \"@/components/BrowserNotificationManager\";\n\n// Assuming RealTimeMetrics, WellnessPanel, AIInsights, UserProfile, and useNotifications are imported elsewhere\n// and are available in this scope. For the purpose of this edit, we'll assume their existence.\n// import { RealTimeMetrics } from \"@/components/dashboard/RealTimeMetrics\";\n// import { WellnessPanel } from \"@/components/dashboard/WellnessPanel\";\n// import { AIInsights } from \"@/components/dashboard/AIInsights\";\n// import { UserProfile } from \"@/components/dashboard/UserProfile\";\n// import { useNotifications } from \"@/hooks/useNotifications\";\n\n// TaskList functionality is handled by WorkflowRiver component\nimport { useMetrics } from \"@/hooks/useMetrics\"; // Added useMetrics import\nimport { useIsMobile } from \"@/hooks/use-mobile\"; // Added useIsMobile hook\n\nexport default function Dashboard() {\n  const { data: metrics } = useMetrics();\n  const isMobile = useIsMobile();\n  // const { data: notifications } = useNotifications();\n  // const activeNotifications = notifications?.filter(n => !n.isRead) || [];\n  const userId = \"user123\"; // Placeholder for actual user ID\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground dashboard-container flex flex-col\">\n      <Header />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"max-w-none mx-0 px-4 pt-4 pb-8 h-full\">\n        {isMobile ? (\n          /* Mobile Layout */\n          <div className=\"flex flex-col gap-6 h-full overflow-y-auto\">\n            {/* Main Content - Tasks */}\n            <WorkflowRiver />\n\n            {/* Mobile Notifications */}\n            <NotificationFeed />\n\n            {/* Secondary Content */}\n            <WindowsNotificationManager userId={userId} />\n\n          </div>\n        ) : (\n          /* Desktop Layout */\n          <div className=\"flex gap-4 h-[calc(100vh-120px)]\">\n            {/* Left Column - App Launcher with Fixed Height */}\n            <div className=\"w-20 flex-shrink-0 h-full\">\n              <AppLauncher />\n            </div>\n\n            {/* Middle Column - Tasks with Fixed Height */}\n            <div className=\"flex-[2.5] px-2 h-full\">\n              <WorkflowRiver />\n            </div>\n\n            {/* Right Column - Notifications with Fixed Height */}\n            <div className=\"w-80 flex-shrink-0 px-2 h-full\">\n              <NotificationFeed />\n            </div>\n          </div>\n        )}\n        </div>\n      </main>\n\n      {/* Windows Notification Manager */}\n      <BrowserNotificationManager userId=\"demo-user\" />\n    </div>\n  );\n}","size_bytes":3021},"client/src/pages/intro.tsx":{"content":"\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { ArrowRight, Zap, Brain, Calendar, BarChart3, Shield, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { TextLoop } from \"@/components/TextLoop\";\n\nexport function Intro() {\n  const [, setLocation] = useLocation();\n  const [isVisible, setIsVisible] = useState(false);\n\n  const benefits = [\n    \"Turn chaos into clarity\",\n    \"AI handles your inbox\", \n    \"Smart scheduling, zero effort\",\n    \"Never miss a deadline again\",\n    \"Focus on what truly matters\",\n    \"Your personal productivity AI\"\n  ];\n\n  const features = [\n    {\n      icon: Brain,\n      title: \"AI-Powered Intelligence\",\n      description: \"Advanced email analysis and smart task creation using Google Gemini AI\",\n      color: \"from-blue-500 to-cyan-500\"\n    },\n    {\n      icon: Calendar,\n      title: \"Intelligent Auto-Scheduling\",\n      description: \"Automatically reschedule and prioritize tasks based on deadlines and importance\",\n      color: \"from-purple-500 to-pink-500\"\n    },\n    {\n      icon: Zap,\n      title: \"Real-Time Workflow Sync\",\n      description: \"Seamlessly connect Gmail, Slack, and calendar for unified productivity\",\n      color: \"from-green-500 to-emerald-500\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Executive Analytics\",\n      description: \"Comprehensive insights and performance tracking for data-driven decisions\",\n      color: \"from-orange-500 to-red-500\"\n    }\n  ];\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 300);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleGetStarted = () => {\n    setIsVisible(false);\n    setTimeout(() => {\n      setLocation(\"/app-links\");\n    }, 400);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-indigo-950 relative overflow-hidden\">\n      {/* Enhanced Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Premium gradient orbs */}\n        <div className=\"absolute top-1/4 -left-40 w-80 h-80 bg-gradient-to-br from-blue-500/20 to-purple-500/20 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '4s' }} />\n        <div className=\"absolute bottom-1/3 -right-40 w-96 h-96 bg-gradient-to-br from-cyan-500/15 to-indigo-500/15 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '6s', animationDelay: '1s' }} />\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[500px] h-[500px] bg-gradient-to-br from-violet-500/10 to-pink-500/10 rounded-full blur-3xl animate-pulse\" style={{ animationDuration: '8s', animationDelay: '2s' }} />\n        \n        {/* Floating light particles */}\n        {[...Array(30)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-1 h-1 bg-white/30 rounded-full animate-float\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 4}s`,\n              animationDuration: `${4 + Math.random() * 6}s`\n            }}\n          />\n        ))}\n        \n        {/* Premium grid overlay */}\n        <div className=\"absolute inset-0 opacity-[0.03]\" style={{\n          backgroundImage: `radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0)`,\n          backgroundSize: '50px 50px'\n        }} />\n      </div>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 flex flex-col items-center justify-center min-h-screen px-6 text-center max-w-7xl mx-auto\">\n        <div className={`transition-all duration-1000 transform ${\n          isVisible ? 'translate-y-0 opacity-100' : 'translate-y-16 opacity-0'\n        }`}>\n          \n          {/* Enhanced FlowHub Logo with Premium Light Animation */}\n          <div className=\"mb-3\">\n            <h1 className=\"text-7xl md:text-8xl lg:text-9xl font-extralight text-white leading-none tracking-tight relative\">\n              <span className=\"relative inline-block\">\n                FlowHub\n                {/* Inner flowing light effect */}\n                <div \n                  className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/50 to-transparent opacity-80\"\n                  style={{\n                    background: 'linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.8) 50%, transparent 100%)',\n                    backgroundSize: '200% 100%',\n                    animation: 'flowingLight 3s ease-in-out infinite',\n                    maskImage: 'linear-gradient(to right, transparent 10%, black 30%, black 70%, transparent 90%)',\n                    WebkitMaskImage: 'linear-gradient(to right, transparent 10%, black 30%, black 70%, transparent 90%)'\n                  }} \n                />\n                {/* Premium holographic glow */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent animate-pulse opacity-90\" />\n                {/* Outer shimmer ring */}\n                <div \n                  className=\"absolute -inset-2 bg-gradient-to-r from-transparent via-blue-400/40 to-transparent opacity-60 blur-sm\"\n                  style={{\n                    background: 'linear-gradient(90deg, transparent 0%, rgba(59, 130, 246, 0.6) 30%, rgba(147, 51, 234, 0.6) 50%, rgba(6, 182, 212, 0.6) 70%, transparent 100%)',\n                    backgroundSize: '400% 100%',\n                    animation: 'outerGlow 5s ease-in-out infinite 0.5s'\n                  }} \n                />\n              </span>\n            </h1>\n          </div>\n\n          {/* Enhanced Animated Benefits */}\n          <div className=\"mb-3\">\n            <TextLoop \n              messages={benefits}\n              duration={2500}\n              className=\"text-4xl md:text-5xl lg:text-6xl font-light text-white/95 leading-tight tracking-tight min-h-[1.3em] flex items-center justify-center\"\n            />\n          </div>\n\n          {/* Premium Feature Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16 max-w-6xl mx-auto\">\n            {features.map((feature, index) => (\n              <div\n                key={index}\n                className=\"group relative p-8 rounded-3xl bg-white/[0.02] backdrop-blur-md border border-white/10 hover:bg-white/[0.08] hover:border-white/20 transition-all duration-500 cursor-pointer hover:scale-105 hover:shadow-2xl\"\n                style={{ \n                  animationDelay: `${index * 150}ms`,\n                  boxShadow: '0 20px 40px rgba(0, 0, 0, 0.1)'\n                }}\n              >\n                {/* Feature icon with gradient background */}\n                <div className={`w-16 h-16 rounded-2xl bg-gradient-to-r ${feature.color} p-0.5 mb-6 mx-auto group-hover:scale-110 transition-transform duration-300`}>\n                  <div className=\"w-full h-full rounded-2xl bg-slate-900/90 flex items-center justify-center\">\n                    <feature.icon className=\"w-8 h-8 text-white group-hover:scale-110 transition-transform duration-300\" />\n                  </div>\n                </div>\n                \n                <h3 className=\"text-xl font-semibold text-white mb-4 group-hover:text-blue-100 transition-colors\">{feature.title}</h3>\n                <p className=\"text-sm text-white/70 leading-relaxed group-hover:text-white/85 transition-colors\">{feature.description}</p>\n                \n                {/* Hover glow effect */}\n                <div className={`absolute inset-0 rounded-3xl bg-gradient-to-r ${feature.color} opacity-0 group-hover:opacity-10 transition-opacity duration-500 -z-10`} />\n              </div>\n            ))}\n          </div>\n\n          {/* Enhanced CTA Section with Professional Focus */}\n          <div className=\"space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <h2 className=\"text-2xl md:text-3xl font-semibold text-white mb-2 flex items-center justify-center gap-3\">\n                <Sparkles className=\"w-8 h-8 text-blue-400 animate-pulse\" />\n                Ready to revolutionize your workflow?\n                <Sparkles className=\"w-8 h-8 text-purple-400 animate-pulse\" style={{ animationDelay: '0.5s' }} />\n              </h2>\n              <p className=\"text-lg text-white/80 font-medium\">Join thousands of professionals who've transformed their productivity</p>\n              <p className=\"text-sm text-white/60\">Secure OAuth integration • Setup takes less than 60 seconds</p>\n            </div>\n\n            {/* Premium CTA Button */}\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button\n                onClick={handleGetStarted}\n                className=\"relative bg-gradient-to-r from-blue-600 via-purple-600 to-blue-700 hover:from-blue-700 hover:via-purple-700 hover:to-blue-800 text-white px-16 py-7 text-xl font-semibold rounded-2xl transition-all duration-500 group hover:scale-105 border-0 overflow-hidden shadow-2xl hover:shadow-blue-500/30\"\n                data-testid=\"button-get-started\"\n              >\n                {/* Premium shimmer effect */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000\" />\n                {/* Button inner glow */}\n                <div className=\"absolute inset-0 bg-gradient-to-r from-blue-400/30 via-purple-400/30 to-blue-400/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm\" />\n                <span className=\"relative z-10 flex items-center gap-4\">\n                  <Shield className=\"w-6 h-6\" />\n                  Sign In with Google\n                  <ArrowRight className=\"w-6 h-6 transition-transform group-hover:translate-x-2 group-hover:scale-110\" />\n                </span>\n              </Button>\n            </div>\n\n            {/* Secondary Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center\">\n              <button\n                onClick={handleGetStarted}\n                className=\"text-white/80 hover:text-blue-300 underline underline-offset-4 hover:underline-offset-8 transition-all duration-300 text-base font-medium group flex items-center gap-2\"\n              >\n                <Zap className=\"w-4 h-4 group-hover:scale-110 transition-transform\" />\n                View Live Demo\n              </button>\n              <span className=\"hidden sm:block text-white/40 text-lg\">•</span>\n              <button\n                onClick={handleGetStarted}\n                className=\"text-white/80 hover:text-purple-300 underline underline-offset-4 hover:underline-offset-8 transition-all duration-300 text-base font-medium group flex items-center gap-2\"\n              >\n                <Brain className=\"w-4 h-4 group-hover:scale-110 transition-transform\" />\n                See How It Works\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Enhanced CSS for premium animations */}\n      <style jsx>{`\n        @keyframes flowingLight {\n          0% {\n            transform: translateX(-100%) scale(0.8);\n            opacity: 0;\n          }\n          30% {\n            opacity: 0.8;\n            transform: translateX(-20%) scale(1);\n          }\n          70% {\n            opacity: 0.8;\n            transform: translateX(20%) scale(1);\n          }\n          100% {\n            transform: translateX(100%) scale(0.8);\n            opacity: 0;\n          }\n        }\n        \n        @keyframes outerGlow {\n          0% {\n            transform: translateX(-150%);\n            opacity: 0;\n          }\n          30% {\n            opacity: 0.6;\n          }\n          70% {\n            opacity: 0.6;\n          }\n          100% {\n            transform: translateX(150%);\n            opacity: 0;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":12022},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/auth/LoginForm.tsx":{"content":"\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { authService } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface LoginFormProps {\n  onSuccess: () => void;\n  onSwitchToRegister: () => void;\n}\n\nexport function LoginForm({ onSuccess, onSwitchToRegister }: LoginFormProps) {\n  const [email, setEmail] = useState('demo@flowhub.com');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({ email, password }),\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        toast({\n          title: \"Login successful\",\n          description: result.message,\n        });\n        onSuccess();\n      } else {\n        toast({\n          title: \"Login failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Login failed\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Sign In</CardTitle>\n        <CardDescription>\n          Enter your credentials to access FlowHub\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\">Email</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n            />\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? 'Signing in...' : 'Sign In'}\n          </Button>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-muted-foreground\">Demo user: demo@flowhub.com (no password needed)</span>\n          </div>\n\n          <div className=\"text-center text-sm\">\n            <span className=\"text-muted-foreground\">Don't have an account? </span>\n            <button\n              type=\"button\"\n              onClick={onSwitchToRegister}\n              className=\"text-primary hover:underline\"\n            >\n              Sign up\n            </button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3410},"client/src/components/dashboard/AIInsights.tsx":{"content":"import { Brain, AlertTriangle, Lightbulb } from \"lucide-react\";\nimport { useAIInsights, useApplyAIInsight, useDismissAIInsight } from \"@/hooks/useMetrics\";\nimport { Button } from \"@/components/ui/button\";\n\nconst insightTypeConfig = {\n  deadline_alert: {\n    icon: AlertTriangle,\n    color: \"text-accent\",\n    bgColor: \"bg-accent/10\",\n    borderColor: \"border-accent/30\",\n  },\n  workflow_optimization: {\n    icon: Lightbulb,\n    color: \"text-primary\",\n    bgColor: \"bg-primary/10\",\n    borderColor: \"border-primary/30\",\n  },\n  wellness_suggestion: {\n    icon: Brain,\n    color: \"text-secondary\",\n    bgColor: \"bg-secondary/10\",\n    borderColor: \"border-secondary/30\",\n  },\n};\n\nexport function AIInsights() {\n  const { data: insights, isLoading } = useAIInsights();\n  const applyInsightMutation = useApplyAIInsight();\n  const dismissInsightMutation = useDismissAIInsight();\n\n  const handleApplyInsight = (insightId: string) => {\n    applyInsightMutation.mutate(insightId);\n  };\n\n  const handleDismissInsight = (insightId: string) => {\n    dismissInsightMutation.mutate(insightId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-lg p-6\" data-testid=\"card-ai-insights\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-muted/30 rounded w-2/3\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2].map(i => (\n              <div key={i} className=\"h-20 bg-muted/20 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const activeInsights = (Array.isArray(insights) ? insights : []).filter((insight: any) => !insight.isDismissed);\n\n  return (\n    <div className=\"glass-card rounded-lg p-6\" data-testid=\"card-ai-insights\">\n      <h2 className=\"text-lg font-semibold mb-4 flex items-center\" data-testid=\"text-ai-insights-title\">\n        <Brain className=\"w-5 h-5 mr-2 text-secondary\" />\n        AI Command Intelligence\n      </h2>\n      \n      <div className=\"space-y-4\">\n        {activeInsights.length === 0 ? (\n          <div className=\"text-center py-6 text-muted-foreground\" data-testid=\"text-no-insights\">\n            <Brain className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No active AI insights at the moment.</p>\n            <p className=\"text-sm mt-2\">Your workflow is running smoothly!</p>\n          </div>\n        ) : (\n          activeInsights.map((insight: any) => {\n            const config = insightTypeConfig[insight.type as keyof typeof insightTypeConfig] || insightTypeConfig.workflow_optimization;\n            const Icon = config.icon;\n            \n            return (\n              <div\n                key={insight.id}\n                className={`${config.bgColor} border ${config.borderColor} rounded-lg p-4`}\n                data-testid={`insight-item-${insight.id}`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <Icon className={`${config.color} mt-1 w-5 h-5`} />\n                  <div className=\"flex-1\">\n                    <h3 className={`font-medium ${config.color}`} data-testid={`insight-title-${insight.id}`}>\n                      {insight.title}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`insight-description-${insight.id}`}>\n                      {insight.description}\n                    </p>\n                    {insight.actionable && (\n                      <div className=\"flex space-x-2 mt-3\">\n                        <Button\n                          onClick={() => handleApplyInsight(insight.id)}\n                          disabled={applyInsightMutation.isPending}\n                          className={`${config.bgColor} hover:${config.bgColor}/80 px-3 py-1 rounded text-sm transition-colors`}\n                          variant=\"ghost\"\n                          data-testid={`button-apply-insight-${insight.id}`}\n                        >\n                          {applyInsightMutation.isPending ? \"Applying...\" : \"Apply Suggestion\"}\n                        </Button>\n                        <Button\n                          onClick={() => handleDismissInsight(insight.id)}\n                          disabled={dismissInsightMutation.isPending}\n                          className=\"bg-muted/20 hover:bg-muted/30 px-3 py-1 rounded text-sm transition-colors\"\n                          variant=\"ghost\"\n                          data-testid={`button-dismiss-insight-${insight.id}`}\n                        >\n                          {dismissInsightMutation.isPending ? \"Dismissing...\" : \"Dismiss\"}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4805},"client/src/components/dashboard/AITasksLimitBar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { AlertTriangle, Zap } from \"lucide-react\";\nimport { useCurrentUser } from \"@/hooks/useAuth\";\n\ninterface AITasksLimitData {\n  withinLimit: boolean;\n  currentCount: number;\n  limit: number;\n  planType: string;\n}\n\nexport function AITasksLimitBar() {\n  const { user } = useCurrentUser();\n\n  const { data: limitData, isLoading } = useQuery<AITasksLimitData>({\n    queryKey: [\"ai-tasks-limit\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) throw new Error(\"User not found\");\n      \n      const response = await fetch(`/api/users/${user.id}/ai-tasks-limit`);\n      if (!response.ok) throw new Error(\"Failed to fetch AI tasks limit\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n    staleTime: 1000 * 60 * 5, // 5 minutes\n  });\n\n  if (isLoading || !limitData) {\n    return (\n      <div className=\"w-48 h-6 bg-muted rounded animate-pulse\" />\n    );\n  }\n\n  const percentage = (limitData.currentCount / limitData.limit) * 100;\n  const isNearLimit = percentage >= 80;\n  const isAtLimit = !limitData.withinLimit;\n\n  return (\n    <div className=\"flex flex-col gap-1\">\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div className=\"flex items-center gap-2 cursor-help px-3 py-2 rounded-lg bg-background/80 border border-border/50\">\n              <Zap className=\"h-3 w-3 text-yellow-500\" />\n              <span className=\"text-xs font-medium\">AI Tasks</span>\n              <Badge variant={isAtLimit ? \"destructive\" : isNearLimit ? \"secondary\" : \"outline\"} className=\"text-xs px-2 py-0\">\n                {limitData.currentCount}/{limitData.limit}\n              </Badge>\n              <div className=\"w-16\">\n                <Progress \n                  value={percentage} \n                  className=\"h-1\"\n                  indicator-className={isAtLimit ? \"bg-red-500\" : isNearLimit ? \"bg-yellow-500\" : \"bg-green-500\"}\n                />\n              </div>\n            </div>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\" className=\"max-w-xs\">\n            <div className=\"space-y-1\">\n              <p className=\"font-medium\">\n                {limitData.currentCount} AI tasks created/converted this month\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                Plan: {limitData.planType.charAt(0).toUpperCase() + limitData.planType.slice(1)} \n                ({limitData.limit} tasks/month)\n              </p>\n              {isNearLimit && (\n                <p className=\"text-xs text-yellow-600\">\n                  ⚠️ Approaching monthly limit\n                </p>\n              )}\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n\n      {isAtLimit && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            <strong>Monthly AI tasks limit reached!</strong><br />\n            Upgrade your plan for more AI task conversions and email processing.\n          </AlertDescription>\n        </Alert>\n      )}\n    </div>\n  );\n}","size_bytes":3433},"client/src/components/dashboard/AppLauncher.tsx":{"content":"import { ExternalLink, Plus, Rocket, Trash2 } from \"lucide-react\";\nimport { useUserAppLinks } from \"@/hooks/useMetrics\";\nimport { useLocation } from \"wouter\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst APP_LOGOS: Record<string, string> = {\n  'linkedin': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/linkedin.svg',\n  'gmail': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/gmail.svg',\n  'slack': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/slack.svg',\n  'trello': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/trello.svg',\n  'notion': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/notion.svg',\n  'jira': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/jira.svg',\n  'zoom': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/zoom.svg',\n  'github': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/github.svg',\n  'google': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/google.svg',\n  'microsoft': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/microsoft.svg',\n  'outlook': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/microsoftoutlook.svg',\n  'calendar': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/googlecalendar.svg',\n  'drive': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/googledrive.svg',\n  'dropbox': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/dropbox.svg',\n  'asana': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/asana.svg',\n  'monday': 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/mondaydotcom.svg',\n};\n\nfunction detectAppFromUrl(url: string): { name: string; logo: string } {\n  const domain = url.toLowerCase();\n\n  for (const [key, logo] of Object.entries(APP_LOGOS)) {\n    if (domain.includes(key)) {\n      return {\n        name: key.charAt(0).toUpperCase() + key.slice(1),\n        logo\n      };\n    }\n  }\n\n  // Default fallback\n  return {\n    name: new URL(url).hostname.replace('www.', ''),\n    logo: 'https://cdn.jsdelivr.net/npm/simple-icons@v9/icons/link.svg'\n  };\n}\n\nexport function AppLauncher() {\n  const { data: userAppLinks, isLoading } = useUserAppLinks();\n  const [, setLocation] = useLocation();\n  const [newUrl, setNewUrl] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Ensure userAppLinks is always an array\n  const safeUserAppLinks = Array.isArray(userAppLinks) ? userAppLinks : [];\n\n  const launchingApps = new Set(); // Placeholder, assuming it's a Set\n  const apps = safeUserAppLinks; // Assuming 'apps' in changes refers to 'safeUserAppLinks'\n\n  const createAppLinkMutation = useMutation({\n    mutationFn: async (linkData: { userId: string; name: string; url: string; logo: string }) => {\n      return await apiRequest(\"POST\", \"/api/user-app-links\", linkData);\n    },\n    onSuccess: () => {\n      // Use exact query key match for immediate update\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      setIsDialogOpen(false);\n      setNewUrl(\"\");\n      toast({\n        title: \"Success\",\n        description: \"App link added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add app link. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAppLinkMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/user-app-links/${id}`);\n    },\n    onSuccess: () => {\n      // Use exact query key match for immediate update\n      queryClient.invalidateQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      queryClient.refetchQueries({ queryKey: [\"/api/user-app-links\", \"demo-user\"] });\n      toast({\n        title: \"Removed\",\n        description: \"App link removed successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove app link. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAppLaunch = (app: any) => {\n    // Launch app in new tab\n    window.open(app.url, '_blank');\n  };\n\n  const handleAddApp = () => {\n    if (!newUrl.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Ensure URL has protocol\n      let formattedUrl = newUrl.trim();\n      if (!formattedUrl.startsWith('http://') && !formattedUrl.startsWith('https://')) {\n        formattedUrl = 'https://' + formattedUrl;\n      }\n\n      const { name, logo } = detectAppFromUrl(formattedUrl);\n\n      createAppLinkMutation.mutate({\n        userId: \"demo-user\",\n        name,\n        url: formattedUrl,\n        logo,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid URL format\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveApp = (id: string) => {\n    deleteAppLinkMutation.mutate(id);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-lg p-2 w-20 h-full animate-in slide-in-from-left-5 duration-700\" data-testid=\"card-app-launcher\">\n        <div className=\"animate-pulse space-y-4 px-1\">\n          <div className=\"h-4 bg-muted/30 rounded\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-12 bg-muted/20 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!safeUserAppLinks || safeUserAppLinks.length === 0) {\n    return (\n      <div className=\"glass-card rounded-lg p-2 w-20 h-full animate-in slide-in-from-left-5 duration-700 flex flex-col\" data-testid=\"card-app-launcher\">\n        {/* Fixed Title Section */}\n        <div className=\"mb-3 flex-shrink-0 px-1\">\n          <h2 className=\"text-xs font-semibold text-center font-display animate-in fade-in-50 duration-500 delay-200\" data-testid=\"text-section-title\">\n            <Rocket className=\"w-4 h-4 mx-auto mb-1 text-primary animate-pulse\" />\n            Apps\n          </h2>\n        </div>\n\n        {/* Scrollable Content Area */}\n        <div className=\"flex flex-col space-y-3 flex-1 overflow-y-auto overflow-x-hidden min-h-0 px-1\">\n          <div className=\"flex justify-center items-center w-full\">\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <button\n                  className=\"w-12 h-12 rounded-lg bg-muted/20 hover:bg-primary/10 border-2 border-dashed border-muted-foreground/30 hover:border-primary/50 transition-all duration-300 flex items-center justify-center hover:scale-110 flex-shrink-0\"\n                  data-testid=\"button-add-new-app\"\n                >\n                  <Plus className=\"w-6 h-6 text-muted-foreground hover:text-primary transition-colors\" />\n                </button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New App Link</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4 pt-4\">\n                  <Input\n                    placeholder=\"Enter app URL (e.g., linkedin.com, gmail.com)\"\n                    value={newUrl}\n                    onChange={(e) => setNewUrl(e.target.value)}\n                    onKeyPress={(e) => e.key === 'Enter' && handleAddApp()}\n                    data-testid=\"input-app-url\"\n                  />\n                  <div className=\"flex gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setIsDialogOpen(false)}\n                      className=\"flex-1\"\n                      data-testid=\"button-cancel-add\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={handleAddApp}\n                      className=\"flex-1\"\n                      data-testid=\"button-save-app-link\"\n                    >\n                      Add Link\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {/* Bottom text */}\n          <div className=\"text-center text-muted-foreground mt-auto\">\n            <p className=\"text-xs\">Add apps here</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"glass-card rounded-lg p-2 w-20 h-full animate-in slide-in-from-left-5 duration-700 flex flex-col\" data-testid=\"card-app-launcher\">\n      {/* Fixed Title Section */}\n      <div className=\"mb-3 flex-shrink-0 px-1\">\n        <h2 className=\"text-xs font-semibold text-center font-display animate-in fade-in-50 duration-500 delay-200\" data-testid=\"text-section-title\">\n          <Rocket className=\"w-4 h-4 mx-auto mb-1 text-primary animate-pulse\" />\n          Apps\n        </h2>\n      </div>\n\n      {/* Scrollable Content Area */}\n      <div className=\"flex flex-col space-y-3 flex-1 overflow-y-auto overflow-x-hidden min-h-0 px-1\">\n        {safeUserAppLinks.map((app: any, index: number) => (\n          <div\n            key={app.id}\n            className=\"relative group animate-in slide-in-from-left-3 duration-500 flex justify-center items-center w-full\"\n            style={{ animationDelay: `${index * 100}ms` }}\n          >\n            <div className=\"relative flex justify-center items-center\">\n              <button\n                onClick={() => handleRemoveApp(app.id)}\n                className=\"absolute -top-1 -right-1 opacity-0 group-hover:opacity-100 transition-opacity p-1 bg-destructive/90 hover:bg-destructive rounded-full z-10\"\n                data-testid={`button-remove-${app.id}`}\n              >\n                <Trash2 className=\"w-2 h-2 text-white\" />\n              </button>\n\n              <button\n                onClick={() => handleAppLaunch(app)}\n                className=\"w-12 h-12 rounded-lg border-2 bg-muted/30 hover:bg-muted/50 hover:scale-110 transition-all duration-300 flex items-center justify-center hover:shadow-xl hover:shadow-primary/20 hover:border-primary/50 flex-shrink-0\"\n                data-testid={`button-app-${app.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                title={app.name}\n              >\n                {app.logo ? (\n                  <img\n                    src={app.logo}\n                    alt={app.name}\n                    className=\"w-6 h-6 transition-all duration-300 app-icon object-contain\"\n                  />\n                ) : (\n                  <ExternalLink className=\"text-blue-500 w-6 h-6 transition-all duration-300 flex-shrink-0\" />\n                )}\n              </button>\n            </div>\n          </div>\n        ))}\n\n        {/* Add button at bottom of scrollable area */}\n        <div className=\"flex justify-center items-center w-full\">\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <button\n                className=\"w-12 h-12 rounded-lg bg-muted/20 hover:bg-primary/10 border-2 border-dashed border-muted-foreground/30 hover:border-primary/50 transition-all duration-300 flex items-center justify-center hover:scale-110 flex-shrink-0\"\n                data-testid=\"button-add-new-app\"\n              >\n                <Plus className=\"w-6 h-6 text-muted-foreground hover:text-primary transition-colors\" />\n              </button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add New App Link</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4 pt-4\">\n                <Input\n                  placeholder=\"Enter app URL (e.g., linkedin.com, gmail.com)\"\n                  value={newUrl}\n                  onChange={(e) => setNewUrl(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleAddApp()}\n                  data-testid=\"input-app-url\"\n                />\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-add\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleAddApp}\n                    className=\"flex-1\"\n                    data-testid=\"button-save-app-link\"\n                  >\n                    Add Link\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13171},"client/src/components/dashboard/GmailConnect.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Mail, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface GmailConnectProps {\n  onConnectionChange?: (connected: boolean) => void;\n}\n\nexport function GmailConnect({ onConnectionChange }: GmailConnectProps) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const { toast } = useToast();\n\n  // Check Gmail connection status on mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      try {\n        const response = await apiRequest(\"GET\", \"/api/gmail/status\", {});\n        const data = await response.json();\n        setIsConnected(data.connected || false);\n        onConnectionChange?.(data.connected || false);\n      } catch (error) {\n        // Silently handle error - assume disconnected\n        setIsConnected(false);\n      }\n    };\n\n    checkConnection();\n  }, [onConnectionChange]);\n\n  // Listen for messages from OAuth popup\n  useEffect(() => {\n    const handleMessage = async (event: MessageEvent) => {\n      if (event.origin !== window.location.origin) return;\n\n      if (event.data.success) {\n        setIsConnected(true);\n        setIsConnecting(false);\n        onConnectionChange?.(true);\n        toast({\n          title: \"Gmail Connected\",\n          description: `Successfully connected ${event.data.email || 'your Gmail account'}. You'll start receiving real-time notifications!`,\n        });\n\n        // If user was authenticated through OAuth, refresh the page to update auth state\n        if (event.data.authenticated) {\n          setTimeout(() => {\n            window.location.reload();\n          }, 1000);\n        }\n      } else if (!event.data.success) {\n        setIsConnecting(false);\n        toast({\n          title: \"Connection Failed\",\n          description: event.data.error || \"Failed to connect Gmail. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [onConnectionChange, toast]);\n\n  const connectGmailMutation = useMutation({\n    mutationFn: async () => {\n      setIsConnecting(true);\n\n      // Start Gmail OAuth flow\n      const response = await apiRequest(\"POST\", \"/api/gmail/connect\", {});\n\n      const { authUrl } = await response.json();\n\n      // Open Google OAuth in popup window\n      const popup = window.open(\n        authUrl, \n        'gmail-auth', \n        'width=500,height=600,scrollbars=yes,resizable=yes'\n      );\n\n      // Return success immediately - will be handled by message listener\n      return { success: true };\n    },\n    onSuccess: () => {\n      // Connection handling is done by message listener\n      setIsConnecting(false);\n    },\n    onError: () => {\n      setIsConnecting(false);\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to connect Gmail. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleConnect = () => {\n    connectGmailMutation.mutate();\n  };\n\n  const handleDisconnect = async () => {\n    try {\n      await apiRequest(\"POST\", \"/api/gmail/disconnect\", {});\n\n      setIsConnected(false);\n      onConnectionChange?.(false);\n      toast({\n        title: \"Gmail Disconnected\",\n        description: \"Gmail notifications have been disabled.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Disconnect Failed\",\n        description: \"Failed to disconnect Gmail. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Card className=\"glass-card\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${\n              isConnected ? 'bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-400' : 'bg-red-100 dark:bg-red-900 text-red-600 dark:text-red-400'\n            }`}>\n              <Mail className=\"w-5 h-5\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-sm\">Gmail Notifications</h3>\n              <p className=\"text-xs text-muted-foreground\">\n                {isConnected ? 'Receiving real-time notifications' : 'Connect to receive notifications'}\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            {isConnected ? (\n              <div className=\"flex items-center space-x-2 px-3 py-1.5 rounded-full border border-green-200 dark:border-green-800 bg-green-50 dark:bg-green-950/50\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">Gmail Connected</span>\n                <span className=\"text-xs text-green-600 dark:text-green-400 font-bold\">• LIVE</span>\n              </div>\n            ) : (\n              <>\n                {!isConnected && <AlertCircle className=\"w-4 h-4 text-red-500\" />}\n                <Button \n                  onClick={handleConnect}\n                  disabled={isConnecting}\n                  size=\"sm\"\n                  data-testid=\"button-connect-gmail\"\n                >\n                  {isConnecting ? 'Connecting...' : 'Connect'}\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5844},"client/src/components/dashboard/Header.tsx":{"content":"import { Bell, Settings, Eye, X, Mail, Clock, BarChart3, Home, Crown, Sparkles, Star, User, MessageCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useNotifications, useMarkNotificationRead, useDismissNotification } from \"@/hooks/useNotifications\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { useLocation, Link } from \"wouter\";\nimport { GmailConnect } from \"./GmailConnect\";\nimport { UserProfile } from \"./UserProfile\";\nimport { UpgradeModal } from \"./UpgradeModal\";\nimport { AITasksLimitBar } from \"./AITasksLimitBar\";\nimport { ThemeSwitcher } from \"@/components/ui/theme-switcher\";\nimport { useState } from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst notificationTypeConfig = {\n  urgent: {\n    color: \"border-destructive\",\n    bgColor: \"bg-destructive/10\",\n    textColor: \"text-destructive\",\n    label: \"URGENT\",\n  },\n  important: {\n    color: \"border-accent\",\n    bgColor: \"bg-accent/10\",\n    textColor: \"text-accent\",\n    label: \"IMPORTANT\",\n  },\n  informational: {\n    color: \"border-muted\",\n    bgColor: \"bg-muted/10\",\n    textColor: \"text-muted-foreground\",\n    label: \"INFO\",\n  },\n};\n\nexport function Header() {\n  const { data: notifications } = useNotifications();\n  const markReadMutation = useMarkNotificationRead();\n  const dismissMutation = useDismissNotification();\n  const [location] = useLocation();\n  const [isUpgradeModalOpen, setIsUpgradeModalOpen] = useState(false);\n  const isDashboard = location === '/dashboard';\n\n  const activeNotifications = notifications?.filter(n => !n.isDismissed && n.type !== 'browser_notification' && n.type !== 'email_converted') || [];\n  const unreadCount = activeNotifications.filter(n => !n.isRead).length;\n\n  const handleMarkRead = (notificationId: string) => {\n    markReadMutation.mutate(notificationId);\n  };\n\n  const handleDismiss = (notificationId: string) => {\n    dismissMutation.mutate(notificationId);\n  };\n\n  const handleViewNotification = (notification: any) => {\n    if (!notification.isRead) {\n      handleMarkRead(notification.id);\n    }\n    // Notification viewed\n  };\n\n  return (\n    <header className=\"glass-card border-b border-border/50 sticky top-0 z-50\" data-testid=\"header-main\">\n      <div className=\"container mx-auto px-3 py-3\">\n        <div className=\"flex items-center justify-between w-full\">\n          {/* User Profile - Left side */}\n          <div className=\"flex items-center\">\n            <UserProfile />\n          </div>\n\n          {/* Navigation Menu - Center Left */}\n          <div className=\"hidden md:flex items-center space-x-2 flex-1 justify-start ml-6\">\n            <Link href=\"/dashboard\">\n              <Button\n                variant={location === '/dashboard' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Home className=\"w-4 h-4\" />\n                <span>Dashboard</span>\n              </Button>\n            </Link>\n\n            <Link href=\"/emails-converted\">\n              <Button\n                variant={location === '/emails-converted' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Mail className=\"w-4 h-4\" />\n                <span>Converted Emails</span>\n              </Button>\n            </Link>\n\n            <Link href=\"/priority-emails\">\n              <Button\n                variant={location === '/priority-emails' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Star className=\"w-4 h-4\" />\n                <span>Priority Person</span>\n              </Button>\n            </Link>\n\n            <Link href=\"/time-saved\">\n              <Button\n                variant={location === '/time-saved' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Clock className=\"w-4 h-4\" />\n                <span>Time Saved</span>\n              </Button>\n            </Link>\n\n            <Link href=\"/feedback\">\n              <Button\n                variant={location === '/feedback' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"flex items-center space-x-2\"\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n                <span>Feedback</span>\n              </Button>\n            </Link>\n          </div>\n\n          {/* Mobile Navigation */}\n          <div className=\"md:hidden flex items-center space-x-1 flex-1 justify-center\">\n            <Link href=\"/dashboard\">\n              <Button\n                variant={location === '/dashboard' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"px-2\"\n              >\n                <Home className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <Link href=\"/emails-converted\">\n              <Button\n                variant={location === '/emails-converted' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"px-2\"\n              >\n                <Mail className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <Link href=\"/priority-emails\">\n              <Button\n                variant={location === '/priority-emails' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"px-2\"\n              >\n                <Star className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <Link href=\"/time-saved\">\n              <Button\n                variant={location === '/time-saved' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"px-2\"\n              >\n                <Clock className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n            <Link href=\"/feedback\">\n              <Button\n                variant={location === '/feedback' ? 'default' : 'ghost'}\n                size=\"sm\"\n                className=\"px-2\"\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n              </Button>\n            </Link>\n          </div>\n\n          {/* Right side - AI Limit Bar, Upgrade Button, Notifications, Theme Switcher */}\n          <div className=\"flex items-center space-x-1 md:space-x-3\">\n            {/* AI Tasks Limit Bar - Show on all pages */}\n            <div className=\"hidden lg:block\">\n              <AITasksLimitBar />\n            </div>\n\n            <Popover>\n              <PopoverTrigger asChild>\n                <Button className=\"relative p-2 rounded-lg glass-card hover:holographic-glow transition-all duration-300\" data-testid=\"button-notifications\">\n                  <Bell className=\"w-5 h-5\" />\n                  {unreadCount > 0 && (\n                    <span\n                      className=\"absolute -top-1 -right-1 bg-destructive text-destructive-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center pulse-urgent\"\n                      data-testid=\"badge-notification-count\"\n                    >\n                      {unreadCount > 9 ? '9+' : unreadCount}\n                    </span>\n                  )}\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-80 p-0\" align=\"end\">\n                <div className=\"p-4 border-b\">\n                  <h3 className=\"font-semibold text-sm\">Notifications</h3>\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    {unreadCount} unread notifications\n                  </p>\n                </div>\n                <div className=\"max-h-96 overflow-y-auto\">\n                  {activeNotifications.length === 0 ? (\n                    <div className=\"p-4 text-center text-muted-foreground\">\n                      <Bell className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">No notifications yet</p>\n                    </div>\n                  ) : (\n                    activeNotifications.slice(0, 5).map((notification) => {\n                      const config = notificationTypeConfig[notification.type as keyof typeof notificationTypeConfig] || notificationTypeConfig.informational;\n                      const timeAgo = formatDistanceToNow(new Date(notification.createdAt || new Date()), { addSuffix: true });\n\n                      return (\n                        <div\n                          key={notification.id}\n                          className={`p-3 border-b border-border/50 hover:bg-muted/50 transition-colors ${!notification.isRead ? 'bg-primary/5' : ''}`}\n                        >\n                          <div className=\"flex items-start justify-between mb-2\">\n                            <span className={`text-xs font-medium ${config.textColor} uppercase tracking-wide`}>\n                              {config.label}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {timeAgo}\n                            </span>\n                          </div>\n                          <h4 className=\"text-sm font-medium mb-1\">\n                            {notification.sourceApp}: {notification.title}\n                          </h4>\n                          <p className=\"text-xs text-muted-foreground mb-2\">\n                            {notification.aiSummary || notification.description}\n                          </p>\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              onClick={() => handleViewNotification(notification)}\n                              className=\"h-6 px-2 text-xs\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              View\n                            </Button>\n                            <Button\n                              onClick={() => handleDismiss(notification.id)}\n                              disabled={dismissMutation.isPending}\n                              className=\"h-6 px-2 text-xs\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                            >\n                              <X className=\"w-3 h-3 mr-1\" />\n                              Dismiss\n                            </Button>\n                          </div>\n                        </div>\n                      );\n                    })\n                  )}\n                </div>\n                {activeNotifications.length > 5 && (\n                  <div className=\"p-2 border-t\">\n                    <Button variant=\"ghost\" className=\"w-full text-xs\">\n                      View all notifications\n                    </Button>\n                  </div>\n                )}\n              </PopoverContent>\n            </Popover>\n            \n            {/* Upgrade to Premium Button */}\n            <Button\n              onClick={() => setIsUpgradeModalOpen(true)}\n              className=\"relative overflow-hidden bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300\"\n              size=\"sm\"\n            >\n              <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-400 animate-pulse opacity-20\"></div>\n              <Crown className=\"w-4 h-4 md:mr-2\" />\n              <span className=\"relative z-10 hidden md:inline\">Get More Credits</span>\n            </Button>\n\n            {/* Hide theme switcher on mobile */}\n            <div className=\"hidden md:block\">\n              <ThemeSwitcher />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <UpgradeModal\n        isOpen={isUpgradeModalOpen}\n        onClose={() => setIsUpgradeModalOpen(false)}\n      />\n    </header>\n  );\n}","size_bytes":12012},"client/src/components/dashboard/NotificationFeed.tsx":{"content":"import { Bell, Eye, X, Mail, MessageSquare, Calendar, Satellite, CheckSquare } from \"lucide-react\";\nimport { useNotifications, useMarkNotificationRead, useDismissNotification } from \"@/hooks/useNotifications\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { formatDistanceToNow } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst notificationTypeConfig = {\n  urgent: {\n    color: \"border-destructive\",\n    bgColor: \"bg-destructive/10\",\n    textColor: \"text-destructive\",\n    label: \"URGENT\",\n  },\n  important: {\n    color: \"border-orange-500\",\n    bgColor: \"bg-orange-50/20\",\n    textColor: \"text-orange-600\",\n    label: \"IMPORTANT\",\n  },\n  informational: {\n    color: \"border-muted\",\n    bgColor: \"bg-muted/10\",\n    textColor: \"text-muted-foreground\",\n    label: \"INFO\",\n  },\n};\n\nconst getSourceIcon = (sourceApp: string) => {\n    switch (sourceApp) {\n      case \"gmail\":\n        return <Mail className=\"w-4 h-4 text-red-500\" />;\n      case \"slack\":\n        return <MessageSquare className=\"w-4 h-4 text-purple-500\" />;\n      case \"calendar\":\n        return <Calendar className=\"w-4 h-4 text-blue-500\" />;\n      default:\n        return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\nexport function NotificationFeed() {\n  const { data: notifications, isLoading } = useNotifications();\n  const markReadMutation = useMarkNotificationRead();\n  const dismissMutation = useDismissNotification();\n  const queryClient = useQueryClient();\n  const [convertingTasks, setConvertingTasks] = useState<Set<string>>(new Set());\n  const [selectedNotification, setSelectedNotification] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const handleMarkRead = (notificationId: string) => {\n    markReadMutation.mutate(notificationId);\n  };\n\n  const handleDismiss = (notificationId: string) => {\n    dismissMutation.mutate(notificationId);\n  };\n\n  const handleViewNotification = (notification: any) => {\n    // Mark as read when viewing\n    if (!notification.isRead) {\n      handleMarkRead(notification.id);\n    }\n    // Open the notification details dialog\n    setSelectedNotification(notification);\n    setIsDialogOpen(true);\n    // Notification viewed\n  };\n\n  const handleConvertToTask = async (notification: any) => {\n    setConvertingTasks(prev => new Set([...Array.from(prev), notification.id]));\n\n    try {\n      // Use Gemini AI to convert notification to structured task\n      const response = await apiRequest(\"POST\", `/api/notifications/${notification.id}/convert-to-task`);\n\n      // Task created successfully\n\n      // Refresh tasks and notifications - match the exact query key patterns\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: \"demo-user\" }] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    } catch (error) {\n      // Silently handle conversion errors\n    } finally {\n      setConvertingTasks(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(notification.id);\n        return newSet;\n      });\n    }\n  };\n\n  const handlePushAllToTasks = async () => {\n    const notificationIds = activeNotifications.map(n => n.id);\n    setConvertingTasks(new Set(notificationIds));\n\n    try {\n      // Use batch processing for 8+ notifications to optimize performance\n      if (activeNotifications.length >= 8) {\n        console.log(`[BatchProcessing] Processing ${activeNotifications.length} notifications in batch mode`);\n\n        await apiRequest(\"POST\", \"/api/notifications/batch-convert-to-tasks\", {\n          userId: \"demo-user\",\n          notifications: activeNotifications.map(n => ({\n            id: n.id,\n            title: n.title,\n            description: n.description || n.aiSummary || \"\",\n            sourceApp: n.sourceApp,\n            type: n.type,\n            metadata: {\n              batchProcessed: true,\n              convertedAt: new Date().toISOString()\n            }\n          }))\n        });\n      } else {\n        // Individual processing for smaller batches (better for AI analysis)\n        const promises = activeNotifications.map(async (notification) => {\n          await apiRequest(\"POST\", `/api/notifications/${notification.id}/convert-to-task`);\n        });\n\n        await Promise.all(promises);\n      }\n\n      // Refresh tasks and notifications - match the exact query key patterns\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: \"demo-user\" }] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    } catch (error) {\n      console.error(\"Error converting notifications to tasks:\", error);\n    } finally {\n      setConvertingTasks(new Set());\n    }\n  };\n\n\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-lg p-6 h-full flex flex-col\" data-testid=\"card-notification-feed\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-muted/30 rounded w-2/3\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-24 bg-muted/20 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const activeNotifications = notifications?.filter(n => !n.isDismissed && n.type !== 'email_converted' && n.type !== 'browser_notification') || [];\n\n  return (\n    <div className=\"glass-card rounded-lg p-6 h-full animate-in slide-in-from-right-5 duration-700 flex flex-col\" data-testid=\"card-notification-feed\">\n      {/* Fixed Header Section */}\n      <div className=\"flex-shrink-0\">\n        {/* Gmail Status */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-center py-3 px-4 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200/30 backdrop-blur-sm\">\n            <div className=\"flex items-center space-x-2 group\">\n              <div className=\"relative\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <div className=\"absolute inset-0 w-2 h-2 bg-green-400 rounded-full animate-ping opacity-75\"></div>\n              </div>\n              <span className=\"text-sm font-semibold text-green-600 tracking-wide\">\n                Gmail Connected\n              </span>\n              <div className=\"text-xs text-green-500/80 font-medium animate-pulse\">\n                • LIVE\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-lg font-semibold flex items-center font-display animate-in fade-in-50 duration-500 delay-200\" data-testid=\"text-notifications-title\">\n            <Bell className=\"w-5 h-5 mr-2 text-primary animate-pulse\" />\n            Notifications\n          </h2>\n          <div className=\"flex space-x-2\">\n            {activeNotifications.length > 0 && (\n              <Button\n                onClick={handlePushAllToTasks}\n                disabled={convertingTasks.size > 0}\n                className=\"bg-primary/20 hover:bg-primary/30 px-3 py-2 rounded-lg text-sm font-medium transition-all hover:scale-105 text-primary\"\n                variant=\"ghost\"\n                size=\"sm\"\n                data-testid=\"button-push-all-to-tasks\"\n              >\n                <CheckSquare className=\"w-4 h-4 mr-1\" />\n                {convertingTasks.size > 0 ? \"Converting...\" : \"Push to Tasks\"}\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Scrollable Content Area */}\n      <div className=\"space-y-3 flex-1 overflow-y-auto min-h-0\">\n        {activeNotifications.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\" data-testid=\"text-no-notifications\">\n            <Bell className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No active notifications.</p>\n            <p className=\"text-sm mt-2\">Your command center is clear!</p>\n          </div>\n        ) : (\n          activeNotifications.map((notification) => {\n            const config = notificationTypeConfig[notification.type as keyof typeof notificationTypeConfig] || notificationTypeConfig.informational;\n            const timeAgo = formatDistanceToNow(new Date(notification.createdAt || new Date()), { addSuffix: true });\n\n            return (\n              <div\n                key={notification.id}\n                className={`border-l-2 ${config.color} ${config.bgColor} rounded-r-lg p-3 ${!notification.isRead ? 'ring-1 ring-primary/20' : ''} animate-in slide-in-from-left-3 duration-500 hover:scale-[1.02] transition-all hover:shadow-lg`}\n                data-testid={`notification-item-${notification.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-3\">\n                      <Badge \n                        variant={notification.type === 'urgent' ? 'destructive' : \n                                notification.type === 'important' ? 'default' : 'secondary'}\n                        className=\"text-xs\"\n                      >\n                        {notification.type}\n                      </Badge>\n                      {notification.metadata?.isPriorityPerson && (\n                        <Badge \n                          className=\"text-xs bg-red-500 text-white border-red-500 hover:bg-red-600\"\n                        >\n                          Priority Person\n                        </Badge>\n                      )}\n                    </div>\n                  <span className=\"text-xs text-muted-foreground ml-3\" data-testid={`notification-time-${notification.id}`}>\n                    {timeAgo}\n                  </span>\n                </div>\n                <h3 className=\"text-sm font-medium flex items-center\" data-testid={`notification-title-${notification.id}`}>\n                  {getSourceIcon(notification.sourceApp || \"default\")}\n                  <span className=\"ml-2\">{notification.sourceApp}: {notification.title}</span>\n                </h3>\n                <p className=\"text-xs text-muted-foreground mt-1\" data-testid={`notification-description-${notification.id}`}>\n                  {notification.aiSummary || notification.description}\n                </p>\n                <div className=\"flex space-x-2 mt-2\">\n                  <Button\n                    onClick={() => handleViewNotification(notification)}\n                    className={`${config.bgColor}/50 hover:${config.bgColor}/80 px-2 py-1 rounded text-xs transition-all hover:scale-105`}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid={`button-view-notification-${notification.id}`}\n                  >\n                    <Eye className=\"w-3 h-3 mr-1\" />\n                    View\n                  </Button>\n                  <Button\n                    onClick={() => handleConvertToTask(notification)}\n                    disabled={convertingTasks.has(notification.id)}\n                    className=\"bg-primary/20 hover:bg-primary/30 px-2 py-1 rounded text-xs transition-all hover:scale-105 text-primary\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid={`button-convert-task-${notification.id}`}\n                  >\n                    <CheckSquare className=\"w-3 h-3 mr-1\" />\n                    {convertingTasks.has(notification.id) ? \"Converting...\" : \"To Task\"}\n                  </Button>\n                  <Button\n                    onClick={() => handleDismiss(notification.id)}\n                    disabled={dismissMutation.isPending}\n                    className=\"bg-muted/20 hover:bg-muted/30 px-2 py-1 rounded text-xs transition-all hover:scale-105\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    data-testid={`button-dismiss-notification-${notification.id}`}\n                  >\n                    <X className=\"w-3 h-3\" />\n                  </Button>\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      {/* Email Details Dialog */}\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              {selectedNotification && getSourceIcon(selectedNotification.sourceApp)}\n              <span className=\"ml-2\">{selectedNotification?.title || 'Notification Details'}</span>\n            </DialogTitle>\n            <DialogDescription>\n              {selectedNotification && `From: ${selectedNotification.sourceApp} • ${formatDistanceToNow(new Date(selectedNotification.createdAt), { addSuffix: true })}`}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedNotification && (\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <h4 className=\"font-medium mb-2\">Subject:</h4>\n                <p className=\"text-sm text-muted-foreground\">{selectedNotification.title}</p>\n              </div>\n\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <h4 className=\"font-medium mb-2\">Email Content:</h4>\n                <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                  {selectedNotification.metadata?.fullEmailContent || selectedNotification.description || selectedNotification.aiSummary || 'No content available'}\n                </p>\n              </div>\n\n              {selectedNotification.actionableInsights && selectedNotification.actionableInsights.length > 0 && (\n                <div className=\"border rounded-lg p-4 bg-muted/20\">\n                  <h4 className=\"font-medium mb-2\">AI Insights:</h4>\n                  <ul className=\"text-sm text-muted-foreground space-y-1\">\n                    {selectedNotification.actionableInsights.map((insight: string, index: number) => (\n                      <li key={index}>• {insight}</li>\n                    ))}\n                  </ul>\n                </div>\n              )}\n\n              <div className=\"flex space-x-2 pt-4\">\n                <Button\n                  onClick={() => {\n                    handleConvertToTask(selectedNotification);\n                    setIsDialogOpen(false);\n                  }}\n                  className=\"flex-1\"\n                >\n                  <CheckSquare className=\"w-4 h-4 mr-2\" />\n                  Convert to Task\n                </Button>\n                <Button\n                  onClick={() => {\n                    handleDismiss(selectedNotification.id);\n                    setIsDialogOpen(false);\n                  }}\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15263},"client/src/components/dashboard/RealTimeMetrics.tsx":{"content":"import { Gauge, Target, Clock, TrendingUp } from \"lucide-react\";\nimport { useMetrics } from \"@/hooks/useMetrics\";\n\nexport function RealTimeMetrics() {\n  const { data: metrics, isLoading } = useMetrics();\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-lg p-6\" data-testid=\"card-metrics\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-muted/30 rounded w-2/3\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-8 bg-muted/20 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const workloadCapacity = metrics?.workloadCapacity || 0;\n  const stressLevel = metrics?.stressLevel || \"low\";\n  const todayProgress = metrics?.todayProgress || 0;\n  const tasksCompleted = metrics?.tasksCompleted || 0;\n  const activeHours = metrics?.activeHours || 0;\n\n  const getStressColor = (level: string) => {\n    switch (level) {\n      case \"high\":\n        return \"text-destructive\";\n      case \"medium\":\n        return \"text-accent\";\n      default:\n        return \"text-green-400\";\n    }\n  };\n\n  const getProgressColor = (percentage: number) => {\n    if (percentage >= 80) return \"from-green-400 to-emerald-500\";\n    if (percentage >= 60) return \"from-primary to-secondary\";\n    return \"from-accent to-yellow-400\";\n  };\n\n  return (\n    <div className=\"glass-card rounded-lg p-6\" data-testid=\"card-metrics\">\n      <h2 className=\"text-lg font-semibold mb-4 flex items-center font-display\" data-testid=\"text-metrics-title\">\n        <Gauge className=\"w-5 h-5 mr-2 text-green-400\" />\n        Metrics\n      </h2>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-muted-foreground\">Workload Capacity</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-16 bg-muted/30 rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-green-400 to-accent h-2 rounded-full transition-all duration-500\"\n                style={{ width: `${workloadCapacity}%` }}\n                data-testid=\"progress-workload-capacity\"\n              />\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"text-workload-capacity\">\n              {workloadCapacity}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-muted-foreground\">Stress Level</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-16 bg-muted/30 rounded-full h-2\">\n              <div \n                className={`bg-gradient-to-r ${stressLevel === \"high\" ? \"from-destructive to-red-400\" : stressLevel === \"medium\" ? \"from-accent to-yellow-400\" : \"from-green-400 to-emerald-500\"} h-2 rounded-full transition-all duration-500`}\n                style={{ width: `${stressLevel === \"high\" ? 80 : stressLevel === \"medium\" ? 50 : 30}%` }}\n                data-testid=\"progress-stress-level\"\n              />\n            </div>\n            <span className={`text-sm font-medium capitalize ${getStressColor(stressLevel)}`} data-testid=\"text-stress-level\">\n              {stressLevel}\n            </span>\n          </div>\n        </div>\n\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-sm text-muted-foreground\">Today's Progress</span>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-16 bg-muted/30 rounded-full h-2\">\n              <div \n                className={`bg-gradient-to-r ${getProgressColor(todayProgress)} h-2 rounded-full transition-all duration-500`}\n                style={{ width: `${todayProgress}%` }}\n                data-testid=\"progress-today-progress\"\n              />\n            </div>\n            <span className=\"text-sm font-medium\" data-testid=\"text-today-progress\">\n              {todayProgress}%\n            </span>\n          </div>\n        </div>\n\n        <div className=\"border-t border-border/50 pt-4\">\n          <div className=\"grid grid-cols-2 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-primary\" data-testid=\"text-tasks-completed\">\n                {tasksCompleted}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Tasks Done</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-secondary\" data-testid=\"text-active-hours\">\n                {activeHours.toFixed(1)}h\n              </div>\n              <div className=\"text-xs text-muted-foreground\">Active Time</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"pt-2\">\n          <div className=\"grid grid-cols-1 gap-2 text-sm\">\n            <div className=\"flex items-center justify-between p-2 rounded bg-muted/10\">\n              <div className=\"flex items-center space-x-2\">\n                <Target className=\"w-4 h-4 text-primary\" />\n                <span>Productivity Score</span>\n              </div>\n              <span className=\"font-medium text-primary\" data-testid=\"text-productivity-score\">\n                {Math.round((todayProgress + (100 - (stressLevel === \"high\" ? 70 : stressLevel === \"medium\" ? 30 : 10))) / 2)}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between p-2 rounded bg-muted/10\">\n              <div className=\"flex items-center space-x-2\">\n                <Clock className=\"w-4 h-4 text-accent\" />\n                <span>Avg. Task Time</span>\n              </div>\n              <span className=\"font-medium text-accent\" data-testid=\"text-avg-task-time\">\n                {tasksCompleted > 0 ? Math.round((activeHours * 60) / tasksCompleted) : 0}m\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5946},"client/src/components/dashboard/UpgradeModal.tsx":{"content":"import React, { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, Crown, Sparkles, Star, X, CheckCircle } from \"lucide-react\";\n\ninterface UpgradeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function UpgradeModal({ isOpen, onClose }: UpgradeModalProps) {\n  const [isJoiningWaitlist, setIsJoiningWaitlist] = useState(false);\n  const [waitlistJoined, setWaitlistJoined] = useState(false);\n\n  const handleJoinWaitlist = async () => {\n    setIsJoiningWaitlist(true);\n\n    try {\n      // Get user email from localStorage or use demo email\n      const userEmail = localStorage.getItem('userEmail') || 'demo-user@example.com';\n\n      const response = await fetch('/api/waitlist/join', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userEmail,\n          plan: 'professional'\n        }),\n      });\n\n      if (response.ok) {\n        setWaitlistJoined(true);\n      }\n    } catch (error) {\n      console.error('Failed to join waitlist:', error);\n    } finally {\n      setIsJoiningWaitlist(false);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto upgrade-modal-content\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-2\">\n            <Crown className=\"w-6 h-6 text-yellow-500\" />\n            <DialogTitle className=\"text-2xl bg-gradient-to-r from-yellow-500 to-orange-500 bg-clip-text text-transparent\">\n              Upgrade to Premium\n            </DialogTitle>\n          </div>\n          <DialogDescription>\n            Choose the perfect plan for your productivity needs\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-6 mt-6\">\n          {/* Free Plan */}\n          <div className=\"border rounded-lg p-6 bg-card hover:shadow-md transition-shadow\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold\">Free Plan</h3>\n              <Badge variant=\"secondary\">Current</Badge>\n            </div>\n\n            <div className=\"mb-6\">\n              <div className=\"text-3xl font-bold mb-2\">₹0</div>\n              <p className=\"text-muted-foreground\">Perfect for getting started</p>\n            </div>\n\n            <ul className=\"space-y-3 mb-6\">\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"w-4 h-4 text-green-500\" />\n                <span>50 AI task conversions/month</span>\n              </li>\n              <li className=\"flex items-center space-x-2\">\n                <Check className=\"w-4 h-4 text-green-500\" />\n                <span>Basic email integration</span>\n              </li>\n            </ul>\n\n            <Button variant=\"outline\" className=\"w-full\" disabled>\n              Current Plan\n            </Button>\n          </div>\n\n          {/* Professional Plan */}\n          <div className=\"border-2 border-gradient-to-r from-yellow-500 to-orange-500 rounded-lg p-6 bg-card hover:shadow-lg transition-all duration-300 relative overflow-hidden\">\n            <div className=\"absolute top-0 right-0 bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-2 py-1 rounded-bl-lg\">\n              <span className=\"text-xs font-medium\">POPULAR</span>\n            </div>\n\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold\">Professional</h3>\n              <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n                Recommended\n              </Badge>\n            </div>\n\n            <div className=\"mb-6\">\n              <div className=\"text-3xl font-bold mb-2\">₹149</div>\n              <p className=\"text-muted-foreground\">Per month</p>\n            </div>\n\n            <ul className=\"space-y-3 mb-6\">\n              <li className=\"flex items-center space-x-2 group\">\n                <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"relative text-xl font-bold text-orange-500 golden-shine-text\">500</span>\n                  <span className=\"text-lg text-muted-foreground\">AI task conversions/month</span>\n                </div>\n              </li>\n              <li className=\"flex items-center space-x-2 group\">\n                <Check className=\"w-4 h-4 text-green-500 group-hover:scale-110 transition-transform\" />\n                <span className=\"font-semibold text-orange-600 group-hover:text-orange-500 transition-colors\">Priority notifications</span>\n              </li>\n              <li className=\"flex items-center space-x-2 group\">\n                <Check className=\"w-4 h-4 text-green-500 group-hover:scale-110 transition-transform\" />\n                <span className=\"font-semibold text-orange-600 group-hover:text-orange-500 transition-colors\">Priority support</span>\n              </li>\n            </ul>\n\n            {waitlistJoined ? (\n              <Button className=\"w-full bg-green-600 hover:bg-green-700\" disabled>\n                <Check className=\"w-4 h-4 mr-2\" />\n                Joined Waitlist!\n              </Button>\n            ) : (\n              <Button\n                className=\"w-full bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white\"\n                onClick={handleJoinWaitlist}\n                disabled={isJoiningWaitlist}\n              >\n                {isJoiningWaitlist ? (\n                  <>\n                    <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\n                    Joining Waitlist...\n                  </>\n                ) : (\n                  <>\n                    Join Waitlist\n                  </>\n                )}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n          <p>✨ All plans include our core features with different usage limits</p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6397},"client/src/components/dashboard/UserProfile.tsx":{"content":"\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { useLocation } from 'wouter';\nimport { User, LogOut, Settings, ChevronDown, Camera, Save, X, RotateCcw, ZoomIn, ZoomOut, Move } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { useCurrentUser } from '@/hooks/useAuth';\nimport { useQueryClient } from '@tanstack/react-query';\n\ninterface UserData {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profilePicture?: string;\n}\n\ninterface CropData {\n  x: number;\n  y: number;\n  size: number;\n  scale: number;\n}\n\nexport function UserProfile() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user: userAuth, isLoading, isAuthenticated } = useCurrentUser();\n  const queryClient = useQueryClient();\n  \n  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState<UserData>({\n    email: '',\n    firstName: '',\n    lastName: '',\n    profilePicture: ''\n  });\n\n  // Image cropping states\n  const [showCropper, setShowCropper] = useState(false);\n  const [originalImage, setOriginalImage] = useState<string>('');\n  const [cropData, setCropData] = useState<CropData>({ x: 0, y: 0, size: 200, scale: 1 });\n  const [isDragging, setIsDragging] = useState(false);\n  const [isResizing, setIsResizing] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  \n  const containerRef = useRef<HTMLDivElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const imageRef = useRef<HTMLImageElement>(null);\n\n  // Update editData when userAuth changes\n  useEffect(() => {\n    if (userAuth) {\n      // Parse name if firstName/lastName not available\n      let firstName = userAuth.firstName || '';\n      let lastName = userAuth.lastName || '';\n      \n      if (!firstName && !lastName && userAuth.name) {\n        const nameParts = userAuth.name.split(' ');\n        firstName = nameParts[0] || '';\n        lastName = nameParts.slice(1).join(' ') || '';\n      }\n      \n      setEditData({\n        email: userAuth.email || '',\n        firstName,\n        lastName,\n        profilePicture: userAuth.profilePicture || userAuth.profileImageUrl || ''\n      });\n    }\n  }, [userAuth]);\n\n  const handleLogout = async () => {\n    try {\n      // Clear local storage first\n      localStorage.removeItem('user_auth');\n      \n      // Call logout API\n      await fetch('/api/auth/logout', {\n        method: 'POST',\n        credentials: 'include'\n      });\n      \n      // Navigate to landing page and force refresh\n      setLocation('/');\n      window.location.reload();\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Force logout even if API call fails\n      localStorage.removeItem('user_auth');\n      setLocation('/');\n      window.location.reload();\n    }\n  };\n\n  const handleSaveProfile = async () => {\n    try {\n      console.log('Sending profile update:', editData);\n      \n      const response = await fetch('/api/auth/profile', { \n        method: 'PUT', \n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(editData) \n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update profile');\n      }\n\n      const result = await response.json();\n      console.log('Profile update response:', result);\n      \n      setIsEditing(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been successfully updated.\",\n      });\n\n      // Invalidate and refetch user data to update the UI immediately\n      await queryClient.invalidateQueries({ \n        queryKey: [\"/api/auth/me\"]\n      });\n      \n      // Force refetch to ensure immediate update\n      await queryClient.refetchQueries({\n        queryKey: [\"/api/auth/me\"]\n      });\n      \n      // Small delay before closing modal to allow UI to update\n      setTimeout(() => {\n        setIsProfileModalOpen(false);\n      }, 500);\n      \n    } catch (error) {\n      console.error('Profile update error:', error);\n      toast({\n        title: \"Update Failed\",\n        description: error instanceof Error ? error.message : \"Failed to update profile. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Check file size (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"File too large\",\n          description: \"Please select an image smaller than 5MB.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      // Check file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Invalid file type\",\n          description: \"Please select an image file.\",\n          variant: \"destructive\"\n        });\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setOriginalImage(result);\n        setShowCropper(true);\n        // Reset crop data for new image\n        setCropData({ x: 50, y: 50, size: 200, scale: 1 });\n      };\n      reader.readAsDataURL(file);\n    }\n    // Reset the input value so the same file can be selected again\n    event.target.value = '';\n  };\n\n  // Draw the image and crop overlay\n  const drawCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const image = imageRef.current;\n    if (!canvas || !image || !originalImage) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Set canvas size\n    const canvasSize = 400;\n    canvas.width = canvasSize;\n    canvas.height = canvasSize;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate scaled image dimensions\n    const scaledWidth = image.naturalWidth * cropData.scale;\n    const scaledHeight = image.naturalHeight * cropData.scale;\n    \n    // Center the image initially, then apply offset\n    const imageX = (canvasSize - scaledWidth) / 2 + cropData.x;\n    const imageY = (canvasSize - scaledHeight) / 2 + cropData.y;\n\n    // Draw image\n    ctx.drawImage(image, imageX, imageY, scaledWidth, scaledHeight);\n\n    // Draw dark overlay\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.6)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Calculate crop area position (centered)\n    const cropX = (canvasSize - cropData.size) / 2;\n    const cropY = (canvasSize - cropData.size) / 2;\n\n    // Clear crop area to show original image\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.fillRect(cropX, cropY, cropData.size, cropData.size);\n    \n    // Reset composite operation\n    ctx.globalCompositeOperation = 'source-over';\n\n    // Draw crop border\n    ctx.strokeStyle = '#3b82f6';\n    ctx.lineWidth = 2;\n    ctx.strokeRect(cropX, cropY, cropData.size, cropData.size);\n\n    // Draw corner handles\n    const handleSize = 12;\n    ctx.fillStyle = '#3b82f6';\n    \n    // Top-left\n    ctx.fillRect(cropX - handleSize/2, cropY - handleSize/2, handleSize, handleSize);\n    // Top-right  \n    ctx.fillRect(cropX + cropData.size - handleSize/2, cropY - handleSize/2, handleSize, handleSize);\n    // Bottom-left\n    ctx.fillRect(cropX - handleSize/2, cropY + cropData.size - handleSize/2, handleSize, handleSize);\n    // Bottom-right\n    ctx.fillRect(cropX + cropData.size - handleSize/2, cropY + cropData.size - handleSize/2, handleSize, handleSize);\n\n  }, [originalImage, cropData]);\n\n  // Generate cropped image\n  const getCroppedImage = useCallback(() => {\n    const canvas = canvasRef.current;\n    const image = imageRef.current;\n    \n    if (!canvas || !image) return '';\n\n    // Create a temporary canvas for cropping\n    const cropCanvas = document.createElement('canvas');\n    const ctx = cropCanvas.getContext('2d');\n    if (!ctx) return '';\n\n    // Set output size to 200x200\n    cropCanvas.width = 200;\n    cropCanvas.height = 200;\n\n    const canvasSize = 400;\n    \n    // Calculate scaled image dimensions and position\n    const scaledWidth = image.naturalWidth * cropData.scale;\n    const scaledHeight = image.naturalHeight * cropData.scale;\n    const imageX = (canvasSize - scaledWidth) / 2 + cropData.x;\n    const imageY = (canvasSize - scaledHeight) / 2 + cropData.y;\n    \n    // Calculate crop area\n    const cropX = (canvasSize - cropData.size) / 2;\n    const cropY = (canvasSize - cropData.size) / 2;\n    \n    // Calculate source rectangle from the scaled image\n    const sourceX = Math.max(0, (cropX - imageX) * (image.naturalWidth / scaledWidth));\n    const sourceY = Math.max(0, (cropY - imageY) * (image.naturalHeight / scaledHeight));\n    const sourceWidth = cropData.size * (image.naturalWidth / scaledWidth);\n    const sourceHeight = cropData.size * (image.naturalHeight / scaledHeight);\n\n    // Draw cropped image\n    ctx.drawImage(\n      image,\n      sourceX, sourceY, sourceWidth, sourceHeight,\n      0, 0, 200, 200\n    );\n\n    return cropCanvas.toDataURL('image/jpeg', 0.9);\n  }, [cropData]);\n\n  // Mouse handlers for cropping\n  const getMousePosition = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const canvas = canvasRef.current;\n    if (!canvas) return { x: 0, y: 0 };\n    \n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: (e.clientX - rect.left) * (canvas.width / rect.width),\n      y: (e.clientY - rect.top) * (canvas.height / rect.height)\n    };\n  };\n\n  const isInCropArea = (x: number, y: number) => {\n    const canvasSize = 400;\n    const cropX = (canvasSize - cropData.size) / 2;\n    const cropY = (canvasSize - cropData.size) / 2;\n    \n    return x >= cropX && x <= cropX + cropData.size && \n           y >= cropY && y <= cropY + cropData.size;\n  };\n\n  const isOnHandle = (x: number, y: number) => {\n    const canvasSize = 400;\n    const cropX = (canvasSize - cropData.size) / 2;\n    const cropY = (canvasSize - cropData.size) / 2;\n    const handleSize = 12;\n    \n    const handles = [\n      { x: cropX, y: cropY },\n      { x: cropX + cropData.size, y: cropY },\n      { x: cropX, y: cropY + cropData.size },\n      { x: cropX + cropData.size, y: cropY + cropData.size }\n    ];\n    \n    return handles.some(handle => \n      x >= handle.x - handleSize/2 && x <= handle.x + handleSize/2 &&\n      y >= handle.y - handleSize/2 && y <= handle.y + handleSize/2\n    );\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const { x, y } = getMousePosition(e);\n    \n    if (isOnHandle(x, y)) {\n      setIsResizing(true);\n      setDragStart({ x, y });\n    } else if (isInCropArea(x, y)) {\n      setIsDragging(true);\n      setDragStart({ x: x - cropData.x, y: y - cropData.y });\n    }\n  };\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLCanvasElement>) => {\n    const { x, y } = getMousePosition(e);\n    \n    if (isResizing) {\n      const canvasSize = 400;\n      const centerX = canvasSize / 2;\n      const centerY = canvasSize / 2;\n      \n      // Calculate new size based on distance from center\n      const distanceFromCenter = Math.sqrt(\n        Math.pow(x - centerX, 2) + Math.pow(y - centerY, 2)\n      );\n      \n      const newSize = Math.max(50, Math.min(300, distanceFromCenter * 2));\n      setCropData(prev => ({ ...prev, size: newSize }));\n      \n    } else if (isDragging) {\n      setCropData(prev => ({\n        ...prev,\n        x: x - dragStart.x,\n        y: y - dragStart.y\n      }));\n    }\n  };\n\n  const handleMouseUp = () => {\n    setIsDragging(false);\n    setIsResizing(false);\n  };\n\n  // Crop controls\n  const handleZoomIn = () => {\n    setCropData(prev => ({ ...prev, scale: Math.min(prev.scale + 0.2, 5) }));\n  };\n\n  const handleZoomOut = () => {\n    setCropData(prev => ({ ...prev, scale: Math.max(prev.scale - 0.2, 0.3) }));\n  };\n\n  const handleResetCrop = () => {\n    setCropData({ x: 0, y: 0, size: 200, scale: 1 });\n  };\n\n  const handleApplyCrop = () => {\n    const croppedImage = getCroppedImage();\n    if (croppedImage) {\n      // Force a re-render by updating the state immediately\n      setEditData(prev => ({ ...prev, profilePicture: croppedImage }));\n      setShowCropper(false);\n      setOriginalImage('');\n      \n      // Force component re-render to show the new image immediately\n      setTimeout(() => {\n        setEditData(prev => ({ ...prev, profilePicture: croppedImage }));\n      }, 50);\n    }\n  };\n\n  const handleCancelCrop = () => {\n    setShowCropper(false);\n    setOriginalImage('');\n  };\n\n  // Update canvas when crop data changes\n  useEffect(() => {\n    if (showCropper && originalImage) {\n      const timer = setTimeout(drawCanvas, 10);\n      return () => clearTimeout(timer);\n    }\n  }, [showCropper, originalImage, cropData, drawCanvas]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"h-9 w-9 rounded-full bg-muted animate-pulse\"></div>\n        <div className=\"hidden md:flex flex-col space-y-1\">\n          <div className=\"h-4 w-20 bg-muted animate-pulse rounded\"></div>\n          <div className=\"h-3 w-24 bg-muted animate-pulse rounded\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !userAuth) {\n    return null;\n  }\n\n  const getDisplayName = () => {\n    if (!userAuth) return 'User';\n    \n    // Priority: firstName + lastName > name > email prefix\n    if (userAuth.firstName && userAuth.lastName) {\n      return `${userAuth.firstName} ${userAuth.lastName}`;\n    }\n    if (userAuth.firstName) {\n      return userAuth.firstName;\n    }\n    if (userAuth.name && userAuth.name !== userAuth.email) {\n      return userAuth.name;\n    }\n    if (userAuth.email) {\n      return userAuth.email.split('@')[0].replace(/[._]/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n    }\n    return 'User';\n  };\n\n  const userInitials = getDisplayName()\n    .split(' ')\n    .map((name: string) => name[0]?.toUpperCase())\n    .join('')\n    .slice(0, 2);\n\n  // Get the current profile image URL with proper cache busting\n  const getCurrentProfileImage = () => {\n    // During editing, prioritize edit data\n    if (isEditing && editData.profilePicture && editData.profilePicture.trim()) {\n      return editData.profilePicture;\n    }\n    \n    // Use saved user profile image\n    const baseUrl = userAuth?.profilePicture || userAuth?.profileImageUrl;\n    if (!baseUrl || baseUrl.trim() === '') return '';\n    \n    // Always add cache busting for all images to force refresh\n    if (baseUrl.startsWith('data:')) {\n      return baseUrl;\n    }\n    \n    // Add timestamp for cache busting\n    const timestamp = Date.now();\n    const separator = baseUrl.includes('?') ? '&' : '?';\n    return `${baseUrl}${separator}t=${timestamp}`;\n  };\n\n  return (\n    <>\n      <div className=\"flex items-center space-x-3\">\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button \n              variant=\"ghost\" \n              className=\"h-auto px-2 py-2 flex items-center space-x-2 hover:bg-accent/50 transition-colors rounded-lg\"\n              data-testid=\"user-profile-trigger\"\n            >\n              <Avatar className=\"h-9 w-9\">\n                <AvatarImage \n                  key={`main-${getCurrentProfileImage()}-${Date.now()}`}\n                  src={getCurrentProfileImage()}\n                  alt={userAuth?.email || 'User'}\n                  className=\"object-cover\"\n                  onError={(e) => {\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'none';\n                  }}\n                  onLoad={(e) => {\n                    // Force a re-render when image loads\n                    const target = e.target as HTMLImageElement;\n                    target.style.display = 'block';\n                  }}\n                />\n                <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-sm font-semibold\">\n                  {userInitials}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"hidden md:flex flex-col items-start\">\n                <span className=\"text-sm font-medium leading-none\">\n                  {getDisplayName()}\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  {userAuth.email}\n                </span>\n              </div>\n            </Button>\n          </DropdownMenuTrigger>\n          \n          <DropdownMenuContent \n            className=\"w-64\" \n            align=\"start\"\n            data-testid=\"user-profile-menu\"\n          >\n            <div className=\"flex items-center space-x-3 p-3\">\n              <Avatar className=\"h-9 w-9\">\n                <AvatarImage \n                  key={`dropdown-${getCurrentProfileImage()}-${Date.now()}`}\n                  src={getCurrentProfileImage()}\n                  alt={userAuth?.email || 'User'}\n                  className=\"object-cover\"\n                />\n                <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-sm font-semibold\">\n                  {userInitials}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex flex-col space-y-1\">\n                <p className=\"text-sm font-medium leading-none\">\n                  {getDisplayName()}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {userAuth.email}\n                </p>\n              </div>\n            </div>\n            \n            <DropdownMenuSeparator />\n            \n            <DropdownMenuItem \n              className=\"cursor-pointer\" \n              onClick={() => setIsProfileModalOpen(true)}\n              data-testid=\"profile-settings\"\n            >\n              <User className=\"mr-2 h-4 w-4\" />\n              <span>Profile</span>\n            </DropdownMenuItem>\n            \n            <DropdownMenuSeparator />\n            \n            <DropdownMenuItem \n              className=\"cursor-pointer text-red-600 focus:text-red-600\" \n              onClick={handleLogout}\n              data-testid=\"logout-button\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              <span>Log out</span>\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      {/* Profile Edit Modal */}\n      <Dialog open={isProfileModalOpen} onOpenChange={setIsProfileModalOpen}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              User Profile\n              {isEditing ? (\n                <div className=\"flex space-x-2\">\n                  <Button \n                    size=\"sm\" \n                    onClick={handleSaveProfile}\n                    className=\"bg-green-600 hover:bg-green-700\"\n                  >\n                    <Save className=\"w-4 h-4 mr-1\" />\n                    Save\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsEditing(false);\n                      setEditData({\n                        email: userAuth?.email || '',\n                        firstName: userAuth?.firstName || '',\n                        lastName: userAuth?.lastName || '',\n                        profilePicture: userAuth?.profilePicture || ''\n                      });\n                    }}\n                  >\n                    <X className=\"w-4 h-4 mr-1\" />\n                    Cancel\n                  </Button>\n                </div>\n              ) : (\n                <Button size=\"sm\" onClick={() => setIsEditing(true)}>\n                  Edit Profile\n                </Button>\n              )}\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-6 py-4\">\n            {/* Profile Picture */}\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"relative\">\n                <Avatar className=\"h-20 w-20\">\n                  <AvatarImage \n                    key={isEditing ? editData.profilePicture : getCurrentProfileImage()}\n                    src={isEditing ? editData.profilePicture : getCurrentProfileImage()} \n                    alt=\"Profile\"\n                    className=\"object-cover\"\n                  />\n                  <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white text-lg font-semibold\">\n                    {userInitials}\n                  </AvatarFallback>\n                </Avatar>\n                {isEditing && (\n                  <Label htmlFor=\"profile-upload\" className=\"absolute -bottom-2 -right-2 bg-primary text-primary-foreground rounded-full p-2 cursor-pointer hover:bg-primary/90 transition-colors\">\n                    <Camera className=\"w-4 h-4\" />\n                    <input\n                      id=\"profile-upload\"\n                      type=\"file\"\n                      accept=\"image/jpeg,image/jpg,image/png,image/gif,image/webp\"\n                      className=\"hidden\"\n                      onChange={handleImageUpload}\n                    />\n                  </Label>\n                )}\n              </div>\n              {!isEditing && (\n                <div className=\"text-center\">\n                  <p className=\"font-medium text-lg\">{getDisplayName()}</p>\n                  <p className=\"text-sm text-muted-foreground\">{userAuth.email}</p>\n                </div>\n              )}\n            </div>\n\n            {/* Edit Form */}\n            {isEditing && (\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <Input\n                    id=\"firstName\"\n                    value={editData.firstName}\n                    onChange={(e) => setEditData(prev => ({ ...prev, firstName: e.target.value }))}\n                    placeholder=\"Enter your first name\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <Input\n                    id=\"lastName\"\n                    value={editData.lastName}\n                    onChange={(e) => setEditData(prev => ({ ...prev, lastName: e.target.value }))}\n                    placeholder=\"Enter your last name\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Image Cropper Dialog */}\n      <Dialog open={showCropper} onOpenChange={setShowCropper}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Crop Profile Picture</DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Canvas for cropping */}\n            <div className=\"flex justify-center\">\n              <div \n                ref={containerRef}\n                className=\"relative border-2 border-gray-300 rounded-lg overflow-hidden bg-gray-100\"\n                style={{ width: '400px', height: '400px' }}\n              >\n                <canvas\n                  ref={canvasRef}\n                  className=\"cursor-move select-none\"\n                  style={{ width: '100%', height: '100%' }}\n                  onMouseDown={handleMouseDown}\n                  onMouseMove={handleMouseMove}\n                  onMouseUp={handleMouseUp}\n                  onMouseLeave={handleMouseUp}\n                />\n              </div>\n            </div>\n\n            {/* Instructions */}\n            <div className=\"text-center text-sm text-gray-600 space-y-1\">\n              <p className=\"flex items-center justify-center gap-2\">\n                <Move className=\"w-4 h-4\" />\n                Drag the crop area to move it\n              </p>\n              <p>Drag the corners to resize the crop area</p>\n            </div>\n\n            {/* Crop Controls */}\n            <div className=\"flex justify-center space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleZoomOut}\n                title=\"Zoom Out\"\n              >\n                <ZoomOut className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleZoomIn}\n                title=\"Zoom In\"\n              >\n                <ZoomIn className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleResetCrop}\n                title=\"Reset\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={handleCancelCrop}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleApplyCrop}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                Apply Crop\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Hidden image element for processing */}\n      {originalImage && (\n        <img\n          ref={imageRef}\n          src={originalImage}\n          alt=\"Original\"\n          className=\"hidden\"\n          onLoad={drawCanvas}\n        />\n      )}\n    </>\n  );\n}\n","size_bytes":26210},"client/src/components/dashboard/WellnessPanel.tsx":{"content":"import { TrendingUp, Coffee, Focus } from \"lucide-react\";\nimport { useMetrics, useWellnessInsights } from \"@/hooks/useMetrics\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function WellnessPanel() {\n  const { data: metrics } = useMetrics();\n  const wellnessInsights = useWellnessInsights();\n\n  const handleStartBreak = () => {\n    // Implementation for starting a micro-break\n    // Start micro-break implementation\n  };\n\n  const handleEnterFlowMode = () => {\n    // Implementation for entering deep focus mode\n    // Enter flow mode implementation\n  };\n\n  const handleGenerateInsights = () => {\n    wellnessInsights.mutate();\n  };\n\n  const focusScore = metrics?.focusScore || 0;\n  const nextBreakIn = metrics?.nextBreakIn || 25;\n\n  return (\n    <div className=\"glass-card rounded-lg p-6\" data-testid=\"card-wellness-panel\">\n      <h2 className=\"text-lg font-semibold mb-4 flex items-center\" data-testid=\"text-wellness-title\">\n        <TrendingUp className=\"w-5 h-5 mr-2 text-accent\" />\n        Performance Optimization\n      </h2>\n      <div className=\"space-y-4\">\n        <div className=\"floating-metric rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Focus Score</span>\n            <span className=\"text-lg font-bold text-green-400\" data-testid=\"text-focus-score\">\n              {focusScore}%\n            </span>\n          </div>\n          <div className=\"w-full bg-muted/30 rounded-full h-2\">\n            <div \n              className=\"bg-gradient-to-r from-green-400 to-emerald-500 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${focusScore}%` }}\n              data-testid=\"progress-focus-score\"\n            />\n          </div>\n        </div>\n        \n        <div className=\"bg-secondary/10 border border-secondary/30 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Next Break</span>\n            <span className=\"text-sm text-secondary\" data-testid=\"text-next-break\">\n              in {nextBreakIn} min\n            </span>\n          </div>\n          <Button\n            onClick={handleStartBreak}\n            className=\"w-full bg-secondary/20 hover:bg-secondary/30 rounded-lg py-2 text-sm transition-colors\"\n            variant=\"ghost\"\n            data-testid=\"button-start-break\"\n          >\n            <Coffee className=\"w-4 h-4 mr-2\" />\n            Start Micro-Break\n          </Button>\n        </div>\n        \n        <div className=\"bg-primary/10 border border-primary/30 rounded-lg p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm font-medium\">Flow Mode</span>\n            <span className=\"text-sm text-primary\">Available</span>\n          </div>\n          <Button\n            onClick={handleEnterFlowMode}\n            className=\"w-full bg-primary/20 hover:bg-primary/30 rounded-lg py-2 text-sm transition-colors\"\n            variant=\"ghost\"\n            data-testid=\"button-enter-flow\"\n          >\n            <Focus className=\"w-4 h-4 mr-2\" />\n            Enter Deep Focus\n          </Button>\n        </div>\n\n        <Button\n          onClick={handleGenerateInsights}\n          disabled={wellnessInsights.isPending}\n          className=\"w-full mt-4\"\n          variant=\"outline\"\n          data-testid=\"button-generate-insights\"\n        >\n          {wellnessInsights.isPending ? \"Analyzing...\" : \"Generate AI Insights\"}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3556},"client/src/components/dashboard/WorkflowRiver.tsx":{"content":"import { CheckSquare, Zap, Clock, Play, Square, Info, Trash2, RotateCcw, Plus, Mail, Pencil, Sparkles, Calendar } from \"lucide-react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useTasks, useStartTask, useStopTask, useOptimizeWorkflow, useUpdateTask, useDeleteTask, useAutoReschedule, useCreateTaskFromText } from \"@/hooks/useTasks\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Tooltip, TooltipProvider, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\n\n\nconst priorityConfig = {\n  urgent: {\n    color: \"border-red-500\",\n    dotColor: \"bg-red-500\",\n    class: \"pulse-urgent\",\n    label: \"🚨 Urgent\",\n    bgColor: \"bg-red-50/20\"\n  },\n  important: {\n    color: \"border-orange-500\",\n    dotColor: \"bg-orange-500\",\n    class: \"\",\n    label: \"⚡ Important\",\n    bgColor: \"bg-orange-50/20\"\n  },\n  normal: {\n    color: \"border-blue-500\",\n    dotColor: \"bg-blue-500\",\n    class: \"\",\n    label: \"📋 Normal\",\n    bgColor: \"bg-blue-50/20\"\n  },\n};\n\nconst priorityOrder = [\"urgent\", \"important\", \"normal\"] as const;\n\n// Smart Countdown Component Router\nfunction CountdownTimer({ task, onEditClick }: { task: any; onEditClick?: () => void }) {\n  // Route to appropriate countdown component based on task source\n  if (task.metadata?.aiGenerated) {\n    return <AiTaskCountdown task={task} onEditClick={onEditClick} />;\n  } else {\n    return <ManualTaskCountdown task={task} onEditClick={onEditClick} />;\n  }\n}\n\n// Manual Task Countdown Component\nfunction ManualTaskCountdown({ task, onEditClick }: { task: any; onEditClick?: () => void }) {\n  const [timeLeft, setTimeLeft] = useState<string>(\"\");\n  const [isUrgent, setIsUrgent] = useState(false);\n  const [targetTime, setTargetTime] = useState<Date | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // For manual tasks, use explicit dueAt\n  useEffect(() => {\n    let calculatedTargetTime: Date | null = null;\n\n    if (task.dueAt) {\n      calculatedTargetTime = new Date(task.dueAt);\n    }\n\n    setTargetTime(calculatedTargetTime);\n  }, [task.dueAt]);\n\n  useEffect(() => {\n    const updateCountdown = () => {\n      // If task is completed, show completed status\n      if (task.status === 'completed') {\n        setTimeLeft('Completed');\n        setIsUrgent(false);\n        return false;\n      }\n\n      // If no target time, show no deadline set\n      if (!targetTime) {\n        setTimeLeft('No deadline set');\n        setIsUrgent(false);\n        return false;\n      }\n\n      const now = Date.now();\n      const target = targetTime.getTime();\n      const difference = target - now;\n\n      // Mark as urgent if less than 3 hours remaining\n      setIsUrgent(difference < 3 * 60 * 60 * 1000);\n\n      if (difference > 0) {\n        // Calculate time components\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n        // Format countdown string based on time remaining\n        if (days > 0) {\n          setTimeLeft(`${days}d ${hours}h ${minutes}m`);\n        } else if (hours > 0) {\n          setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n        } else if (minutes > 0) {\n          setTimeLeft(`${minutes}m ${seconds}s`);\n        } else {\n          setTimeLeft(`${seconds}s`);\n        }\n        return false;\n      } else {\n        // Time has passed - show overdue\n        const absTimePassed = Math.abs(difference);\n        const daysOverdue = Math.floor(absTimePassed / (1000 * 60 * 60 * 24));\n        const hoursOverdue = Math.floor((absTimePassed % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutesOverdue = Math.floor((absTimePassed % (1000 * 60 * 60)) / (1000 * 60));\n\n        if (daysOverdue > 0) {\n          setTimeLeft(`${daysOverdue}d ${hoursOverdue}h overdue`);\n        } else if (hoursOverdue > 0) {\n          setTimeLeft(`${hoursOverdue}h ${minutesOverdue}m overdue`);\n        } else {\n          setTimeLeft(`${minutesOverdue}m overdue`);\n        }\n        setIsUrgent(true);\n        return true; // Stop interval for overdue tasks\n      }\n    };\n\n    // Clear any existing interval first\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    // Update immediately\n    const shouldStop = updateCountdown();\n    if (shouldStop) return;\n\n    // Set up interval to update every second - use intervalRef for stability\n    intervalRef.current = setInterval(() => {\n      const stop = updateCountdown();\n      if (stop && intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }, 1000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [targetTime, task.status]);\n\n  return (\n    <span\n      className={`text-xs px-2 py-1 rounded-full font-medium animate-in slide-in-from-right-2 duration-500 delay-1000 ${\n        task.status === 'completed'\n          ? 'bg-green-100 text-green-800'\n          : isUrgent\n          ? 'bg-red-100 text-red-800 animate-pulse'\n          : (task.priority || 'normal') === 'urgent'\n          ? 'bg-red-100 text-red-800'\n          : (task.priority || 'normal') === 'important'\n          ? 'bg-orange-100 text-orange-800'\n          : 'bg-gray-100 text-gray-600'\n      } ${task.status !== 'completed' && onEditClick ? 'cursor-pointer hover:opacity-80 transition-opacity' : ''}`}\n      onClick={task.status !== 'completed' && onEditClick ? onEditClick : undefined}\n      title={task.status !== 'completed' ? 'Click to edit due date' : ''}\n    >\n      {timeLeft}\n    </span>\n  );\n}\n\n// AI Task Countdown Component\nfunction AiTaskCountdown({ task, onEditClick }: { task: any; onEditClick?: () => void }) {\n  const [timeLeft, setTimeLeft] = useState<string>(\"\");\n  const [isUrgent, setIsUrgent] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Memoize target time to prevent unnecessary recalculations\n  const targetTime = useMemo(() => {\n    // First use explicit dueAt if available (backend already did IST conversion correctly)\n    if (task.dueAt) {\n      return new Date(task.dueAt);\n    } else {\n      // Fallback to parsing natural language from title or description\n      const parsedTime = parseRelativeTime(task.title + ' ' + (task.description || ''));\n      return parsedTime;\n    }\n  }, [task.dueAt, task.title, task.description]);\n\n  useEffect(() => {\n    const updateCountdown = () => {\n      // If task is completed, show completed status\n      if (task.status === 'completed') {\n        setTimeLeft('Completed');\n        setIsUrgent(false);\n        return false;\n      }\n\n      // If no target time, show no deadline set\n      if (!targetTime) {\n        setTimeLeft('No deadline set');\n        setIsUrgent(false);\n        return false;\n      }\n\n      const now = Date.now();\n      const target = targetTime.getTime();\n      const difference = target - now;\n\n      // Mark as urgent if less than 3 hours remaining\n      setIsUrgent(difference < 3 * 60 * 60 * 1000);\n\n      if (difference > 0) {\n        // Calculate time components\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n        // Format countdown string based on time remaining\n        if (days > 0) {\n          setTimeLeft(`${days}d ${hours}h ${minutes}m`);\n        } else if (hours > 0) {\n          setTimeLeft(`${hours}h ${minutes}m ${seconds}s`);\n        } else if (minutes > 0) {\n          setTimeLeft(`${minutes}m ${seconds}s`);\n        } else {\n          setTimeLeft(`${seconds}s`);\n        }\n        return false;\n      } else {\n        // Time has passed - show overdue\n        const absTimePassed = Math.abs(difference);\n        const daysOverdue = Math.floor(absTimePassed / (1000 * 60 * 60 * 24));\n        const hoursOverdue = Math.floor((absTimePassed % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutesOverdue = Math.floor((absTimePassed % (1000 * 60 * 60)) / (1000 * 60));\n\n        if (daysOverdue > 0) {\n          setTimeLeft(`${daysOverdue}d ${hoursOverdue}h overdue`);\n        } else if (hoursOverdue > 0) {\n          setTimeLeft(`${hoursOverdue}h ${minutesOverdue}m overdue`);\n        } else {\n          setTimeLeft(`${minutesOverdue}m overdue`);\n        }\n        setIsUrgent(true);\n        return true; // Stop interval for overdue tasks\n      }\n    };\n\n    // Clear any existing interval first\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n\n    // Update immediately\n    const shouldStop = updateCountdown();\n    if (shouldStop) return;\n\n    // Set up interval to update every second - use intervalRef for stability\n    intervalRef.current = setInterval(() => {\n      const stop = updateCountdown();\n      if (stop && intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }, 1000);\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    };\n  }, [targetTime, task.status]);\n\n  return (\n    <span\n      className={`text-xs px-2 py-1 rounded-full font-medium animate-in slide-in-from-right-2 duration-500 delay-1000 ${\n        task.status === 'completed'\n          ? 'bg-green-100 text-green-800'\n          : isUrgent\n          ? 'bg-red-100 text-red-800 animate-pulse'\n          : (task.priority || 'normal') === 'urgent'\n          ? 'bg-red-100 text-red-800'\n          : (task.priority || 'normal') === 'important'\n          ? 'bg-orange-100 text-orange-800'\n          : 'bg-gray-100 text-gray-600'\n      } ${task.status !== 'completed' && onEditClick ? 'cursor-pointer hover:opacity-80 transition-opacity' : ''}`}\n      onClick={task.status !== 'completed' && onEditClick ? onEditClick : undefined}\n      title={task.status !== 'completed' ? 'Click to edit due date' : ''}\n    >\n      {timeLeft}\n    </span>\n  );\n}\n\n// Enhanced helper function to parse relative time strings including day names and \"tomorrow\"\nconst parseRelativeTime = (text: string): Date | null => {\n  if (!text) return null;\n\n  const now = new Date();\n  const lowerText = text.toLowerCase().trim();\n\n  // Look for \"in X min/mins/minutes/m\" patterns\n  const minuteMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:m|min|mins|minutes?)\\b/i);\n  if (minuteMatch) {\n    const minutes = parseInt(minuteMatch[1]);\n    return new Date(now.getTime() + minutes * 60 * 1000);\n  }\n\n  // Look for \"in X hour/hours/hr/hrs/h\" patterns\n  const hourMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:h|hr|hrs|hour|hours?)\\b/i);\n  if (hourMatch) {\n    const hours = parseInt(hourMatch[1]);\n    return new Date(now.getTime() + hours * 60 * 60 * 1000);\n  }\n\n  // Look for \"in X days\" patterns\n  const dayMatch = lowerText.match(/in\\s+(\\d+)\\s*(?:day|days?)/);\n  if (dayMatch) {\n    const days = parseInt(dayMatch[1]);\n    return new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n  }\n\n  // Handle \"tomorrow\" or \"tommorow\" (common typo)\n  if (lowerText.includes('tomorrow') || lowerText.includes('tommorow')) {\n    const tomorrow = new Date(now);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    tomorrow.setHours(9, 0, 0, 0); // Set to 9 AM tomorrow by default\n    return tomorrow;\n  }\n\n  // Handle \"today\" using browser's local timezone (no manual IST offset)\n  if (lowerText.includes('today')) {\n    const today = new Date();\n    const date = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n\n    // Look for specific time mentions like \"9 pm today\"\n    const timeToday = lowerText.match(/(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)\\s*today|today\\s*(?:at\\s*)?(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)|(\\d{1,2}):?(\\d{2})?\\s*(pm|p\\.m\\.|am|a\\.m\\.)/i);\n\n    if (timeToday) {\n      let hour = parseInt(timeToday[1] || timeToday[4] || timeToday[7] || '17');\n      const minute = parseInt(timeToday[2] || timeToday[5] || timeToday[8] || '0');\n      const period = (timeToday[3] || timeToday[6] || timeToday[9] || '').toLowerCase();\n\n      if (period.includes('pm') || period.includes('p.m.')) {\n        if (hour !== 12) hour += 12;\n      } else if (period.includes('am') || period.includes('a.m.')) {\n        if (hour === 12) hour = 0;\n      }\n\n      date.setHours(hour, minute, 0, 0);\n      return date;\n    } else {\n      date.setHours(17, 0, 0, 0); // Default to 5 PM local time\n      return date;\n    }\n  }\n\n  // Handle specific day names (for this week)\n  const dayNames = {\n    'monday': 1, 'mon': 1,\n    'tuesday': 2, 'tue': 2, 'tues': 2,\n    'wednesday': 3, 'wed': 3,\n    'thursday': 4, 'thu': 4, 'thurs': 4,\n    'friday': 5, 'fri': 5,\n    'saturday': 6, 'sat': 6,\n    'sunday': 0, 'sun': 0\n  };\n\n  for (const [dayName, dayNumber] of Object.entries(dayNames)) {\n    if (lowerText.includes(dayName)) {\n      const targetDate = new Date(now);\n      const currentDay = now.getDay();\n      const daysUntilTarget = (dayNumber - currentDay + 7) % 7;\n\n      // If it's the same day, assume next week unless it's still early\n      if (daysUntilTarget === 0 && now.getHours() >= 12) {\n        targetDate.setDate(targetDate.getDate() + 7);\n      } else if (daysUntilTarget === 0) {\n        // Same day, set to later today\n        targetDate.setHours(17, 0, 0, 0);\n        return targetDate;\n      } else {\n        targetDate.setDate(targetDate.getDate() + daysUntilTarget);\n      }\n\n      targetDate.setHours(9, 0, 0, 0); // Set to 9 AM on target day\n      return targetDate;\n    }\n  }\n\n  // Handle \"next week\"\n  if (lowerText.includes('next week')) {\n    const nextWeek = new Date(now);\n    nextWeek.setDate(nextWeek.getDate() + 7);\n    nextWeek.setHours(9, 0, 0, 0);\n    return nextWeek;\n  }\n\n  // Handle \"this week\" (Friday)\n  if (lowerText.includes('this week')) {\n    const friday = new Date(now);\n    const daysUntilFriday = (5 - now.getDay() + 7) % 7;\n    if (daysUntilFriday === 0 && now.getHours() >= 17) {\n      friday.setDate(friday.getDate() + 7); // Next Friday if it's late Friday\n    } else {\n      friday.setDate(friday.getDate() + daysUntilFriday);\n    }\n    friday.setHours(17, 0, 0, 0);\n    return friday;\n  }\n\n  // Look for immediate urgency keywords\n  if (lowerText.includes('asap') || lowerText.includes('urgent') || lowerText.includes('right now') || lowerText.includes('immediately')) {\n    return new Date(now.getTime() + 5 * 60 * 1000); // 5 minutes from now\n  }\n\n  return null;\n};\n\n\nexport function WorkflowRiver() {\n  const { data: tasks, isLoading } = useTasks();\n  const startTaskMutation = useStartTask();\n  const stopTaskMutation = useStopTask();\n  const optimizeWorkflowMutation = useOptimizeWorkflow();\n  const autoRescheduleMutation = useAutoReschedule();\n  const deleteTaskMutation = useDeleteTask(); // Added for deleting tasks\n  const createTaskFromTextMutation = useCreateTaskFromText();\n  const updateTaskMutation = useUpdateTask();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTask, setSelectedTask] = useState<any>(null);\n  const [isDescriptionDialogOpen, setIsDescriptionDialogOpen] = useState(false);\n  const [isAddTaskDialogOpen, setIsAddTaskDialogOpen] = useState(false); // Renamed from isAITaskModalOpen\n  const [newTaskInput, setNewTaskInput] = useState(\"\");\n  const [isManualTaskDialogOpen, setIsManualTaskDialogOpen] = useState(false); // Renamed from isManualTaskModalOpen\n  const [manualTaskName, setManualTaskName] = useState(\"\");\n  const [manualTaskTime, setManualTaskTime] = useState(\"\");\n  const [manualTaskDateTime, setManualTaskDateTime] = useState<Date | null>(null);\n  const [editingTaskId, setEditingTaskId] = useState<string | null>(null);\n  const [editingTitle, setEditingTitle] = useState(\"\");\n  const [editingTimeTaskId, setEditingTimeTaskId] = useState<string | null>(null);\n  const [editingDueDate, setEditingDueDate] = useState<Date | null>(null);\n\n  // Animation state for staggered section and task appearance\n  const [visibleSections, setVisibleSections] = useState<Set<string>>(new Set());\n  const [visibleTasks, setVisibleTasks] = useState<Set<string>>(new Set());\n  const [animationInProgress, setAnimationInProgress] = useState(false);\n\n  // State for handling potential Windows notifications (placeholder)\n  const [showWindowsNotificationPrompt, setShowWindowsNotificationPrompt] = useState(false);\n\n  // Effect to check for desktop environment and potentially show notification prompt\n  useEffect(() => {\n    // Detect if the user agent indicates a mobile device\n    const isMobile = /Mobi|Android/i.test(navigator.userAgent);\n    // If it's not mobile, it's likely a desktop or tablet, and we can consider showing the prompt.\n    // For a more robust check, you might also consider checking for specific desktop OS patterns\n    // or using a library that provides better device detection.\n    if (!isMobile) {\n      setShowWindowsNotificationPrompt(true);\n    }\n  }, []);\n\n  // Staggered animation effect for sections and tasks\n  useEffect(() => {\n    if (!tasks || tasks.length === 0) {\n      setVisibleSections(new Set());\n      setVisibleTasks(new Set());\n      setAnimationInProgress(false);\n      return;\n    }\n\n    setAnimationInProgress(true);\n    const sectionsWithTasks = priorityOrder.filter(priority => \n      (tasksByPriority[priority] || []).length > 0\n    );\n\n    let sectionDelay = 0;\n    let taskDelay = 300; // Start task animations after initial section delay\n\n    const newVisibleSections = new Set<string>();\n    const newVisibleTasks = new Set<string>();\n    const timeouts: NodeJS.Timeout[] = [];\n\n    // Animate sections first\n    sectionsWithTasks.forEach((priority, sectionIndex) => {\n      const sectionTimeout = setTimeout(() => {\n        newVisibleSections.add(priority);\n        setVisibleSections(new Set(newVisibleSections));\n      }, sectionDelay);\n      timeouts.push(sectionTimeout);\n\n      sectionDelay += 150; // 150ms between each section header\n\n      // Then animate tasks within each section\n      const sectionTasks = tasksByPriority[priority] || [];\n      sectionTasks.forEach((task, taskIndex) => {\n        const taskTimeout = setTimeout(() => {\n          newVisibleTasks.add(task.id);\n          setVisibleTasks(new Set(newVisibleTasks));\n        }, taskDelay);\n        timeouts.push(taskTimeout);\n\n        taskDelay += 100; // 100ms between each task\n      });\n\n      // Add extra spacing between sections\n      taskDelay += 100;\n    });\n\n    // Mark animation as complete\n    const completeTimeout = setTimeout(() => {\n      setAnimationInProgress(false);\n    }, taskDelay + 200);\n    timeouts.push(completeTimeout);\n\n    // Cleanup function to clear all timeouts\n    return () => {\n      timeouts.forEach(timeout => clearTimeout(timeout));\n    };\n\n  }, [tasks?.map(t => t.id).join(',')]); // Use stable task ID signature\n\n\n  const activeTasks = tasks?.filter(task => task.status === \"pending\" || task.status === \"in_progress\" || task.status === \"completed\") || [];\n\n  // Group tasks by priority and sort by time urgency within each priority\n  const tasksByPriority = priorityOrder.reduce((acc, priority) => {\n    // Filter tasks by priority, with fallback to 'normal' if priority is undefined\n    const priorityTasks = activeTasks.filter(task => {\n      const taskPriority = task.priority || 'normal';\n      return taskPriority === priority;\n    });\n\n    // Sort tasks within each priority by time urgency\n    priorityTasks.sort((a, b) => {\n      // Get parsed times for both tasks\n      const aTime = a.dueAt ? new Date(a.dueAt) : parseRelativeTime(a.title + ' ' + (a.description || ''));\n      const bTime = b.dueAt ? new Date(b.dueAt) : parseRelativeTime(b.title + ' ' + (b.description || ''));\n\n      // If both have times, sort by time (earliest first)\n      if (aTime && bTime) {\n        return aTime.getTime() - bTime.getTime();\n      }\n\n      // Tasks with times come before tasks without times\n      if (aTime && !bTime) return -1;\n      if (!aTime && bTime) return 1;\n\n      // If neither has a time, maintain original order\n      return 0;\n    });\n\n    acc[priority] = priorityTasks;\n    return acc;\n  }, {} as Record<string, typeof activeTasks>);\n\n\n  const handleStartTask = (taskId: string) => {\n    startTaskMutation.mutate(taskId);\n  };\n\n  const handleStopTask = (taskId: string) => {\n    stopTaskMutation.mutate(taskId);\n  };\n\n  const handleOptimizeWorkflow = () => {\n    optimizeWorkflowMutation.mutate();\n  };\n\n  const handleClearAllTasks = () => {\n    activeTasks.forEach(task => {\n      deleteTaskMutation.mutate(task.id);\n    });\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  // Placeholder for profile name update fix.\n  // In a real scenario, this would involve updating user state or profile data.\n  // If the profile section is managed by another component or context,\n  // you would typically trigger an update there or use a shared state management solution.\n  // Example of a hypothetical update function:\n  // const handleUpdateProfileName = async (userId: string, newName: string) => {\n  //   try {\n  //     // Assume an API call to update the user's profile\n  //     const response = await fetch(`/api/users/${userId}`, {\n  //       method: 'PUT',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ name: newName }),\n  //     });\n  //     if (!response.ok) throw new Error('Failed to update name');\n  //     queryClient.invalidateQueries({ queryKey: ['userProfile', userId] }); // Invalidate cache if applicable\n  //     toast({ title: \"Profile updated\", description: \"Your name has been updated successfully.\" });\n  //   } catch (error) {\n  //     console.error(\"Error updating profile name:\", error);\n  //     toast({ title: \"Error\", description: \"Failed to update profile name. Please try again.\", variant: \"destructive\" });\n  //   }\n  // };\n\n  const handleCreateManualTask = async () => {\n    if (!newTaskInput.trim() || createTaskFromTextMutation.isPending) return;\n\n    try {\n      const result = await createTaskFromTextMutation.mutateAsync({\n        userId: \"demo-user\",\n        naturalLanguageInput: newTaskInput,\n      });\n\n      setNewTaskInput(\"\");\n      setIsAddTaskDialogOpen(false);\n\n      if (result.loading) {\n        toast({\n          title: \"Processing Task with AI... 🤖\",\n          description: \"Your task is being analyzed and will appear shortly.\",\n          duration: 5000,\n        });\n      } else if (result.task) {\n        toast({\n          title: \"Task Created! 🎉\",\n          description: `\"${result.task.title}\" has been added to your tasks.`,\n          duration: 3000,\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\", \n        description: \"Failed to create task. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCreateCompletelyManualTask = async () => {\n    if (!manualTaskName.trim()) return;\n\n    try {\n      // Use the selected date/time from the picker\n      let dueAt = manualTaskDateTime;\n      let priority = \"normal\";\n\n      // Determine priority based on selected time\n      if (dueAt) {\n        const now = new Date();\n        const diffMs = dueAt.getTime() - now.getTime();\n        const diffHours = diffMs / (1000 * 60 * 60);\n\n        if (diffHours <= 3) {\n          priority = \"urgent\";\n        } else if (diffHours <= 24) {\n          priority = \"important\";\n        } else {\n          priority = \"normal\";\n        }\n      }\n\n      // Create task directly without AI\n      const response = await fetch('/api/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: \"demo-user\",\n          title: manualTaskName,\n          description: dueAt ? `Due: ${dueAt.toLocaleDateString()} at ${dueAt.toLocaleTimeString()}` : \"No specific time mentioned\",\n          priority: priority,\n          status: \"pending\",\n          estimatedMinutes: 60,\n          dueAt: dueAt?.toISOString(),\n          sourceApp: \"manual\",\n          metadata: {\n            manuallyCreated: true,\n            noAI: true,\n            selectedDateTime: dueAt?.toISOString() || null\n          }\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n\n      const result = await response.json();\n\n      // Refresh tasks\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\", { userId: \"demo-user\" }] });\n\n      setManualTaskName(\"\");\n      setManualTaskTime(\"\");\n      setManualTaskDateTime(null);\n      setIsManualTaskDialogOpen(false);\n\n      toast({\n        title: \"Manual Task Created! ✅\",\n        description: `\"${manualTaskName}\" has been added to your tasks.`,\n        duration: 3000,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create manual task. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleViewDescription = (task: any) => {\n    setSelectedTask(task);\n    setIsDescriptionDialogOpen(true);\n  };\n\n  const handleStartEditTitle = (task: any) => {\n    setEditingTaskId(task.id);\n    setEditingTitle(task.title);\n  };\n\n  const handleCancelEditTitle = () => {\n    setEditingTaskId(null);\n    setEditingTitle(\"\");\n  };\n\n  const handleSaveEditTitle = async (taskId: string) => {\n    if (!editingTitle.trim() || updateTaskMutation.isPending) return;\n\n    try {\n      await updateTaskMutation.mutateAsync({\n        id: taskId,\n        updates: { title: editingTitle.trim() }\n      });\n\n      setEditingTaskId(null);\n      setEditingTitle(\"\");\n\n      toast({\n        title: \"Task Updated! ✏️\",\n        description: \"Task title has been updated successfully.\",\n        duration: 2000,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task title. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleStartEditTime = (task: any) => {\n    setEditingTimeTaskId(task.id);\n    setEditingDueDate(task.dueAt ? new Date(task.dueAt) : new Date());\n  };\n\n  const handleCancelEditTime = () => {\n    setEditingTimeTaskId(null);\n    setEditingDueDate(null);\n  };\n\n  const handleSaveEditTime = async (taskId: string) => {\n    if (!editingDueDate || updateTaskMutation.isPending) return;\n\n    try {\n      await updateTaskMutation.mutateAsync({\n        id: taskId,\n        updates: { dueAt: editingDueDate.toISOString() }\n      });\n\n      setEditingTimeTaskId(null);\n      setEditingDueDate(null);\n\n      toast({\n        title: \"Task Time Updated! ⏰\",\n        description: \"Task due date has been updated successfully.\",\n        duration: 2000,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task due date. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const truncateDescription = (description: string, task: any, maxLength: number = 50) => {\n    if (!description) return \"No description\";\n\n    // For email-converted tasks, show more content or full content if it's AI-generated\n    if (task?.metadata?.aiGenerated || task?.sourceNotificationId) {\n      // Show more content for AI-generated tasks (up to 150 chars)\n      const expandedLength = 150;\n      if (description.length <= expandedLength) return description;\n      return description.substring(0, expandedLength) + \"...\";\n    }\n\n    // Regular truncation for other tasks\n    if (description.length <= maxLength) return description;\n    return description.substring(0, maxLength) + \"...\";\n  };\n\n\n  if (isLoading) {\n    return (\n      <div className=\"glass-card rounded-lg p-6 mb-6\" data-testid=\"card-workflow-river\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-muted/30 rounded w-1/3\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-16 bg-muted/20 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Placeholder for handling the \"404 Page Not Found\" error on scroll.\n  // This is an unusual error to associate directly with scrolling.\n  // Common causes might include:\n  // - Infinite scroll implementation issues: If new content fails to load and triggers a 404, it might be reported during scroll.\n  // - Routing errors: If scrolling triggers a navigation event that leads to a 404.\n  // - Dynamic component loading failures.\n  // Without more context, specific code changes are difficult. If this occurs, investigate network requests made during scrolling or any routing logic tied to scroll events.\n\n  return (\n    <div className=\"glass-card rounded-lg p-6 h-full animate-in slide-in-from-bottom-5 duration-700 flex flex-col\" data-testid=\"card-workflow-river\">\n      {/* Fixed Header Section */}\n      <div className=\"flex items-center justify-between mb-4 flex-shrink-0\">\n        <div className=\"flex items-center space-x-3\">\n          <h2 className=\"text-lg font-semibold flex items-center font-display animate-in fade-in-50 duration-500 delay-200\" data-testid=\"text-workflow-title\">\n            <CheckSquare className=\"w-5 h-5 mr-2 text-primary animate-bounce\" />\n            Tasks\n          </h2>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                    onClick={handleClearAllTasks}\n                    disabled={deleteTaskMutation.isPending || activeTasks.length === 0}\n                    className=\"bg-red-500 hover:bg-red-600 text-white p-2 rounded-lg transition-all duration-150 hover:scale-105 hover:shadow-md active:scale-95\"\n                    data-testid=\"button-clear-all-tasks\"\n                  >\n                  <Trash2 className=\"w-4 h-4\" />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Clear all tasks</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n        {/* Updated button group for responsiveness */}\n        <div className=\"flex flex-wrap items-center gap-2\">\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                    onClick={() => setIsAddTaskDialogOpen(true)} // Using the renamed state variable\n                    className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-2 sm:px-3 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 hover:scale-105 hover:shadow-lg animate-in slide-in-from-right-3 duration-500 delay-300\"\n                    data-testid=\"button-add-ai-task\"\n                  >\n                  <Sparkles className=\"w-3 h-3 sm:w-4 sm:h-4 sm:mr-1\" />\n                  <span className=\"hidden sm:inline\">AI (Natural Language to Task)</span>\n                  <span className=\"sm:hidden\">AI</span>\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Create task using AI from natural language</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                    onClick={() => setIsManualTaskDialogOpen(true)} // Using the renamed state variable\n                    className=\"bg-green-500 hover:bg-green-600 text-white px-2 sm:px-3 py-2 rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 hover:scale-105 hover:shadow-lg\"\n                    data-testid=\"button-add-manual-task-plus\"\n                  >\n                  <Plus className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                  <span className=\"hidden sm:inline ml-1\">Manual Tasks</span>\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>Add Task Manually (No AI)</p>\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n\n        </div>\n      </div>\n\n      {/* Scrollable Content Area */}\n      <div className=\"space-y-6 flex-1 overflow-y-auto min-h-0\">\n        {activeTasks.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center h-full text-center text-muted-foreground\" data-testid=\"text-no-tasks\">\n            <CheckSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n            <p>No pending tasks in your pipeline.</p>\n            <p className=\"text-sm mt-2\">Your task pipeline is clear and ready for action!</p>\n          </div>\n        ) : (\n          priorityOrder.map((priority) => {\n            const priorityTasks = tasksByPriority[priority];\n            if (priorityTasks.length === 0) return null;\n\n            const config = priorityConfig[priority];\n\n            return (\n              <div key={priority} className=\"space-y-3\">\n                <div className={`flex items-center space-x-2 mb-3 transition-all duration-500 ${\n                  visibleSections.has(priority) \n                    ? 'animate-in slide-in-from-left-4 opacity-100' \n                    : 'opacity-0'\n                }`}>\n                  <div className={`w-3 h-3 ${config.dotColor} rounded-full`} />\n                  <h3 className=\"text-sm font-semibold text-muted-foreground uppercase tracking-wide\">\n                    {config.label} ({priorityTasks.length})\n                  </h3>\n                </div>\n\n                <div className=\"space-y-3\">\n                  {priorityTasks.map((task) => {\n                    // Ensure task has a valid priority, default to 'normal' if not set\n                    const taskPriority = task.priority || 'normal';\n                    const taskConfig = priorityConfig[taskPriority] || priorityConfig['normal'];\n\n                    // Determine source type for badge\n                    let sourceType = \"Manual\";\n                    if (task.sourceApp === 'gmail') {\n                      sourceType = \"Email\";\n                    } else if (task.metadata?.aiGenerated) {\n                      sourceType = \"AI\";\n                    }\n\n                    return (\n                      <div\n                        key={task.id}\n                        className={`workflow-river rounded-lg p-2 border ${taskConfig.color} relative ${\n                          task.status !== 'completed' ? taskConfig.class : ''\n                        } ${\n                          task.status === 'completed' ? 'opacity-80 bg-green-50/50 border-green-300 border-dashed' : taskConfig.bgColor\n                        } overflow-hidden max-w-full min-w-0 transition-all duration-200 hover:shadow-lg hover:border-opacity-80 ${\n                          visibleTasks.has(task.id) \n                            ? 'animate-in slide-in-from-bottom-4 opacity-100 duration-500' \n                            : 'opacity-0 translate-y-4'\n                        }`}\n                        data-testid={`task-item-${task.id}`}\n                        style={{\n                          wordBreak: 'break-word',\n                          overflowWrap: 'break-word',\n                          width: '100%',\n                          maxWidth: '100%'\n                        }}\n                      >\n                        {/* Main task content */}\n                        <div className=\"flex flex-col space-y-2\">\n                          {/* Task header with title and status */}\n                          <div className=\"flex items-start justify-between gap-2\">\n                            <div className=\"flex items-start space-x-2 flex-1 min-w-0\">\n                              <div className={`w-3 h-3 ${config.dotColor} rounded-full ${task.priority === 'urgent' ? 'animate-pulse' : ''} flex-shrink-0 mt-1`} />\n                              <div className=\"flex-1 min-w-0 overflow-hidden\">\n                                {editingTaskId === task.id ? (\n                                  <div className=\"flex items-center gap-2\">\n                                    <Input\n                                      value={editingTitle}\n                                      onChange={(e) => setEditingTitle(e.target.value)}\n                                      className=\"text-sm font-medium flex-1\"\n                                      onKeyPress={(e) => {\n                                        if (e.key === 'Enter') {\n                                          handleSaveEditTitle(task.id);\n                                        } else if (e.key === 'Escape') {\n                                          handleCancelEditTitle();\n                                        }\n                                      }}\n                                      autoFocus\n                                    />\n                                    <Button\n                                      onClick={() => handleSaveEditTitle(task.id)}\n                                      disabled={updateTaskMutation.isPending}\n                                      className=\"bg-green-500 hover:bg-green-600 text-white p-1 h-6 w-6\"\n                                    >\n                                      ✓\n                                    </Button>\n                                    <Button\n                                      onClick={handleCancelEditTitle}\n                                      className=\"bg-gray-500 hover:bg-gray-600 text-white p-1 h-6 w-6\"\n                                    >\n                                      ✕\n                                    </Button>\n                                  </div>\n                                ) : (\n                                  <div className=\"flex items-center gap-2\">\n                                    <h3 className={`font-medium break-words text-sm leading-tight truncate flex-1 ${\n                                      visibleTasks.has(task.id) \n                                        ? 'animate-in slide-in-from-left-2 duration-500' \n                                        : 'opacity-0'\n                                    }`} data-testid={`task-title-${task.id}`}>\n                                      {task.status === 'completed' ? '✅ ' : ''}{task.title}\n                                      {task.status === 'completed' && (\n                                        <span className=\"ml-2 text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full font-normal whitespace-nowrap\">\n                                          Task Completed\n                                        </span>\n                                      )}\n                                    </h3>\n                                    {/* Pencil edit button for AI-generated tasks */}\n                                    {(task.metadata?.aiGenerated === true || task.metadata?.sourceNotificationId) && (\n                                      <TooltipProvider>\n                                        <Tooltip>\n                                          <TooltipTrigger asChild>\n                                            <Button\n                                              onClick={() => handleStartEditTitle(task)}\n                                              className=\"bg-gray-50 hover:bg-gray-100 text-gray-600 p-1 h-5 w-5 opacity-60 hover:opacity-100 transition-opacity\"\n                                              data-testid={`button-edit-title-${task.id}`}\n                                            >\n                                              <Pencil className=\"w-3 h-3\" />\n                                            </Button>\n                                          </TooltipTrigger>\n                                          <TooltipContent>\n                                            <p>Change the title</p>\n                                          </TooltipContent>\n                                        </Tooltip>\n                                      </TooltipProvider>\n                                    )}\n                                  </div>\n                                )}\n                                <div\n                                  className=\"text-xs text-muted-foreground cursor-pointer hover:text-primary transition-colors flex items-center gap-1 mt-1\"\n                                  data-testid={`task-description-${task.id}`}\n                                  onClick={() => handleViewDescription(task)}\n                                >\n                                  <span className=\"underline\">Show description</span>\n                                  <Info className=\"w-3 h-3 opacity-60\" />\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Countdown timer */}\n                            {(((task.priority || 'normal') === 'urgent' || (task.priority || 'normal') === 'important') || task.dueAt) && (\n                              <div className=\"flex-shrink-0\">\n                                {editingTimeTaskId === task.id ? (\n                                  <div className=\"relative flex items-center gap-2\">\n                                    <div className=\"relative z-[9999]\">\n                                      <DatePicker\n                                        selected={editingDueDate}\n                                        onChange={(date) => setEditingDueDate(date)}\n                                        showTimeSelect\n                                        timeFormat=\"HH:mm\"\n                                        timeIntervals={15}\n                                        dateFormat=\"Pp\"\n                                        className=\"text-xs p-1 rounded border text-center w-32 relative z-[9999] text-black bg-white\"\n                                        placeholderText=\"Select date & time\"\n                                        popperClassName=\"!z-[99999]\"\n                                        popperPlacement=\"bottom-end\"\n                                        popperModifiers={[\n                                          {\n                                            name: \"preventOverflow\",\n                                            options: {\n                                              rootBoundary: \"viewport\",\n                                              tether: false,\n                                              altAxis: true,\n                                              padding: 8\n                                            }\n                                          },\n                                          {\n                                            name: \"flip\",\n                                            options: {\n                                              fallbackPlacements: [\"top-end\", \"bottom-start\", \"top-start\"]\n                                            }\n                                          }\n                                        ]}\n                                        portalId=\"date-picker-portal\"\n                                      />\n                                    </div>\n                                    <Button\n                                      onClick={() => handleSaveEditTime(task.id)}\n                                      disabled={updateTaskMutation.isPending}\n                                      className=\"bg-green-500 hover:bg-green-600 text-white p-1 h-6 w-6\"\n                                    >\n                                      ✓\n                                    </Button>\n                                    <Button\n                                      onClick={handleCancelEditTime}\n                                      className=\"bg-gray-500 hover:bg-gray-600 text-white p-1 h-6 w-6\"\n                                    >\n                                      ✕\n                                    </Button>\n                                  </div>\n                                ) : (\n                                  <CountdownTimer task={task} onEditClick={() => handleStartEditTime(task)} />\n                                )}\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Action buttons row */}\n                          <div className=\"flex items-center justify-between gap-2\">\n                            <div className=\"flex items-center space-x-2\">\n                              {/* Show Priority Person badge in place of urgent priority */}\n                              {task.metadata?.isPriorityPerson ? (\n                                <Badge className=\"text-xs bg-red-500 text-white border-red-500 hover:bg-red-600\">\n                                  Priority Person\n                                </Badge>\n                              ) : (\n                                <Badge\n                                  variant={task.priority === \"important\" ? \"default\" : \"secondary\"}\n                                  className=\"text-xs\"\n                                >\n                                  {task.priority}\n                                </Badge>\n                              )}\n                              \n                              {/* Show clickable reply button for all email-based tasks */}\n                              {task.sourceApp === 'gmail' && task.metadata?.emailFrom ? (\n                                <Badge \n                                  variant=\"outline\" \n                                  className=\"text-xs cursor-pointer hover:bg-blue-50 hover:border-blue-300 transition-colors\"\n                                  onClick={() => {\n                                    const emailFrom = task.metadata?.emailFrom || '';\n                                    const emailSubject = task.metadata?.emailSubject || '';\n                                    const replySubject = emailSubject.startsWith('Re:') ? emailSubject : `Re: ${emailSubject}`;\n                                    window.open(`https://mail.google.com/mail/?view=cm&fs=1&tf=1&to=${encodeURIComponent(emailFrom)}&su=${encodeURIComponent(replySubject)}`, '_blank');\n                                  }}\n                                  title=\"Click to reply to this email\"\n                                >\n                                  reply &lt;{task.metadata.emailFrom}&gt;\n                                </Badge>\n                              ) : (\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {sourceType}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex items-center gap-1 flex-shrink-0\">\n                              {task.status === 'pending' && (\n                                <Button\n                                  onClick={() => handleStartTask(task.id)}\n                                  disabled={startTaskMutation.isPending}\n                                  className=\"bg-primary hover:bg-primary/80 px-2 py-1 sm:px-3 sm:py-1.5 rounded-lg text-xs sm:text-sm font-medium transition-colors hover:shadow-lg\"\n                                  data-testid={`button-start-task-${task.id}`}\n                                >\n                                  <Play className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                                  {startTaskMutation.isPending ? \"Starting...\" : \"Start\"}\n                                </Button>\n                              )}\n                              {task.status === 'in_progress' && (\n                                <Button\n                                  onClick={() => handleStopTask(task.id)}\n                                  disabled={stopTaskMutation.isPending}\n                                  className=\"bg-green-600 hover:bg-green-700 px-2 py-1 sm:px-3 sm:py-1.5 rounded-lg text-xs sm:text-sm font-medium transition-colors hover:shadow-lg text-white\"\n                                  data-testid={`button-stop-task-${task.id}`}\n                                >\n                                  <Square className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1\" />\n                                  {stopTaskMutation.isPending ? \"Stopping...\" : \"Stop\"}\n                                </Button>\n                              )}\n                              {task.status === 'completed' && (\n                                <div className=\"px-3 py-1.5 rounded-lg text-sm font-medium bg-green-100 text-green-800 border border-green-200 pointer-events-none\">\n                                  <CheckSquare className=\"w-4 h-4 mr-1 inline\" />\n                                  Completed\n                                </div>\n                              )}\n\n                              {/* Reply to Gmail button for email-converted tasks */}\n                              {task.sourceApp === 'gmail' && task.metadata?.sourceNotificationId && (\n                                <TooltipProvider>\n                                  <Tooltip>\n                                    <TooltipTrigger asChild>\n                                      <Button\n                                        onClick={() => window.open('https://gmail.com', '_blank')}\n                                        className=\"bg-blue-50 hover:bg-blue-100 text-blue-600 px-1.5 py-1 sm:px-2 sm:py-1.5 rounded-lg text-sm transition-colors\"\n                                        data-testid={`button-reply-gmail-${task.id}`}\n                                      >\n                                        <Mail className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                                      </Button>\n                                    </TooltipTrigger>\n                                    <TooltipContent>\n                                      <p>Reply in Gmail</p>\n                                    </TooltipContent>\n                                  </Tooltip>\n                                </TooltipProvider>\n                              )}\n\n                              {/* Clear task button */}\n                              <TooltipProvider>\n                                <Tooltip>\n                                  <TooltipTrigger asChild>\n                                    <Button\n                                      onClick={() => handleDeleteTask(task.id)}\n                                      disabled={deleteTaskMutation.isPending}\n                                      className=\"bg-red-50 hover:bg-red-100 text-red-600 px-1.5 py-1 sm:px-2 sm:py-1.5 rounded-lg text-sm transition-colors\"\n                                      data-testid={`button-clear-task-${task.id}`}\n                                    >\n                                      <Trash2 className=\"w-3 h-3 sm:w-4 sm:h-4\" />\n                                    </Button>\n                                  </TooltipTrigger>\n                                  <TooltipContent>\n                                    <p>Remove this task</p>\n                                  </TooltipContent>\n                                </Tooltip>\n                              </TooltipProvider>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      {/* Add AI Task Dialog */}\n      <Dialog open={isAddTaskDialogOpen} onOpenChange={setIsAddTaskDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Zap className=\"w-5 h-5 mr-2 text-purple-500\" />\n              AI (Natural Language to Task)\n            </DialogTitle>\n            <DialogDescription>\n              Describe your task in natural language and AI will create it for you.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Task Description</label>\n              <Input\n                value={newTaskInput}\n                onChange={(e) => setNewTaskInput(e.target.value)}\n                placeholder=\"e.g., Review project proposal by 3pm today\"\n                className=\"w-full\"\n                onKeyDown={(e) => {\n                  if (e.key === \"Enter\" && !e.shiftKey) {\n                    e.preventDefault();\n                    handleCreateManualTask();\n                  }\n                }}\n                data-testid=\"input-manual-task\"\n              />\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsAddTaskDialogOpen(false);\n                  setNewTaskInput(\"\");\n                }}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-task\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateManualTask}\n                disabled={!newTaskInput.trim() || createTaskFromTextMutation.isPending}\n                className=\"flex-1 bg-green-500 hover:bg-green-600\"\n                data-testid=\"button-create-task\"\n              >\n                {createTaskFromTextMutation.isPending ? \"🤖 AI Creating Task...\" : \"Create Task\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Completely Manual Task Dialog */}\n      <Dialog open={isManualTaskDialogOpen} onOpenChange={setIsManualTaskDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Plus className=\"w-5 h-5 mr-2 text-green-500\" />\n              Add Manual Task\n            </DialogTitle>\n            <DialogDescription>\n              Create a task without AI assistance. Enter the task name and time separately.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Task Name</label>\n              <Input\n                value={manualTaskName}\n                onChange={(e) => setManualTaskName(e.target.value)}\n                placeholder=\"e.g., Review project proposal\"\n                className=\"w-full\"\n                data-testid=\"input-manual-task-name\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Due Date & Time (Optional)</label>\n              <div className=\"border border-gray-300 rounded-md p-2\">\n                <DatePicker\n                  selected={manualTaskDateTime}\n                  onChange={(date: Date | null) => setManualTaskDateTime(date)}\n                  showTimeSelect\n                  timeFormat=\"HH:mm\"\n                  timeIntervals={15}\n                  dateFormat=\"MMMM d, yyyy h:mm aa\"\n                  placeholderText=\"Select date and time\"\n                  className=\"w-full bg-transparent outline-none\"\n                  minDate={new Date()}\n                  isClearable\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Select a specific date and time, or leave empty for no deadline\n              </p>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsManualTaskDialogOpen(false);\n                  setManualTaskName(\"\");\n                  setManualTaskTime(\"\");\n                  setManualTaskDateTime(null);\n                }}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-manual-task\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleCreateCompletelyManualTask}\n                disabled={!manualTaskName.trim()}\n                className=\"flex-1 bg-blue-500 hover:bg-blue-600\"\n                data-testid=\"button-create-manual-task\"\n              >\n                Create Task\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Description Dialog */}\n      <Dialog open={isDescriptionDialogOpen} onOpenChange={setIsDescriptionDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <CheckSquare className=\"w-5 h-5 mr-2 text-primary\" />\n              Task Description\n            </DialogTitle>\n            <DialogDescription>\n              {selectedTask && `Task: ${selectedTask.title} • Status: ${selectedTask.status}`}\n            </DialogDescription>\n          </DialogHeader>\n\n          {selectedTask && (\n            <div className=\"space-y-4\">\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <h4 className=\"font-medium mb-2\">Title:</h4>\n                <p className=\"text-sm text-muted-foreground\">{selectedTask.title}</p>\n              </div>\n\n              <div className=\"border rounded-lg p-4 bg-muted/20\">\n                <h4 className=\"font-medium mb-2\">Description:</h4>\n                <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n                  {selectedTask.description || 'No description provided'}\n                </p>\n              </div>\n\n              {selectedTask.priority && (\n                <div className=\"border rounded-lg p-4 bg-muted/20\">\n                  <h4 className=\"font-medium mb-2\">Priority:</h4>\n                  <span className={`text-sm px-2 py-1 rounded-full ${\n                    selectedTask.priority === 'urgent' ? 'bg-red-100 text-red-800' :\n                    selectedTask.priority === 'important' ? 'bg-yellow-100 text-yellow-800' :\n                    'bg-green-100 text-green-800'\n                  }`}>\n                    {selectedTask.priority.charAt(0).toUpperCase() + selectedTask.priority.slice(1)}\n                  </span>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":59135},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/theme-switcher.tsx":{"content":"\nimport { useState, useEffect } from 'react';\nimport { Moon, Sun, Monitor } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ntype Theme = 'light' | 'dark' | 'system';\n\nexport function ThemeSwitcher() {\n  const [theme, setTheme] = useState<Theme>('dark');\n\n  useEffect(() => {\n    // Check if device is mobile\n    const isMobile = window.innerWidth < 768;\n    \n    if (isMobile) {\n      // For mobile devices, automatically use system theme\n      setTheme('system');\n      applyTheme('system');\n      \n      // Listen for system theme changes on mobile\n      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      const handleSystemThemeChange = () => {\n        applyTheme('system');\n      };\n      \n      mediaQuery.addEventListener('change', handleSystemThemeChange);\n      \n      return () => {\n        mediaQuery.removeEventListener('change', handleSystemThemeChange);\n      };\n    } else {\n      // For desktop, use saved theme or default to dark\n      const savedTheme = localStorage.getItem('theme') as Theme;\n      if (savedTheme) {\n        setTheme(savedTheme);\n        applyTheme(savedTheme);\n      } else {\n        // Default to dark theme\n        applyTheme('dark');\n      }\n    }\n  }, []);\n\n  const applyTheme = (newTheme: Theme) => {\n    const root = document.documentElement;\n    \n    if (newTheme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n      root.classList.toggle('dark', systemTheme === 'dark');\n      root.classList.toggle('light', systemTheme === 'light');\n    } else {\n      root.classList.toggle('dark', newTheme === 'dark');\n      root.classList.toggle('light', newTheme === 'light');\n    }\n\n    if (newTheme === 'light') {\n      // Modern light theme with better contrast and softer colors\n      root.style.setProperty('--background', 'hsl(0, 0%, 98%)');\n      root.style.setProperty('--foreground', 'hsl(224, 71%, 4%)');\n      root.style.setProperty('--card', 'hsl(0, 0%, 100%)');\n      root.style.setProperty('--card-foreground', 'hsl(224, 71%, 4%)');\n      root.style.setProperty('--popover', 'hsl(0, 0%, 100%)');\n      root.style.setProperty('--popover-foreground', 'hsl(224, 71%, 4%)');\n      root.style.setProperty('--primary', 'hsl(221, 83%, 53%)');\n      root.style.setProperty('--primary-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--secondary', 'hsl(210, 40%, 94%)');\n      root.style.setProperty('--secondary-foreground', 'hsl(222, 84%, 4%)');\n      root.style.setProperty('--muted', 'hsl(210, 40%, 94%)');\n      root.style.setProperty('--muted-foreground', 'hsl(215, 16%, 44%)');\n      root.style.setProperty('--accent', 'hsl(210, 40%, 92%)');\n      root.style.setProperty('--accent-foreground', 'hsl(222, 84%, 4%)');\n      root.style.setProperty('--destructive', 'hsl(0, 72%, 51%)');\n      root.style.setProperty('--destructive-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--border', 'hsl(214, 32%, 88%)');\n      root.style.setProperty('--input', 'hsl(214, 32%, 88%)');\n      root.style.setProperty('--ring', 'hsl(221, 83%, 53%)');\n    } else {\n      // Dark theme (default)\n      root.style.setProperty('--background', 'hsl(222, 84%, 4%)');\n      root.style.setProperty('--foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--card', 'hsl(222, 84%, 6%)');\n      root.style.setProperty('--card-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--popover', 'hsl(222, 84%, 6%)');\n      root.style.setProperty('--popover-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--primary', 'hsl(212, 100%, 47%)');\n      root.style.setProperty('--primary-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--secondary', 'hsl(217, 32%, 17%)');\n      root.style.setProperty('--secondary-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--muted', 'hsl(217, 32%, 12%)');\n      root.style.setProperty('--muted-foreground', 'hsl(215, 20%, 65%)');\n      root.style.setProperty('--accent', 'hsl(220, 14%, 96%)');\n      root.style.setProperty('--accent-foreground', 'hsl(222, 84%, 4%)');\n      root.style.setProperty('--destructive', 'hsl(0, 62%, 30%)');\n      root.style.setProperty('--destructive-foreground', 'hsl(210, 40%, 98%)');\n      root.style.setProperty('--border', 'hsl(217, 32%, 17%)');\n      root.style.setProperty('--input', 'hsl(217, 32%, 17%)');\n      root.style.setProperty('--ring', 'hsl(212, 100%, 47%)');\n    }\n  };\n\n  const handleThemeChange = (newTheme: Theme) => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n\n  const getThemeIcon = () => {\n    switch (theme) {\n      case 'light':\n        return <Sun className=\"h-4 w-4\" />;\n      case 'dark':\n        return <Moon className=\"h-4 w-4\" />;\n      case 'system':\n        return <Monitor className=\"h-4 w-4\" />;\n      default:\n        return <Moon className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\" className=\"glass-effect\">\n          {getThemeIcon()}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => handleThemeChange('light')}>\n          <Sun className=\"mr-2 h-4 w-4\" />\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => handleThemeChange('dark')}>\n          <Moon className=\"mr-2 h-4 w-4\" />\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => handleThemeChange('system')}>\n          <Monitor className=\"mr-2 h-4 w-4\" />\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":5883},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT_GUIDE.md":{"content":"# 🚀 Free Deployment Guide (No Credit Card Required)\n\nFlowHub is ready for deployment on **Railway** with **Neon** PostgreSQL database - both completely free for students!\n\n## 📋 Prerequisites\n- GitHub account\n- Gmail account (for OAuth)\n- Google Cloud Console access\n\n## 🗄️ Step 1: Set Up Free Database (Neon)\n\n1. **Go to [Neon](https://neon.tech)** \n2. **Sign up** with GitHub (no credit card required)\n3. **Create new project**: \n   - Name: `flowhub-db`\n   - Region: Choose closest to you\n4. **Copy connection string** from dashboard\n   - Format: `postgresql://username:password@hostname:5432/database_name`\n\n## 🚀 Step 2: Deploy to Railway\n\n1. **Go to [Railway](https://railway.app)**\n2. **Sign up** with GitHub (no credit card required)\n3. **New Project** → **Deploy from GitHub repo**\n4. **Connect your FlowHub repository**\n5. **Add Environment Variables**:\n   ```\n   DATABASE_URL=your_neon_connection_string_here\n   GEMINI_API_KEY=your_gemini_api_key\n   GOOGLE_CLIENT_ID=your_google_client_id  \n   GOOGLE_CLIENT_SECRET=your_google_client_secret\n   SESSION_SECRET=create_a_long_random_string_here\n   NODE_ENV=production\n   ```\n\n## 🔐 Step 3: Update Google OAuth Settings\n\n1. **Go to [Google Cloud Console](https://console.cloud.google.com/apis/credentials)**\n2. **Edit your OAuth 2.0 Client ID**\n3. **Add Authorized redirect URI**:\n   ```\n   https://your-railway-domain.railway.app/auth/gmail/callback\n   ```\n   *(Replace with your actual Railway domain)*\n\n## ✅ Step 4: Deploy and Test\n\n1. **Railway auto-deploys** from your GitHub repo\n2. **Database migration** runs automatically\n3. **Visit your app** at the Railway-provided URL\n4. **Test Gmail integration** by connecting your account\n\n## 💰 Free Tier Limits\n\n### Railway ($5 free credits/month)\n- ✅ **No sleep mode** (always running)\n- ✅ **Custom domains**\n- ✅ **Auto-deployments**\n- ✅ **Environment variables**\n\n### Neon Database\n- ✅ **3GB storage**\n- ✅ **10 branches**\n- ✅ **Unlimited queries**\n- ✅ **Auto-scaling**\n\n## 🔄 Alternative: Render + Neon\n\nIf you prefer **Render** (completely free but sleeps after 15 minutes):\n\n1. **Go to [Render](https://render.com)**\n2. **Connect GitHub repo**\n3. **Use same environment variables**\n4. **Deploy automatically**\n\n## 🚨 Important Notes\n\n- **Keep your API keys secure** - never commit them to GitHub\n- **Free tiers are perfect** for student projects and portfolios\n- **Both platforms scale** when you need more resources later\n- **No credit card required** for either platform\n\n## 🆘 Need Help?\n\nCheck the logs in Railway/Render dashboard if deployment fails. Most issues are related to:\n1. Missing environment variables\n2. Incorrect database connection string\n3. Google OAuth redirect URI mismatch\n\nYour FlowHub is now ready for the world! 🎉","size_bytes":2794}},"version":1}